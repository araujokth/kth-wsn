/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'WTSensorValuesMsg'
 * message type.
 */

public class WTSensorValuesMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 15;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 15;

    /** Create a new WTSensorValuesMsg of size 15. */
    public WTSensorValuesMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new WTSensorValuesMsg of the given data_length. */
    public WTSensorValuesMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg with the given data_length
     * and base offset.
     */
    public WTSensorValuesMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg using the given byte array
     * as backing store.
     */
    public WTSensorValuesMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public WTSensorValuesMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public WTSensorValuesMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg embedded in the given message
     * at the given base offset.
     */
    public WTSensorValuesMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTSensorValuesMsg embedded in the given message
     * at the given base offset and length.
     */
    public WTSensorValuesMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <WTSensorValuesMsg> \n";
      try {
        s += "  [tankLevel=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_tankLevel(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [integrator="+Float.toString(get_integrator())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [performValues.pckTotal=0x"+Long.toHexString(get_performValues_pckTotal())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [performValues.pckSuccess=0x"+Long.toHexString(get_performValues_pckSuccess())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [performValues.delay=0x"+Long.toHexString(get_performValues_delay())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [isGTSpacket=0x"+Long.toHexString(get_isGTSpacket())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tankLevel
    //   Field type: int[], unsigned
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tankLevel' is signed (false).
     */
    public static boolean isSigned_tankLevel() {
        return false;
    }

    /**
     * Return whether the field 'tankLevel' is an array (true).
     */
    public static boolean isArray_tankLevel() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tankLevel'
     */
    public static int offset_tankLevel(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tankLevel'
     */
    public static int offsetBits_tankLevel(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'tankLevel' as a int[]
     */
    public int[] get_tankLevel() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_tankLevel(0); index0++) {
            tmp[index0] = getElement_tankLevel(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tankLevel' from the given int[]
     */
    public void set_tankLevel(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tankLevel(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'tankLevel'
     */
    public int getElement_tankLevel(int index1) {
        return (int)getUIntBEElement(offsetBits_tankLevel(index1), 16);
    }

    /**
     * Set an element of the array 'tankLevel'
     */
    public void setElement_tankLevel(int index1, int value) {
        setUIntBEElement(offsetBits_tankLevel(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tankLevel'
     */
    public static int totalSize_tankLevel() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tankLevel'
     */
    public static int totalSizeBits_tankLevel() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tankLevel'
     */
    public static int elementSize_tankLevel() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tankLevel'
     */
    public static int elementSizeBits_tankLevel() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'tankLevel'
     */
    public static int numDimensions_tankLevel() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tankLevel'
     */
    public static int numElements_tankLevel() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'tankLevel'
     * for the given dimension.
     */
    public static int numElements_tankLevel(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: integrator
    //   Field type: float, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'integrator' is signed (false).
     */
    public static boolean isSigned_integrator() {
        return false;
    }

    /**
     * Return whether the field 'integrator' is an array (false).
     */
    public static boolean isArray_integrator() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'integrator'
     */
    public static int offset_integrator() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'integrator'
     */
    public static int offsetBits_integrator() {
        return 32;
    }

    /**
     * Return the value (as a float) of the field 'integrator'
     */
    public float get_integrator() {
        return (float)getFloatElement(offsetBits_integrator(), 32);
    }

    /**
     * Set the value of the field 'integrator'
     */
    public void set_integrator(float value) {
        setFloatElement(offsetBits_integrator(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'integrator'
     */
    public static int size_integrator() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'integrator'
     */
    public static int sizeBits_integrator() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: performValues.pckTotal
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'performValues.pckTotal' is signed (false).
     */
    public static boolean isSigned_performValues_pckTotal() {
        return false;
    }

    /**
     * Return whether the field 'performValues.pckTotal' is an array (false).
     */
    public static boolean isArray_performValues_pckTotal() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'performValues.pckTotal'
     */
    public static int offset_performValues_pckTotal() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'performValues.pckTotal'
     */
    public static int offsetBits_performValues_pckTotal() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'performValues.pckTotal'
     */
    public int get_performValues_pckTotal() {
        return (int)getUIntBEElement(offsetBits_performValues_pckTotal(), 16);
    }

    /**
     * Set the value of the field 'performValues.pckTotal'
     */
    public void set_performValues_pckTotal(int value) {
        setUIntBEElement(offsetBits_performValues_pckTotal(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'performValues.pckTotal'
     */
    public static int size_performValues_pckTotal() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'performValues.pckTotal'
     */
    public static int sizeBits_performValues_pckTotal() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: performValues.pckSuccess
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'performValues.pckSuccess' is signed (false).
     */
    public static boolean isSigned_performValues_pckSuccess() {
        return false;
    }

    /**
     * Return whether the field 'performValues.pckSuccess' is an array (false).
     */
    public static boolean isArray_performValues_pckSuccess() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'performValues.pckSuccess'
     */
    public static int offset_performValues_pckSuccess() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'performValues.pckSuccess'
     */
    public static int offsetBits_performValues_pckSuccess() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'performValues.pckSuccess'
     */
    public int get_performValues_pckSuccess() {
        return (int)getUIntBEElement(offsetBits_performValues_pckSuccess(), 16);
    }

    /**
     * Set the value of the field 'performValues.pckSuccess'
     */
    public void set_performValues_pckSuccess(int value) {
        setUIntBEElement(offsetBits_performValues_pckSuccess(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'performValues.pckSuccess'
     */
    public static int size_performValues_pckSuccess() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'performValues.pckSuccess'
     */
    public static int sizeBits_performValues_pckSuccess() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: performValues.delay
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'performValues.delay' is signed (false).
     */
    public static boolean isSigned_performValues_delay() {
        return false;
    }

    /**
     * Return whether the field 'performValues.delay' is an array (false).
     */
    public static boolean isArray_performValues_delay() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'performValues.delay'
     */
    public static int offset_performValues_delay() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'performValues.delay'
     */
    public static int offsetBits_performValues_delay() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'performValues.delay'
     */
    public int get_performValues_delay() {
        return (int)getUIntBEElement(offsetBits_performValues_delay(), 16);
    }

    /**
     * Set the value of the field 'performValues.delay'
     */
    public void set_performValues_delay(int value) {
        setUIntBEElement(offsetBits_performValues_delay(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'performValues.delay'
     */
    public static int size_performValues_delay() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'performValues.delay'
     */
    public static int sizeBits_performValues_delay() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: isGTSpacket
    //   Field type: short, unsigned
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'isGTSpacket' is signed (false).
     */
    public static boolean isSigned_isGTSpacket() {
        return false;
    }

    /**
     * Return whether the field 'isGTSpacket' is an array (false).
     */
    public static boolean isArray_isGTSpacket() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'isGTSpacket'
     */
    public static int offset_isGTSpacket() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'isGTSpacket'
     */
    public static int offsetBits_isGTSpacket() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'isGTSpacket'
     */
    public short get_isGTSpacket() {
        return (short)getUIntElement(offsetBits_isGTSpacket(), 8);
    }

    /**
     * Set the value of the field 'isGTSpacket'
     */
    public void set_isGTSpacket(short value) {
        setUIntElement(offsetBits_isGTSpacket(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'isGTSpacket'
     */
    public static int size_isGTSpacket() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'isGTSpacket'
     */
    public static int sizeBits_isGTSpacket() {
        return 8;
    }

}
