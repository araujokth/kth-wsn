
 - The handling of fuse and lock bits needs some serious work. As it stands
   it does not work with Hi-V parallel programming (on stk500). I've 
   started working on this, but it was way too intusive a change to do just
   before a release. [TRoth/2003-05-27]
 - improve pavr support (many thanks to Jason Kyle for sending me one
   of these nice programmers, see http://www.avr1.org/pavr/pavr.html):
   - add option to force device type for chips with broken signature bytes
   - use consistent -dpart=... device names
   - more firmware improvements, speed optimizations (send OK response
     and receive the next command while executing the previous one, use
     data polling if supported by device, etc.)
 - support for parallel port JTAG programming of ATmega8/16/323/128
 - AT89S52 support (similar commands as AVR, but RESET active high)
 - option to generate XTAL1 clock for target device while programming,
   as in FBPRG / AVREAL / modified ByteBlaster / STK200 (LED output)
 - how to talk to these new USB programmers Kanda is advertising now?
 - better documentation
 - clean rewrite in C ;)
   (for parallel port interfaces only, maybe port the program already
   available at http://www.bsdhome.com/avrprog/ from FreeBSD to Linux
   and extend it to support all these different cables? [This program
   is now called avrdude and has been ported to linux and cygwin.])
   or at least, some better way to add all these parallel interfaces
   invented by various people, with different pin assignments.
   See also "cisp" by Marko Makela <msmakela@cc.hut.fi> available from
   http://www.funet.fi/pub/cbm/crossplatform/transfer/C2N232/firmware/
   cisp-1.0.tar.gz
 - ATDH1150VPC cable support
 - cleaner way to describe all these different cables
 - free/open firmware for the STK500 (which is based on AT90S8535, and
   schematics are available on avrfreaks), implementing the same and/or
   our own different protocol
 - uisp-compatible (avr910/pavr mode) boot loader for recent ATmega chips,
   share common parts of the code (comm protocol) with pavr.c ?
   add multi-word read/write/verify commands (faster)
   mostly done, needs to be merged - see http://tlw.com/bryce/robot/avr/
 - pavr firmware for ATmega8: new hardware design, more features possible
   than with the original 2313, board with TQFP32 part should still fit in
   that nice small DB9-DB9 housing, and it would be nice to be able to
   flash the firmware through the same serial port, using a boot loader
   and uisp of course :)
