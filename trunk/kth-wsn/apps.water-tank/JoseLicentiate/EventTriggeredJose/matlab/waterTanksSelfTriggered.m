function waterTanksSelfTriggered(varargin)
global WTSelf

%This function is the interface to control the matlab WTSelf application

%
% The following block is the standard matlab/TinyOS app.
% Functions specific to this application are below
%
if nargin>0 & ischar(varargin{1})
    % the user or timer is calling one of the functions below
    feval(varargin{1},varargin{2:end});
else nargin==0
    usage;
end


function usage
fprintf('USAGE:\n\twaterTanksSelfTriggered(''init'')\n\twaterTanksSelfTriggered(''startP'')\n\twaterTanksSelfTriggered(''stopP'')\n\twaterTanksSelfTriggered(''disconnectP'')\n\tetc.\n')

%
% StdControl:
%   init
%   reinit
%   start
%   restart
%   stop
%
function compile(varargin)
global WTSelf;

% Restart the variables with the new configuration
disp('--- Script to program the motes and generate the motelist ---');
WTSelf.channel = str2double(get(WTSelf.gui.channel, 'String'));            % Number of the channel
cmd = sprintf('moteSelfTriggered %u 0 %u %u %u %u', ...
    WTSelf.nWaterTanks,...
    WTSelf.nSensors, ...
    WTSelf.channel, ...
    WTSelf.panID, ...
    WTSelf.offsetWT);

unix(cmd);
disp('-------------------------------------------------------------');

init;

function init(varargin)
% create a global structure to hold persistent state for this application
global WTSelf
global WTModeling

% import all necessary java packages
import net.tinyos.*
import net.tinyos.message.*

% load the file generated by the PHP script
run motelist

%% SerialForwarder CONSTANTS
% We search again the port number. It is safer
% Get the port from the motelist
WTSelf.usbSnifferPort = [];
for i=1:motes.nMotes
   if strcmp(motes.moteList{i}.reference, motes.baseStation)
       WTSelf.usbBasePort = motes.moteList{i}.port;
      % break;
   elseif strcmp(motes.moteList{i}.reference, motes.sniffer)
      WTSelf.usbSnifferPort = motes.moteList{i}.port;
    %break
   end
end
WTSelf.OUTPUT_SERIAL = 'serial_output/';
WTSelf.connectionPort = 9002;
WTSelf.connectionName = sprintf('sf@localhost:%d', WTSelf.connectionPort);
fprintf('WARNING: Be sure that the BaseStation is connected in the /dev/ttyUSB%d \n', WTSelf.usbBasePort);
WTSelf.msgClass = WTInfoMsg;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Scenarios CONSTANTS

% get the values from the GUI
WTSelf.nWaterTanks = str2double(get(WTSelf.gui.numWaterTanks, 'String'));         % Number of coupled tanks

WTSelf.nSensors = str2double(get(WTSelf.gui.numSensors, 'String'));            % Number of dummy sensors
WTSelf.channel = str2double(get(WTSelf.gui.channel, 'String'));            % Number of the channel
WTSelf.panID = str2double(get(WTSelf.gui.panID, 'String'));            % Pan ID in case we want to differente them
WTSelf.offsetWT = str2double(get(WTSelf.gui.offsetWT, 'String'));            % Pan ID in case we want to differente them

WTSelf.nTotal = WTSelf.nWaterTanks * 2 + WTSelf.nSensors;  % Total number of motes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% IEEE 802.15.4 standard protocol CONSTANTS
% From TKN154_MAC.h
WTSelf.IEEE154_aNumSuperframeSlots = 11;            % We expand the superframe to 20 slots
WTSelf.capSlots = 1;                                % One of them is for the CAP
WTSelf.cfpSlots = 10;
WTSelf.IEEE154_aBaseSlotDuration = 60;   

% From app_sensors.h
WTSelf.DEFAULT_BO = 6;                              % Default BO
WTSelf.DEFAULT_SO = 5;                              % Defulat SO

% Timing computations
WTSelf.SYMBOL = 1/(2*32768);                        % time in seconds
WTSelf.slotLength = power(2, WTSelf.DEFAULT_SO) * WTSelf.IEEE154_aBaseSlotDuration;
WTSelf.capDuration = WTSelf.capSlots;
WTSelf.deltaCAP = WTSelf.capDuration * WTSelf.slotLength * WTSelf.SYMBOL;         % time in seconds
WTSelf.SD = WTSelf.slotLength * WTSelf.cfpSlots *  WTSelf.SYMBOL;           %

WTSelf.BI = zeros(15,1); % Beacon intervals for beacon orders 4...14
% Build the BI vector
for i=1:15
  WTSelf.BI(i) = power(2, i-1)*WTSelf.IEEE154_aNumSuperframeSlots ...
      * WTSelf.IEEE154_aBaseSlotDuration * WTSelf.SYMBOL;
end
WTSelf.tBI = WTSelf.BI(WTSelf.DEFAULT_BO+1);

WTSelf.currentBO = 0;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Water tank CONSTANTS
WTSelf.DEBUG_LEVELS = false;
WTSelf.WT_CALIBRATION = 87.3932;
% Controller configuration
WTSelf.INITIAL_REFERENCE = 5;
WTSelf.REFERENCE = 10;
WTSelf.END_REFERENCE = 20;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Self-triggered configuration CONSTANTS
WTSelf.timeSchedule = zeros(1, WTSelf.nTotal);
% load the matrix from the mat file
WTSelf.lvm = zeros(31, 3, WTSelf.nWaterTanks);

d = dir('mat/lvm_*.mat');
j = 1;
for i=1:length(d)
    if ~d(i).isdir
        load(sprintf('mat/%s', d(i).name));
        WTSelf.lvm(: , :, j) = lvm;
        j = j + 1;
    end
end

WTSelf.nLate = WTSelf.nTotal - WTSelf.cfpSlots;
if WTSelf.nLate < 0
    WTSelf.nLate = 1;
end
WTSelf.lateMote = zeros(1, WTSelf.nLate);
WTSelf.slots = zeros(1, WTSelf.cfpSlots);
% default slots asign
for i=1:WTSelf.nWaterTanks 
    WTSelf.defaultSlots(i) = WTSelf.IEEE154_aNumSuperframeSlots - (2*i+1);
    WTSelf.defaultSlots(i+1) = WTSelf.IEEE154_aNumSuperframeSlots - (2*i+2);
end
for i=2*WTSelf.nWaterTanks:WTSelf.cfpSlots
        WTSelf.defaultSlots(i) = WTSelf.IEEE154_aNumSuperframeSlots - (i+1);
end
WTSelf.maxSampleInterval = 10;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Controller CONSTANTS

WTSelf.PERIODIC_CONTROLLER = 1;
WTSelf.SELFTRIGGERED_CONTROLLER = 2;
WTSelf.MODELING_CONTROLLER = 3;
WTSelf.CONSTANT_CONTROLLER = 4;
WTSelf.REFERENCE_CONTROLLER = 5;
WTSelf.RESET_INTEGRAL = 6;
WTSelf.EVENT_TRIGGERED_CONTROLLER = 7;

WTSelf.controller = WTSelf.PERIODIC_CONTROLLER;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Logger CONSTANTS
%Set the variables that we want to log
WTSelf.logger.serialOutputFileName = '';
WTSelf.logger.nSamples = 1;
WTSelf.logger.y = zeros(1, WTSelf.nWaterTanks, 2);
WTSelf.logger.x = zeros(1, WTSelf.nWaterTanks, 2);
WTSelf.logger.y_initial = zeros(1, WTSelf.nWaterTanks, 2);
WTSelf.logger.x0_initial = zeros(1, WTSelf.nWaterTanks, 2);
WTSelf.logger.u = zeros(1, WTSelf.nWaterTanks);
WTSelf.logger.u_initial = zeros(1, WTSelf.nWaterTanks);
WTSelf.logger.integral = zeros(1, WTSelf.nWaterTanks);
WTSelf.logger.integral_initial = zeros(1, WTSelf.nWaterTanks);

WTSelf.logger.timeSchedule = zeros(1, WTSelf.nTotal);
WTSelf.logger.tau = zeros(1, WTSelf.nWaterTanks + WTSelf.nSensors);
WTSelf.logger.ttStart = [];
WTSelf.logger.lateMotes = zeros(1, WTSelf.nLate);
WTSelf.logger.slots  = zeros(1, WTSelf.cfpSlots);

WTSelf.logger.x10  = zeros(1, WTSelf.nWaterTanks);
WTSelf.logger.x20  = zeros(1, WTSelf.nWaterTanks);
WTSelf.logger.x30  = zeros(1, WTSelf.nWaterTanks);

% Added for debugging
WTSelf.logger.timeAllocated = zeros(1, WTSelf.nTotal);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



fprintf('\nWTSelf.tBi=%0.3f s; WTSelf.slotLength=%d ; WTSelf.deltaCAP=%0.4f s; WTSelf.SYMBOL=%0.4f us\n',...
WTSelf.tBI, WTSelf.slotLength, WTSelf.deltaCAP, WTSelf.SYMBOL*1E6);
WTSelf.initApp = false;

%% Water Tanks Modeling variables

WTModeling.INIT = 0;
WTModeling.STEP_RESPONSE = 1;
WTModeling.INCR_RESPONSE = 2;
WTModeling.END = 3;

WTModeling.state = WTModeling.INIT;

WTModeling.u = zeros(WTSelf.nWaterTanks,1);

WTModeling.STEADY_STATE_TIME = [0 200 400; 0 0 0];
 %WTModeling.STEADY_STATE_TIME = [500 1000 1700; 0 0 0];



WTModeling.u0 = zeros(WTSelf.nWaterTanks,1);
WTModeling.xf = zeros(WTSelf.nWaterTanks,2);
WTModeling.parameters.gamma = zeros(WTSelf.nWaterTanks,1);

% incr responses
WTModeling.incr_u = 1.5;
WTModeling.delta_xf = zeros(WTSelf.nWaterTanks,1);
WTModeling.parameters.k = zeros(WTSelf.nWaterTanks,1);

% end state
WTModeling.parameters.tau = zeros(WTSelf.nWaterTanks,1);
WTModeling.end = false;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sfStr = sprintf('sf %d /dev/ttyUSB%d 115200 &', ...
    WTSelf.connectionPort, WTSelf.usbBasePort);
unix(sfStr);


function startP
global WTSelf
global COMM
% Build the connections array

connect(WTSelf.connectionName);

receive(@readFromBaseStation, WTSelf.msgClass, WTSelf.connectionName);
resetIntegral();
message = SuperframeConfigMsg;

message.set_BI( 255);
message.set_timeslots( zeros(1, WTSelf.cfpSlots));
 
 send(COMM.TOS_BCAST_ADDR, message, ...
     sprintf('%s%d', WTSelf.connectionName));
tic


function stopP
global WTSelf

stopReceiving(@readFromBaseStation, WTSelf.msgClass, WTSelf.connectionName);
% stop the timer


function disconnectP
global COMM

for i=1:size(COMM.connectionName,2)
    disconnect(COMM.connectionName{i});
end
unix('killall sf');


function changeController(option)
global WTSelf;
global WTModeling;
global COMM;

WTSelf.controller = option;
WTSelf.logger.nSamples = 1;

message = ControlMsg;
message.set_cmd(WTSelf.controller);
WTSelf.controller
message.set_u(zeros(WTSelf.nWaterTanks,1));

send(COMM.TOS_BCAST_ADDR, message, ...
    sprintf('%s%d', WTSelf.connectionName));

unix('killall seriallisten');
% When we change the controller, we start saving data
c = clock;

WTSelf.logger.serialOutputFileName = sprintf('%sdata_mode%d_%s_%0.0f%0.0f%0.0f',  ...
    WTSelf.OUTPUT_SERIAL, WTSelf.controller, datestr(date, 'yymmdd'), c(4), c(5), c(6) );

if ~isempty(WTSelf.usbSnifferPort)
    serialListen = sprintf('moteSerialListenRedirect %d %s &', ...
        WTSelf.usbSnifferPort, WTSelf.logger.serialOutputFileName);
    unix(serialListen);
end


function saveInformation
global WTSelf
c = clock;
m_file = sprintf('mat/data_mode%d_%dtanks_%s_%02.f%02.f%02.f.mat', ...
     WTSelf.controller, WTSelf.nWaterTanks, ...
    datestr(date, 'yymmdd'), c(4), c(5), c(6) );

save(m_file, 'WTSelf');

function showPlots(option)
global WTSelf;
d = dir(sprintf('mat/data_mode%d_%dtanks_*', option,  WTSelf.nWaterTanks));
if isempty(d)
    return;
end
file = d(end).name;

%plotGlobal(file);

d = dir(sprintf('%sdata_mode%d*', WTSelf.OUTPUT_SERIAL, option));
if isempty(d)
    return;
end
file = d(end).name;
commPerformance([WTSelf.OUTPUT_SERIAL file]);





function resetIntegral
global COMM

global WTSelf;
% Send the command to reset the integral
message = ControlMsg;
message.set_cmd(WTSelf.RESET_INTEGRAL);
message.set_u(zeros(WTSelf.nWaterTanks,1));

send(COMM.TOS_BCAST_ADDR, message, ...
    sprintf('%s%d', WTSelf.connectionName));

function apply_changes
global WTSelf;

% get the values from the GUI
WTSelf.nWaterTanks = str2double(get(WTSelf.gui.numWaterTanks, 'String'));         % Number of coupled tanks

WTSelf.nSensors = str2double(get(WTSelf.gui.numSensors, 'String'));            % Number of dummy sensors
WTSelf.channel = str2double(get(WTSelf.gui.channel, 'String'));            % Number of the channel
WTSelf.panID = str2double(get(WTSelf.gui.panID, 'String'));            % Pan ID in case we want to differente them
WTSelf.offsetWT = str2double(get(WTSelf.gui.offsetWT, 'String'));            % Pan ID in case we want to differente them

WTSelf.nTotal = WTSelf.nWaterTanks * 2 + WTSelf.nSensors;  % Total number of motes


