/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'WTInfoMsg'
 * message type.
 */

public class WTInfoMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 14;

    /** Create a new WTInfoMsg of size 30. */
    public WTInfoMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new WTInfoMsg of the given data_length. */
    public WTInfoMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg with the given data_length
     * and base offset.
     */
    public WTInfoMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg using the given byte array
     * as backing store.
     */
    public WTInfoMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public WTInfoMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public WTInfoMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg embedded in the given message
     * at the given base offset.
     */
    public WTInfoMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new WTInfoMsg embedded in the given message
     * at the given base offset and length.
     */
    public WTInfoMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <WTInfoMsg> \n";
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [extraSensors=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_extraSensors(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_u(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u_initial=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_u_initial(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [time=0x"+Long.toHexString(get_time())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [integral=";
        for (int i = 0; i < 1; i++) {
          s += Float.toString(getElement_integral(i))+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [integral_initial=";
        for (int i = 0; i < 1; i++) {
          s += Float.toString(getElement_integral_initial(i))+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ref="+Float.toString(get_ref())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y
    //   Field type: short[][]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y' is signed (true).
     */
    public static boolean isSigned_y() {
        return true;
    }

    /**
     * Return whether the field 'y' is an array (true).
     */
    public static boolean isArray_y() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'y'
     */
    public static int offset_y(int index1, int index2) {
        int offset = 0;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        if (index2 < 0 || index2 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y'
     */
    public static int offsetBits_y(int index1, int index2) {
        int offset = 0;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        if (index2 < 0 || index2 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return offset;
    }

    /**
     * Return the entire array 'y' as a short[][]
     */
    public short[][] get_y() {
        short[][] tmp = new short[1][2];
        for (int index0 = 0; index0 < numElements_y(0); index0++) {
          for (int index1 = 0; index1 < numElements_y(1); index1++) {
              tmp[index0][index1] = getElement_y(index0,index1);
          }
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'y' from the given short[][]
     */
    public void set_y(short[][] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
          for (int index1 = 0; index1 < value[index0].length; index1++) {
              setElement_y(index0,index1, value[index0][index1]);
          }
        }
    }

    /**
     * Return an element (as a short) of the array 'y'
     */
    public short getElement_y(int index1, int index2) {
        return (short)getSIntBEElement(offsetBits_y(index1, index2), 16);
    }

    /**
     * Set an element of the array 'y'
     */
    public void setElement_y(int index1, int index2, short value) {
        setSIntBEElement(offsetBits_y(index1, index2), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'y'
     */
    public static int totalSize_y() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'y'
     */
    public static int totalSizeBits_y() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'y'
     */
    public static int elementSize_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'y'
     */
    public static int elementSizeBits_y() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'y'
     */
    public static int numDimensions_y() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'y'
     * for the given dimension.
     */
    public static int numElements_y(int dimension) {
      int array_dims[] = { 1, 2,  };
        if (dimension < 0 || dimension >= 2) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y_initial
    //   Field type: short[][]
    //   Offset (bits): 32
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y_initial' is signed (true).
     */
    public static boolean isSigned_y_initial() {
        return true;
    }

    /**
     * Return whether the field 'y_initial' is an array (true).
     */
    public static boolean isArray_y_initial() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'y_initial'
     */
    public static int offset_y_initial(int index1, int index2) {
        int offset = 32;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        if (index2 < 0 || index2 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y_initial'
     */
    public static int offsetBits_y_initial(int index1, int index2) {
        int offset = 32;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        if (index2 < 0 || index2 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return offset;
    }

    /**
     * Return the entire array 'y_initial' as a short[][]
     */
    public short[][] get_y_initial() {
        short[][] tmp = new short[1][2];
        for (int index0 = 0; index0 < numElements_y_initial(0); index0++) {
          for (int index1 = 0; index1 < numElements_y_initial(1); index1++) {
              tmp[index0][index1] = getElement_y_initial(index0,index1);
          }
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'y_initial' from the given short[][]
     */
    public void set_y_initial(short[][] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
          for (int index1 = 0; index1 < value[index0].length; index1++) {
              setElement_y_initial(index0,index1, value[index0][index1]);
          }
        }
    }

    /**
     * Return an element (as a short) of the array 'y_initial'
     */
    public short getElement_y_initial(int index1, int index2) {
        return (short)getSIntBEElement(offsetBits_y_initial(index1, index2), 16);
    }

    /**
     * Set an element of the array 'y_initial'
     */
    public void setElement_y_initial(int index1, int index2, short value) {
        setSIntBEElement(offsetBits_y_initial(index1, index2), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'y_initial'
     */
    public static int totalSize_y_initial() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'y_initial'
     */
    public static int totalSizeBits_y_initial() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'y_initial'
     */
    public static int elementSize_y_initial() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'y_initial'
     */
    public static int elementSizeBits_y_initial() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'y_initial'
     */
    public static int numDimensions_y_initial() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'y_initial'
     * for the given dimension.
     */
    public static int numElements_y_initial(int dimension) {
      int array_dims[] = { 1, 2,  };
        if (dimension < 0 || dimension >= 2) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: extraSensors
    //   Field type: short[]
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'extraSensors' is signed (true).
     */
    public static boolean isSigned_extraSensors() {
        return true;
    }

    /**
     * Return whether the field 'extraSensors' is an array (true).
     */
    public static boolean isArray_extraSensors() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'extraSensors'
     */
    public static int offset_extraSensors(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'extraSensors'
     */
    public static int offsetBits_extraSensors(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'extraSensors' as a short[]
     */
    public short[] get_extraSensors() {
        short[] tmp = new short[1];
        for (int index0 = 0; index0 < numElements_extraSensors(0); index0++) {
            tmp[index0] = getElement_extraSensors(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'extraSensors' from the given short[]
     */
    public void set_extraSensors(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_extraSensors(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'extraSensors'
     */
    public short getElement_extraSensors(int index1) {
        return (short)getSIntBEElement(offsetBits_extraSensors(index1), 16);
    }

    /**
     * Set an element of the array 'extraSensors'
     */
    public void setElement_extraSensors(int index1, short value) {
        setSIntBEElement(offsetBits_extraSensors(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'extraSensors'
     */
    public static int totalSize_extraSensors() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'extraSensors'
     */
    public static int totalSizeBits_extraSensors() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'extraSensors'
     */
    public static int elementSize_extraSensors() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'extraSensors'
     */
    public static int elementSizeBits_extraSensors() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'extraSensors'
     */
    public static int numDimensions_extraSensors() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'extraSensors'
     */
    public static int numElements_extraSensors() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'extraSensors'
     * for the given dimension.
     */
    public static int numElements_extraSensors(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u
    //   Field type: short[]
    //   Offset (bits): 80
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u' is signed (true).
     */
    public static boolean isSigned_u() {
        return true;
    }

    /**
     * Return whether the field 'u' is an array (true).
     */
    public static boolean isArray_u() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'u'
     */
    public static int offset_u(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u'
     */
    public static int offsetBits_u(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'u' as a short[]
     */
    public short[] get_u() {
        short[] tmp = new short[1];
        for (int index0 = 0; index0 < numElements_u(0); index0++) {
            tmp[index0] = getElement_u(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'u' from the given short[]
     */
    public void set_u(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_u(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'u'
     */
    public short getElement_u(int index1) {
        return (short)getSIntBEElement(offsetBits_u(index1), 16);
    }

    /**
     * Set an element of the array 'u'
     */
    public void setElement_u(int index1, short value) {
        setSIntBEElement(offsetBits_u(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'u'
     */
    public static int totalSize_u() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'u'
     */
    public static int totalSizeBits_u() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'u'
     */
    public static int elementSize_u() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'u'
     */
    public static int elementSizeBits_u() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'u'
     */
    public static int numDimensions_u() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'u'
     */
    public static int numElements_u() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'u'
     * for the given dimension.
     */
    public static int numElements_u(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u_initial
    //   Field type: short[]
    //   Offset (bits): 96
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u_initial' is signed (true).
     */
    public static boolean isSigned_u_initial() {
        return true;
    }

    /**
     * Return whether the field 'u_initial' is an array (true).
     */
    public static boolean isArray_u_initial() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'u_initial'
     */
    public static int offset_u_initial(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u_initial'
     */
    public static int offsetBits_u_initial(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'u_initial' as a short[]
     */
    public short[] get_u_initial() {
        short[] tmp = new short[1];
        for (int index0 = 0; index0 < numElements_u_initial(0); index0++) {
            tmp[index0] = getElement_u_initial(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'u_initial' from the given short[]
     */
    public void set_u_initial(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_u_initial(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'u_initial'
     */
    public short getElement_u_initial(int index1) {
        return (short)getSIntBEElement(offsetBits_u_initial(index1), 16);
    }

    /**
     * Set an element of the array 'u_initial'
     */
    public void setElement_u_initial(int index1, short value) {
        setSIntBEElement(offsetBits_u_initial(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'u_initial'
     */
    public static int totalSize_u_initial() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'u_initial'
     */
    public static int totalSizeBits_u_initial() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'u_initial'
     */
    public static int elementSize_u_initial() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'u_initial'
     */
    public static int elementSizeBits_u_initial() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'u_initial'
     */
    public static int numDimensions_u_initial() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'u_initial'
     */
    public static int numElements_u_initial() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'u_initial'
     * for the given dimension.
     */
    public static int numElements_u_initial(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: time
    //   Field type: long
    //   Offset (bits): 112
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'time' is signed (true).
     */
    public static boolean isSigned_time() {
        return true;
    }

    /**
     * Return whether the field 'time' is an array (false).
     */
    public static boolean isArray_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'time'
     */
    public static int offset_time() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'time'
     */
    public static int offsetBits_time() {
        return 112;
    }

    /**
     * Return the value (as a long) of the field 'time'
     */
    public long get_time() {
        return (long)getUIntBEElement(offsetBits_time(), 32);
    }

    /**
     * Set the value of the field 'time'
     */
    public void set_time(long value) {
        setUIntBEElement(offsetBits_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'time'
     */
    public static int size_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'time'
     */
    public static int sizeBits_time() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: integral
    //   Field type: float[]
    //   Offset (bits): 144
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'integral' is signed (true).
     */
    public static boolean isSigned_integral() {
        return true;
    }

    /**
     * Return whether the field 'integral' is an array (true).
     */
    public static boolean isArray_integral() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'integral'
     */
    public static int offset_integral(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'integral'
     */
    public static int offsetBits_integral(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'integral' as a float[]
     */
    public float[] get_integral() {
        float[] tmp = new float[1];
        for (int index0 = 0; index0 < numElements_integral(0); index0++) {
            tmp[index0] = getElement_integral(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'integral' from the given float[]
     */
    public void set_integral(float[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_integral(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a float) of the array 'integral'
     */
    public float getElement_integral(int index1) {
        return (float)getFloatElement(offsetBits_integral(index1), 32);
    }

    /**
     * Set an element of the array 'integral'
     */
    public void setElement_integral(int index1, float value) {
        setFloatElement(offsetBits_integral(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'integral'
     */
    public static int totalSize_integral() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'integral'
     */
    public static int totalSizeBits_integral() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'integral'
     */
    public static int elementSize_integral() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'integral'
     */
    public static int elementSizeBits_integral() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'integral'
     */
    public static int numDimensions_integral() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'integral'
     */
    public static int numElements_integral() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'integral'
     * for the given dimension.
     */
    public static int numElements_integral(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: integral_initial
    //   Field type: float[]
    //   Offset (bits): 176
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'integral_initial' is signed (true).
     */
    public static boolean isSigned_integral_initial() {
        return true;
    }

    /**
     * Return whether the field 'integral_initial' is an array (true).
     */
    public static boolean isArray_integral_initial() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'integral_initial'
     */
    public static int offset_integral_initial(int index1) {
        int offset = 176;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'integral_initial'
     */
    public static int offsetBits_integral_initial(int index1) {
        int offset = 176;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'integral_initial' as a float[]
     */
    public float[] get_integral_initial() {
        float[] tmp = new float[1];
        for (int index0 = 0; index0 < numElements_integral_initial(0); index0++) {
            tmp[index0] = getElement_integral_initial(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'integral_initial' from the given float[]
     */
    public void set_integral_initial(float[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_integral_initial(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a float) of the array 'integral_initial'
     */
    public float getElement_integral_initial(int index1) {
        return (float)getFloatElement(offsetBits_integral_initial(index1), 32);
    }

    /**
     * Set an element of the array 'integral_initial'
     */
    public void setElement_integral_initial(int index1, float value) {
        setFloatElement(offsetBits_integral_initial(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'integral_initial'
     */
    public static int totalSize_integral_initial() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'integral_initial'
     */
    public static int totalSizeBits_integral_initial() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'integral_initial'
     */
    public static int elementSize_integral_initial() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'integral_initial'
     */
    public static int elementSizeBits_integral_initial() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'integral_initial'
     */
    public static int numDimensions_integral_initial() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'integral_initial'
     */
    public static int numElements_integral_initial() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'integral_initial'
     * for the given dimension.
     */
    public static int numElements_integral_initial(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ref
    //   Field type: float
    //   Offset (bits): 208
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ref' is signed (true).
     */
    public static boolean isSigned_ref() {
        return true;
    }

    /**
     * Return whether the field 'ref' is an array (false).
     */
    public static boolean isArray_ref() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ref'
     */
    public static int offset_ref() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ref'
     */
    public static int offsetBits_ref() {
        return 208;
    }

    /**
     * Return the value (as a float) of the field 'ref'
     */
    public float get_ref() {
        return (float)getFloatElement(offsetBits_ref(), 32);
    }

    /**
     * Set the value of the field 'ref'
     */
    public void set_ref(float value) {
        setFloatElement(offsetBits_ref(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'ref'
     */
    public static int size_ref() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ref'
     */
    public static int sizeBits_ref() {
        return 32;
    }

}
