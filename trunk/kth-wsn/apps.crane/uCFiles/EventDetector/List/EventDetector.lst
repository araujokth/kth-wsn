
AVRASM ver. 2.1.30  C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm Fri Apr 29 00:44:46 2011

C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1158): warning: Register r3 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1159): warning: Register r4 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1160): warning: Register r2 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1161): warning: Register r7 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1162): warning: Register r6 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1163): warning: Register r9 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1164): warning: Register r8 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1165): warning: Register r10 already defined by the .DEF directive
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1166): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Standard
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATxmega128A1
                 ;Program type             : Application
                 ;Clock frequency          : 32,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATxmega128A1
                 	#pragma AVRPART MEMORY PROG_FLASH 135168
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 16383
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x2000
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU CCP=0x34
                 	.EQU RAMPD=0x38
                 	.EQU RAMPX=0x39
                 	.EQU RAMPY=0x3A
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU WDT_CTRL=0x80
                 	.EQU PMIC_CTRL=0xA2
                 	.EQU NVM_ADDR0=0X01C0
                 	.EQU NVM_ADDR1=NVM_ADDR0+1
                 	.EQU NVM_ADDR2=NVM_ADDR1+1
                 	.EQU NVM_DATA0=NVM_ADDR0+4
                 	.EQU NVM_CMD=NVM_ADDR0+0xA
                 	.EQU NVM_CTRLA=NVM_ADDR0+0xB
                 	.EQU NVM_CTRLB=NVM_ADDR0+0xC
                 	.EQU NVM_STATUS=NVM_ADDR0+0xF
                 	.EQU PORTCFG_MPCMASK=0xB0
                 	.EQU PORTH_DIR=0x6E0
                 	.EQU PORTH_OUT=0x6E4
                 	.EQU PORTH_PIN0CTRL=0x6F0
                 	.EQU PORTJ_DIR=0x700
                 	.EQU PORTJ_OUT=0x704
                 	.EQU PORTJ_PIN0CTRL=0x710
                 	.EQU PORTK_DIR=0x720
                 	.EQU PORTK_OUT=0x724
                 	.EQU PORTK_PIN0CTRL=0x730
                 	.EQU EBI_CTRL=0x0440
                 	.EQU EBI_SDRAMCTRLA=EBI_CTRL+1
                 	.EQU EBI_REFRESHL=EBI_CTRL+4
                 	.EQU EBI_REFRESHH=EBI_CTRL+5
                 	.EQU EBI_INITDLYL=EBI_CTRL+6
                 	.EQU EBI_INITDLYH=EBI_CTRL+7
                 	.EQU EBI_SDRAMCTRLB=EBI_CTRL+8
                 	.EQU EBI_SDRAMCTRLC=EBI_CTRL+9
                 	.EQU EBI_CS0_CTRLA=EBI_CTRL+0x10
                 	.EQU EBI_CS0_CTRLB=EBI_CS0_CTRLA+1
                 	.EQU EBI_CS0_BASEADDRL=EBI_CS0_CTRLA+2
                 	.EQU EBI_CS0_BASEADDRH=EBI_CS0_CTRLA+3
                 	.EQU EBI_CS1_CTRLA=EBI_CTRL+0x14
                 	.EQU EBI_CS1_CTRLB=EBI_CS1_CTRLA+1
                 	.EQU EBI_CS1_BASEADDRL=EBI_CS1_CTRLA+2
                 	.EQU EBI_CS1_BASEADDRH=EBI_CS1_CTRLA+3
                 	.EQU EBI_CS2_CTRLA=EBI_CTRL+0x18
                 	.EQU EBI_CS2_CTRLB=EBI_CS2_CTRLA+1
                 	.EQU EBI_CS2_BASEADDRL=EBI_CS2_CTRLA+2
                 	.EQU EBI_CS2_BASEADDRH=EBI_CS2_CTRLA+3
                 	.EQU EBI_CS3_CTRLA=EBI_CTRL+0x1C
                 	.EQU EBI_CS3_CTRLB=EBI_CS3_CTRLA+1
                 	.EQU EBI_CS3_BASEADDRL=EBI_CS3_CTRLA+2
                 	.EQU EBI_CS3_BASEADDRH=EBI_CS3_CTRLA+3
                 	.EQU EBI_SDCAS_bp=3
                 	.EQU EBI_SDCAS_bm=8
                 	.EQU EBI_SDROW_bp=2
                 	.EQU EBI_SDROW_bm=4
                 	.EQU EBI_SDCOL_bp=0
                 	.EQU EBI_MRDLY_bp=6
                 	.EQU EBI_ROWCYCDLY_bp=3
                 	.EQU EBI_RPDLY_bp=0
                 	.EQU EBI_WRDLY_bp=6
                 	.EQU EBI_ESRDLY_bp=3
                 	.EQU EBI_ROWCOLDLY_bp=0
                 	.EQU EBI_CS_SDSREN_bm=4
                 	.EQU EBI_CS_ASPACE_256B_gc=0x00<<2
                 	.EQU EBI_CS_ASPACE_512B_gc=0x01<<2
                 	.EQU EBI_CS_ASPACE_1KB_gc=0x02<<2
                 	.EQU EBI_CS_ASPACE_2KB_gc=0x03<<2
                 	.EQU EBI_CS_ASPACE_4KB_gc=0x04<<2
                 	.EQU EBI_CS_ASPACE_8KB_gc=0x05<<2
                 	.EQU EBI_CS_ASPACE_16KB_gc=0x06<<2
                 	.EQU EBI_CS_ASPACE_32KB_gc=0x07<<2
                 	.EQU EBI_CS_ASPACE_64KB_gc=0x08<<2
                 	.EQU EBI_CS_ASPACE_128KB_gc=0x09<<2
                 	.EQU EBI_CS_ASPACE_256KB_gc=0x0A<<2
                 	.EQU EBI_CS_ASPACE_512KB_gc=0x0B<<2
                 	.EQU EBI_CS_ASPACE_1MB_gc=0x0C<<2
                 	.EQU EBI_CS_ASPACE_2MB_gc=0x0D<<2
                 	.EQU EBI_CS_ASPACE_4MB_gc=0x0E<<2
                 	.EQU EBI_CS_ASPACE_8MB_gc=0x0F<<2
                 	.EQU EBI_CS_ASPACE_16M_gc=0x10<<2
                 	.EQU EBI_CS_MODE_DISABLED_gc=0x00
                 	.EQU EBI_CS_MODE_SRAM_gc=0x01
                 	.EQU EBI_CS_MODE_LPC_gc=0x02
                 	.EQU EBI_CS_MODE_SDRAM_gc=0x03
                 	.EQU EBI_SDDATAW_4BIT_gc=0x00<<6
                 	.EQU EBI_SDDATAW_8BIT_gc=0x01<<6
                 	.EQU EBI_LPCMODE_ALE1_gc=0x00<<4
                 	.EQU EBI_LPCMODE_ALE12_gc=0x02<<4
                 	.EQU EBI_SRMODE_ALE1_gc=0x00<<2
                 	.EQU EBI_SRMODE_ALE2_gc=0x01<<2
                 	.EQU EBI_SRMODE_ALE12_gc=0x02<<2
                 	.EQU EBI_SRMODE_NOALE_gc=0x03<<2
                 	.EQU EBI_IFMODE_DISABLED_gc=0x00
                 	.EQU EBI_IFMODE_3PORT_gc=0x01
                 	.EQU EBI_IFMODE_4PORT_gc=0x02
                 	.EQU EBI_IFMODE_2PORT_gc=0x03
                 	.EQU EBI_SDCOL_8BIT_gc=0x00
                 	.EQU EBI_SDCOL_9BIT_gc=0x01
                 	.EQU EBI_SDCOL_10BIT_gc=0x02
                 	.EQU EBI_SDCOL_11BIT_gc=0x03
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIO0=0x00
                 	.EQU GPIO1=0x01
                 	.EQU GPIO2=0x02
                 	.EQU GPIO3=0x03
                 	.EQU GPIO4=0x04
                 	.EQU GPIO5=0x05
                 	.EQU GPIO6=0x06
                 	.EQU GPIO7=0x07
                 	.EQU GPIO8=0x08
                 	.EQU GPIO9=0x09
                 	.EQU GPIO10=0x0A
                 	.EQU GPIO11=0x0B
                 	.EQU GPIO12=0x0C
                 	.EQU GPIO13=0x0D
                 	.EQU GPIO14=0x0E
                 	.EQU GPIO15=0x0F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x2000
                 	.EQU __SRAM_END=0x3FFF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dir=R3
                 	.DEF _NumOfRev=R4
                 	.DEF _Counter_OverFlows=R2
                 	.DEF _LED=R7
                 	.DEF _CountMode=R6
                 	.DEF _counter_state1=R9
                 	.DEF _counter_state2=R8
                 	.DEF _q_test_sig_Port=R10
                 	.DEF _test_lineCount=R13
                 
                 ;GPIO0-GPIO15 INITIALIZATION VALUES
                 	.EQU __GPIO0_INIT=0x7D
                 	.EQU __GPIO1_INIT=0x01
                 	.EQU __GPIO2_INIT=0x00
                 	.EQU __GPIO3_INIT=0x00
                 	.EQU __GPIO4_INIT=0x00
                 	.EQU __GPIO5_INIT=0x00
                 	.EQU __GPIO6_INIT=0x00
                 	.EQU __GPIO7_INIT=0x00
                 	.EQU __GPIO8_INIT=0x00
                 	.EQU __GPIO9_INIT=0x00
                 	.EQU __GPIO10_INIT=0x00
                 	.EQU __GPIO11_INIT=0x00
                 	.EQU __GPIO12_INIT=0x00
                 	.EQU __GPIO13_INIT=0x00
                 	.EQU __GPIO14_INIT=0x00
                 	.EQU __GPIO15_INIT=0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION VALUES
                 	.EQU __R2_INIT=0x00
                 	.EQU __R3_INIT=0x00
                 	.EQU __R4_INIT=0x00
                 	.EQU __R5_INIT=0x00
                 	.EQU __R6_INIT=0x01
                 	.EQU __R7_INIT=0x00
                 	.EQU __R8_INIT=0x00
                 	.EQU __R9_INIT=0x00
                 	.EQU __R10_INIT=0x00
                 	.EQU __R11_INIT=0x00
                 	.EQU __R12_INIT=0x00
                 	.EQU __R13_INIT=0x00
                 	.EQU __R14_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 012f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0f15 	JMP  _handler_TCC0_ERR_vect
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0ed7 	JMP  _handler_TCE0_CCA_vect
000064 940c 0f01 	JMP  _handler_TCE0_CCB_vect
000066 940c 0f08 	JMP  _handler_TCE0_CCC_vect
000068 940c 0f0f 	JMP  _handler_TCE0_CCD_vect
00006a 940c 0000 	JMP  0x00
00006c 940c 0000 	JMP  0x00
00006e 940c 0000 	JMP  0x00
000070 940c 0000 	JMP  0x00
000072 940c 0000 	JMP  0x00
000074 940c 0000 	JMP  0x00
000076 940c 0000 	JMP  0x00
000078 940c 0000 	JMP  0x00
00007a 940c 0000 	JMP  0x00
00007c 940c 0000 	JMP  0x00
00007e 940c 0000 	JMP  0x00
000080 940c 0000 	JMP  0x00
000082 940c 0000 	JMP  0x00
000084 940c 0000 	JMP  0x00
000086 940c 0000 	JMP  0x00
000088 940c 0000 	JMP  0x00
00008a 940c 0000 	JMP  0x00
00008c 940c 0000 	JMP  0x00
00008e 940c 0000 	JMP  0x00
000090 940c 0000 	JMP  0x00
000092 940c 0000 	JMP  0x00
000094 940c 0000 	JMP  0x00
000096 940c 0000 	JMP  0x00
000098 940c 0000 	JMP  0x00
00009a 940c 021f 	JMP  _tcd0_overflow_isr
00009c 940c 0000 	JMP  0x00
00009e 940c 0000 	JMP  0x00
0000a0 940c 0000 	JMP  0x00
0000a2 940c 0000 	JMP  0x00
0000a4 940c 0000 	JMP  0x00
0000a6 940c 0000 	JMP  0x00
0000a8 940c 0000 	JMP  0x00
0000aa 940c 0000 	JMP  0x00
0000ac 940c 0000 	JMP  0x00
0000ae 940c 0000 	JMP  0x00
0000b0 940c 0000 	JMP  0x00
0000b2 940c 0000 	JMP  0x00
0000b4 940c 0000 	JMP  0x00
0000b6 940c 0000 	JMP  0x00
0000b8 940c 0000 	JMP  0x00
0000ba 940c 0000 	JMP  0x00
0000bc 940c 0000 	JMP  0x00
0000be 940c 0000 	JMP  0x00
0000c0 940c 0000 	JMP  0x00
0000c2 940c 0000 	JMP  0x00
0000c4 940c 0000 	JMP  0x00
0000c6 940c 0000 	JMP  0x00
0000c8 940c 0a93 	JMP  _portk_int0_isr
0000ca 940c 0000 	JMP  0x00
0000cc 940c 0000 	JMP  0x00
0000ce 940c 0000 	JMP  0x00
0000d0 940c 0000 	JMP  0x00
0000d2 940c 0000 	JMP  0x00
0000d4 940c 0000 	JMP  0x00
0000d6 940c 0000 	JMP  0x00
0000d8 940c 0000 	JMP  0x00
0000da 940c 0000 	JMP  0x00
0000dc 940c 0000 	JMP  0x00
0000de 940c 0000 	JMP  0x00
0000e0 940c 0000 	JMP  0x00
0000e2 940c 0000 	JMP  0x00
0000e4 940c 0000 	JMP  0x00
0000e6 940c 0000 	JMP  0x00
0000e8 940c 0000 	JMP  0x00
0000ea 940c 0000 	JMP  0x00
0000ec 940c 0000 	JMP  0x00
0000ee 940c 0000 	JMP  0x00
0000f0 940c 0000 	JMP  0x00
0000f2 940c 0000 	JMP  0x00
0000f4 940c 0000 	JMP  0x00
0000f6 940c 0000 	JMP  0x00
0000f8 940c 0000 	JMP  0x00
                 
                 _0x3:
0000fa d70a
0000fb 3c23      	.DB  0xA,0xD7,0x23,0x3C
                 _0x4:
0000fc 0000
0000fd 3f80      	.DB  0x0,0x0,0x80,0x3F
                 _0x5:
0000fe 126f
0000ff 3a83      	.DB  0x6F,0x12,0x83,0x3A
                 _0x6:
000100 0000
000101 3f80      	.DB  0x0,0x0,0x80,0x3F
                 _0x7:
000102 126f
000103 3a83      	.DB  0x6F,0x12,0x83,0x3A
                 _0x8:
000104 0000
000105 3e80      	.DB  0x0,0x0,0x80,0x3E
                 _0x9:
000106 0fdb
000107 3fc9      	.DB  0xDB,0xF,0xC9,0x3F
                 _0x2000060:
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1349): warning: .cseg .db misalignment - padding zero byte
000108 0001      	.DB  0x1
                 _0x2000000:
000109 4e2d
00010a 4e41
00010b 4900
00010c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1352): warning: .cseg .db misalignment - padding zero byte
00010d 0000      	.DB  0x0
                 _0x202000B:
00010e 0000
00010f 0000
000110 0000
000111 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000112 0000      	.DB  0x0,0x0
                 _0x20A0000:
000113 4e2d
000114 4e41
C:\JobStuff\AutomaticControlLab\AVR_Projects\EventDetector\List\EventDetector.asm(1357): warning: .cseg .db misalignment - padding zero byte
000115 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
000116 0004      	.DW  0x04
000117 2420      	.DW  _h
000118 01f4      	.DW  _0x3*2
                 
000119 0004      	.DW  0x04
00011a 24c8      	.DW  _w_3
00011b 01f8      	.DW  _0x4*2
                 
00011c 0004      	.DW  0x04
00011d 24cc      	.DW  _w_4
00011e 01fc      	.DW  _0x5*2
                 
00011f 0004      	.DW  0x04
000120 24d0      	.DW  _w_8
000121 0200      	.DW  _0x6*2
                 
000122 0004      	.DW  0x04
000123 24d4      	.DW  _w_9
000124 0204      	.DW  _0x7*2
                 
000125 0004      	.DW  0x04
000126 24e0      	.DW  _home_x
000127 0208      	.DW  _0x8*2
                 
000128 0004      	.DW  0x04
000129 24e4      	.DW  _home_theta
00012a 020c      	.DW  _0x9*2
                 
00012b 0001      	.DW  0x01
00012c 2510      	.DW  __seed_G100
00012d 0210      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00012e 0000      	.DW  0
                 
                 __RESET:
00012f 94f8      	CLI
000130 27ee      	CLR  R30
000131 bfe8      	OUT  RAMPD,R30
000132 bfe9      	OUT  RAMPX,R30
000133 bfea      	OUT  RAMPY,R30
                 
                 ;MEMORY MAPPED EEPROM ACCESS IS USED
000134 91f0 01cc 	LDS  R31,NVM_CTRLB
000136 60f8      	ORI  R31,0x08
000137 93f0 01cc 	STS  NVM_CTRLB,R31
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000139 edf8      	LDI  R31,0xD8
00013a bff4      	OUT  CCP,R31
00013b 93e0 00a2 	STS  PMIC_CTRL,R30
                 
                 ;NO EXTERNAL RAM IS USED
00013d 93e0 0440 	STS  EBI_CTRL,R30
                 
                 ;DISABLE WATCHDOG
00013f 91a0 0080 	LDS  R26,WDT_CTRL
000141 7fad      	CBR  R26,2
000142 60a1      	SBR  R26,1
000143 bff4      	OUT  CCP,R31
000144 93a0 0080 	STS  WDT_CTRL,R26
                 
                 ;CLEAR SRAM
000146 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000147 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000148 e0a0      	LDI  R26,LOW(__SRAM_START)
000149 e2b0      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00014a 93ed      	ST   X+,R30
00014b 9701      	SBIW R24,1
00014c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00014d e2ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00014e e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00014f 9185      	LPM  R24,Z+
000150 9195      	LPM  R25,Z+
000151 9700      	SBIW R24,0
000152 f061      	BREQ __GLOBAL_INI_END
000153 91a5      	LPM  R26,Z+
000154 91b5      	LPM  R27,Z+
000155 9005      	LPM  R0,Z+
000156 9015      	LPM  R1,Z+
000157 01bf      	MOVW R22,R30
000158 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000159 9005      	LPM  R0,Z+
00015a 920d      	ST   X+,R0
00015b 9701      	SBIW R24,1
00015c f7e1      	BRNE __GLOBAL_INI_LOOP
00015d 01fb      	MOVW R30,R22
00015e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00015f bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIO0-GPIO15 INITIALIZATION
000160 e7ed      	LDI  R30,__GPIO0_INIT
000161 b9e0      	OUT  GPIO0,R30
000162 e0e1      	LDI  R30,__GPIO1_INIT
000163 b9e1      	OUT  GPIO1,R30
000164 e0e0      	LDI  R30,__GPIO2_INIT
000165 b9e2      	OUT  GPIO2,R30
                 	;__GPIO3_INIT = __GPIO2_INIT
000166 b9e3      	OUT  GPIO3,R30
                 	;__GPIO4_INIT = __GPIO2_INIT
000167 b9e4      	OUT  GPIO4,R30
                 	;__GPIO5_INIT = __GPIO2_INIT
000168 b9e5      	OUT  GPIO5,R30
                 	;__GPIO6_INIT = __GPIO2_INIT
000169 b9e6      	OUT  GPIO6,R30
                 	;__GPIO7_INIT = __GPIO2_INIT
00016a b9e7      	OUT  GPIO7,R30
                 	;__GPIO8_INIT = __GPIO2_INIT
00016b b9e8      	OUT  GPIO8,R30
                 	;__GPIO9_INIT = __GPIO2_INIT
00016c b9e9      	OUT  GPIO9,R30
                 	;__GPIO10_INIT = __GPIO2_INIT
00016d b9ea      	OUT  GPIO10,R30
                 	;__GPIO11_INIT = __GPIO2_INIT
00016e b9eb      	OUT  GPIO11,R30
                 	;__GPIO12_INIT = __GPIO2_INIT
00016f b9ec      	OUT  GPIO12,R30
                 	;__GPIO13_INIT = __GPIO2_INIT
000170 b9ed      	OUT  GPIO13,R30
                 	;__GPIO14_INIT = __GPIO2_INIT
000171 b9ee      	OUT  GPIO14,R30
                 	;__GPIO15_INIT = __GPIO2_INIT
000172 b9ef      	OUT  GPIO15,R30
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
000173 e0e1      	LDI  R30,__R6_INIT
000174 2e6e      	MOV  R6,R30
000175 e0e0      	LDI  R30,__R10_INIT
000176 2eae      	MOV  R10,R30
                 	;__R11_INIT = __R10_INIT
000177 2ebe      	MOV  R11,R30
                 	;__R13_INIT = __R10_INIT
000178 2ede      	MOV  R13,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000179 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00017a bfed      	OUT  SPL,R30
00017b e3ef      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00017c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00017d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00017e e2d4      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00017f 940c 0bad 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x2400
                 
                 	.CSEG
                 ;/* This file has been prepared for Doxygen automatic documentation generation. */
                 ;/*! \file *********************************************************************
                 ; *
                 ; * \brief  Event Detector Project. This application program would read various kind of system's output. It can be
                 ; * interfaced with at maximum 5 quadrature encoders, 5 analog signals from CT process sensors. It would also estimate
                 ; * the full state of the system using available outputs. We would use first order low pass filters to estimate the speed
                 ; * variables from output position states. In case of high noise we would use EKF filtering to estimate the speed variables.
                 ; * The quadrature decoding would be done using dedicaded external HCTL2032 IC and also using built-in quadrature decoder of
                 ; * ATxmega128A1. The program would sample the process @ 1 kHz and would compute the full state and then evaluate the event-generation
                 ; * rule and then would generate the event/interrupt to trigger the communication of state vector to wireless mote on SPI channel and mote
                 ; * would transmit it on the network.
                 ; * This applicstion consists of four main modules. Module # 1: Sensor Interface Module, Module # 2: State Estimation Module,
                 ; * Module # 3: Event Generation Module  Module #4: Controller
                 ; * We have used one timer to read sensors periodically @ 1kHz and then we would estimate speeds (full state vector) and test the event-generation
                 ; * rule. All four operations would be done inside timer TCDO overflow ISR. In case of event we would trigger the serial communication from inside the timer
                 ; * overflow interrupt. When the mote would receive the serial data, it would immediately transmit it to the network!
                 ; *
                 ; * \par Application note:
                 ; *      See NetCon Wiki Page
                 ; *      HCTL2032 Datasheet
                 ; *      ATxmega128A1 Datasheet
                 ; *
                 ; * \par Documentation
                 ; *
                 ; * \author
                 ; *      Faisal Altaf: http://www.ee.kth.se
                 ; *      Reglerteknik
                 ; *      Support email: faltaf@kth.se
                 ; *
                 ; * $Revision: 0$
                 ; * $Date: 2010-12-7 13:36 +0100 (on, 7 December 2010) $
                 ; *
                 ; * Copyright (c) 2010, Reglerteknik, KTH-Royal Institute of Technology. All rights reserved.
                 ; *
                 ; * Redistribution and use in source and binary forms, with or without
                 ; * modification, are permitted provided that the following conditions are met:
                 ; *
                 ; * 1. Redistributions of source code must retain the above copyright notice,
                 ; * this list of conditions and the following disclaimer.
                 ; *
                 ; * 2. Redistributions in binary form must reproduce the above copyright notice,
                 ; * this list of conditions and the following disclaimer in the documentation
                 ; * and/or other materials provided with the distribution.
                 ; *
                 ; * 3. The name of KTH may not be used to endorse or promote products derived
                 ; * from this software without specific prior written permission.
                 ;
                 ; *****************************************************************************/
                 ;
                 ;
                 ;/* we are using the one provided by codevisionavr instead of that provided by atmel.
                 ;copied from \inc directory to project directory but modified it to include F_CPU macro
                 ;which we copied from atmel's avr_compiler.h*/
                 ;#include "avr_compiler.h"
                 ;
                 ;
                 ;/* either copy the hctl_driver.lib, qdec_driver.lib and qdec_signal_generator.lib files from the  main project directory and put in .\lib directory
                 ;inside cavr2 directory or add the alternate paths to additional directories in the Project|Configure|C Compiler|Paths|Library paths menu*. The header files
                 ;hctl_driver.h, qdec_driver.h and qdec_signal_generator.h are present in main project directory.*/
                 ;
                 ;#include "hctl2032_driver.h"
                 ;#include "qdec_driver.h"
                 ;#include "qdec_signal_generator.h"
                 ;#include "delay.h"
                 ;#include "math.h"
                 ;
                 ;/*#define _ATXMEGA_DEVICE_*/
                 ;/* use the ATxmega128A1 USARTF0 for getchar and putchar functions. The following is required
                 ;because by default putchar send data on USARTC0 */
                 ;#define _ATXMEGA_USART_ USARTF0
                 ;#include "stdio.h"
                 ;
                 ;
                 ;/* To select between 2 MHz and 32 MHz clock source*/
                 ;#define SYSTEM_CLOCK_32MHZ
                 ;/*To select between 19200 and 115200bps baud rate*/
                 ;#define SYSTEM_CLOCK_32MHZ_115200
                 ;
                 ;/* To select between Periodic TTC and ETC*/
                 ;#define CONTROLLER_ETC
                 ;
                 ;/* To select between two settings of controller. One settings is good in terms of nicer inter-event times
                 ;and other settings are good for more robust control performance but inter-event times may not be that nice */
                 ;// Comment (using /* */) the following for controller settings for nicer control performance
                 ;/*#define NICE_INTER_EVENT_TIMES*/
                 ;
                 ;
                 ;
                 ;
                 ;/**************** GLOBAL VARIABLES ****************
                 ;***************************************************
                 ;***************************************************/
                 ;
                 ;/*! \brief Direction of the output signal*/
                 ;bool    dir  = 0; // 0 = CW or count-up (Count-up would start from BOT (0x0000) value)=, 1 = CCW or count down (Count down would start from TOP value (4*lineCount - 1))
                 ;
                 ;/*! \brief Declare your global variables here */
                 ;unsigned int NumOfRev = 0;
                 ;unsigned char Counter_OverFlows=0;
                 ;unsigned char LED = 0xFF;
                 ;bit LED_Flag=1;
                 ;unsigned char CountMode = 1;  // Count mode for HCTL2032 Quad Decoder
                 ;unsigned char counter_state1 = 0x00; // Counter state i.e. is it normal, overflow or underflow
                 ;unsigned char counter_state2 = 0x00;
                 ;
                 ;signed long int Pos_Count_HCTL_1 = 0x00000000;
                 ;signed long int Pos_Count_HCTL_2 = 0x00000000;
                 ;signed long int Pos_Count_HCTL_3 = 0x00000000;
                 ;signed long int Pos_Count_HCTL_4 = 0x00000000;
                 ;
                 ;unsigned long int Temp_Pos_Count_HCTL_1 = 0x00000000;
                 ;unsigned long int Temp_Pos_Count_HCTL_2 = 0x00000000;
                 ;unsigned long int Temp_Pos_Count_HCTL_3 = 0x00000000;
                 ;unsigned long int Temp_Pos_Count_HCTL_4 = 0x00000000;
                 ;
                 ;/***** Estimation Variables and Constants *****/
                 ;float h = 0.01; // 10 ms sampling Time for ETC
                 
                 	.DSEG
                 ;const float Td = 0.03; // Derivative Prediction Horizon
                 ;const float Ti = 0.1; // Integration Time
                 ;const float Tt1 = 0.05; // Tracking Time for Trolley
                 ;const float Tt2 = 0.05; // Tracking Time for Arm
                 ;const char N = 10; // Low Pass PF Parameter for Derivative Action
                 ;const char N1 = 5;//5; // Low Pass PF Parameter for Derivative Action for Payload
                 ;//const float PI = 3.1416;
                 ;float ad = 0;
                 ;float bd = 0;
                 ;float ad1 = 0;
                 ;float bd1 = 0;
                 ;float bi1 = 0;
                 ;float bi2 = 0;
                 ;float a01 = 0;
                 ;float a02 = 0;
                 ;
                 ;/***** System Parameters *****/
                 ;const float r_x = 0.0379127; // Trolley Pully Radius
                 ;const unsigned int PPR1 = 4096; // Encoder Pulses Per Revolution for Encoder 1 (Payload X Angle)
                 ;const unsigned int PPR2 = 4096; // Encoder Pulses Per Revolution for Encoder 2 (Payload Y Angle)
                 ;const unsigned int PPR3 = 4096; // Encoder Pulses Per Revolution for Encoder 3 (Trolley Position)
                 ;const unsigned int PPR4 = 4000; // Encoder Pulses Per Revolution for Encoder 4 (Arm Position)
                 ;const unsigned int PPR5 = 4096; // Encoder Pulses Per Revolution for Encoder 5 (Lift Line Length)
                 ;
                 ;
                 ;/***** System States initialization *****/
                 ;float x_1 = 0.0;
                 ;float x_2 = 0.0;
                 ;float x_3 = 0.0;
                 ;float x_4 = 0.0;
                 ;float x_a1 = 0.0;
                 ;float x_5 = 0.0;
                 ;float x_6 = 0.0;
                 ;float x_7 = 0.0;
                 ;float x_8 = 0.0;
                 ;float x_a2 = 0.0;
                 ;float x_1_old = 0.0; // x_1 at last time step
                 ;float x_2_old = 0.0; // x_2 at last time step
                 ;float x_3_old = 0.0; // x_3 at last time step
                 ;float x_4_old = 0.0; // x_4 at last time step
                 ;float x_5_old = 0.0; // x_5 at last time step
                 ;float x_6_old = 0.0; // x_6 at last time step
                 ;float x_7_old = 0.0; // x_7 at last time step
                 ;float x_8_old = 0.0; // x_8 at last time step
                 ;float x_a1_old = 0.0; // x_a1 at last time step
                 ;float x_a2_old = 0.0; // x_a2 at last time step
                 ;float Phi = 0.0; // \Phi(k-1)=\frac{1}{1+0.0138x_1(k-1)^2}
                 ;
                 ;
                 ;
                 ;/*** System States at Last Trigger ***/
                 ;
                 ;float x_1_tk = 0.0;
                 ;float x_2_tk = 0.0;
                 ;float x_3_tk = 0.0;
                 ;float x_4_tk = 0.0;
                 ;float x_a1_tk = 0.0;
                 ;float x_5_tk = 0.0;
                 ;float x_6_tk = 0.0;
                 ;float x_7_tk = 0.0;
                 ;float x_8_tk = 0.0;
                 ;float x_a2_tk = 0.0;
                 ;
                 ;/********** Event Generation Rule (EGR) Variables **********/
                 ;/** Measurement Error Norm**/
                 ;float norm_e = 0.0;
                 ;/** Shifted State **/
                 ;float norm_epsilon = 0.0;
                 ;
                 ;
                 ;/************************************************************
                 ;**************************************************************
                 ;**************************************************************
                 ;**************************************************************/
                 ;
                 ;/*************** EGR and CONTROLLER Parameters **************
                 ;*************************************************************
                 ;*************************************************************/
                 ;// Conditional compilation. It Depends on whether we want nicer inter-event times
                 ;// or more robust control performance. Comment macro 'NICE_INTER_EVENT_TIMES' (see above) to get robust
                 ;// control performance but then inter-event times will not be that nice
                 ;#ifdef NICE_INTER_EVENT_TIMES
                 ;// For Achieving Nice inter-event Timings (exponential behavior) use following parameters
                 ;// but then control performance will be compromised and payload oscillation may become big sometime
                 ;const float sigma = 0.01; //0.035;//0.007;//0.035;//0.075;//0.0075;//0.035;//0.007;//0.007;//0.004;//0.0004;//0.0000001;//0.00005;//0.0008;//0.035;//0.075;//0.035;//0.0175;//0.075;//0.0080;//0.075;
                 ;const float delta = 0.005; //0.005;//0.005;//0.005;//0.0001;//0.0;//0.005;//0.0001;//0.001;//0.01;//0.0005;//0.005;//0.001;//0.005; //0.01;
                 ;const float taumina = 0.04;
                 ;
                 ;/***** Weighting Matrix *****/
                 ;// Weights for Trolley States
                 ;const float w_1 = 1;        // Weight for x_1
                 ;const float w_2 = 1;        // Weight for x_2
                 ;
                 ;// Weights for Payload alpha angle
                 ;// Enable Following weights for Nicer inter-event times but control performance will be compromised
                 ;const float w_3_d = 0.1;//0.01;//0.0001;//0.1; //0.01;//0.0001; // we want to change w_3, w_4 , w_8 and w_9 during operation
                 ;float w_3 = w_3_d;  //0.0001;//0.00000001;//0.000001;//0.01;//0.00001;//0.1;//0.001;//0.01;//1;//0.0001;//0.01;//0.1;//0.001;//0.0001;//0.00001;//0.0001;//0.005;//0.5;//1;  // Weight for x_3
                 ;const float w_4_d = 1;//0.1;//0.01;//0.0001;//1; //0.01;//0.0001;
                 ;float w_4 = w_4_d;  //0.0001;//0.00000001;//0.01;//0.00001;//0.1;//0.001;//0.01;//1;//0.0001;//0.01;//0.1;//0.001;//0.0001;//0.00001;//0.0001;//0.005;//1;  // Weight for x_4
                 ;
                 ;// Weights for Integrator State x_a1
                 ;const float w_5 = 1;        // Weight for x_a1
                 ;
                 ;// Weights for Arm States
                 ;const float w_6 = 1;        // Weight for x_5
                 ;const float w_7 = 1;       // Weight for x_6
                 ;
                 ;// Weights for Payload Beta States
                 ;const float w_8_d = 0.02;//0.002;//0.00002;//0.02; //0.002;//0.00002;
                 ;float w_8 = w_8_d;  //0.00002;//0.00000001;//0.000001;//0.1;//0.001;//0.01;//1;//0.00002;//0.01;//0.1;//0.001;//0.00002;//0.000001;//0.00002;//0.0002;//0.02;//0.2;//1;  // Weight for x_7
                 ;const float w_9_d = 1;//0.02;//0.002;//0.00002;//1; //0.1//0.002;//0.00002;
                 ;float w_9 = w_9_d;  //0.00002;//0.00000001;//0.000001;//0.1;//0.001;//0.01;//1;//0.00002;//0.01;//0.1;//0.001;//0.00002;//0.000001;//0.00002;//0.0002;//0.5;//0.002;//0.02;//0.2;//1;  // Weight for x_8
                 ;
                 ;// Weights for Integrator State x_a2
                 ;const float w_10 = 1;      // Weight for x_a2
                 ;
                 ;
                 ;/****** Controller Parameters/Gains ******/
                 ;// For Nicer Inter-Event-Times
                 ;const float K11 = -5.7015; //Trolley Position Gain
                 ;const float K12 =  0.2;    //1.0;//0.1;//1.0;//4.3408; // Trollery Speed Gain ,,, it is too high and creating some problems especially when speed estimate is crude. May work well when using EKF but not with crude estimate!!
                 ;const float K13 = -2.5;    //-2.0;//-2.5;//-2.9673;// // X-Angle Position Gain
                 ;const float K14 = -0.1498; // X-Angle Speed Gain
                 ;const float K15 = 2.125;   //2.25;//2.0;//2.5317;//3.5;//2.5317; // Integral State (x_{a1}) Gain  , For real crane, 1.1
                 ;const float K21 = -2.7525; // Arm Position Gain
                 ;const float K22 = 0.1138;  // Arm Speed Gain
                 ;const float K23 = 2.5;     //2.0;//2.5;//3.0;//3.5477; // Y-Angle Position Gain
                 ;const float K24 = 0.1716;  // Y-Angle Speed Gain
                 ;const float K25 = 0.8;     //1.1358; // Integral State (x_{a2}) Gain
                 ;
                 ;#else
                 ;
                 ;// For Achieving Nice Control Performance use following parameters
                 ;// but then the inter-event times will not be that nice and would not exhibit exponential behavior
                 ;const float sigma = 0.008;//0.01;//0.001;//0.003;//0.007;//0.01; // Use for better control performance but it would give more events
                 ;const float delta = 0.05;//0.1;//0.01;//0.001;//0.0001;//0.000001;// 0.0;//0.000000001;//0.000001;//0.00001;//0.0001;//0.005;//0.005;//0.005;//0.005;//0.0001;//0.0;//0.005;//0.0001;//0.001;//0.01;//0.0005;//0.005;//0.001;//0.005; //0.01;
                 ;const float taumina = 0.04;
                 ;
                 ;/***** Weighting Matrix *****/
                 ;// Weights for Trolley States
                 ;const float w_1 = 1;//0.1;//0.01;//0.1;//1;        // Weight for x_1
                 ;const float w_2 = 1;//0.1;//1;        // Weight for x_2
                 ;
                 ;// Weights for Payload alpha angle
                 ;// Enable Following for Nicer Control Performance
                 ;const float w_3_d = 1.0;//0.1;//0.001;//0.01;//0.001;//1;//0.1;//0.001;//0.00001;//0.0001;//0.001; //0.0001; // Use for better control performance of payload alpha angle but it would give more events
                 ;float w_3 = w_3_d;  //0.0001;
                 ;const float w_4_d = 0.001;//0.01;//0.01;//0.001;//1;//0.1;//0.001; //0.0001; // Use for better control performance of payload alpha angle but it would give more events
                 ;float w_4 = w_4_d;  //0.0001;
                 ;
                 ;
                 ;// Weights for Integrator State x_a1
                 ;const float w_5 = 1;        // Weight for x_a1
                 ;
                 ;// Weights for Arm States
                 ;const float w_6 = 1;//0.1;//0.001;//0.01;//0.1;//1;        // Weight for x_5
                 ;const float w_7 = 1;//0.1;//1;        // Weight for x_6
                 ;
                 ;// Weights for Payload Beta States
                 ;const float w_8_d = 1.0;//0.1;//0.001;//0.01;//0.001;//0.01;//1;//0.1;//0.0002;//0.000001;//0.00001;//0.0002; //0.0000002; // Use for better control performance of payload beta angle but it would give more events
                 ;float w_8 = w_8_d;  //0.00002;
                 ;const float w_9_d = 0.001;//0.01;//0.01;//0.001;//1;//0.1;//0.0002; //0.00002; // Use for better control performance of payload beta angle but it would give more events
                 ;float w_9 = w_9_d; //0.00002;
                 ;
                 ;// Weights for Integrator State x_a2
                 ;const float w_10 = 1;      // Weight for x_a2
                 ;
                 ;
                 ;/****** Controller Parameters/Gains ******/
                 ;// For Robust Controller Performance
                 ;const float K11 = -5.7015; //Trolley Position Gain
                 ;const float K12 =  0.2;//0.1;//0.2;//1.0;//0.1;//1.0;//4.3408; // Trollery Speed Gain ,,, it is too high and creating some problems especially when speed estimate is crude. May work well when using EKF but not with crude estimate!!
                 ;const float K13 = -2.5;//-2.9673;// // X-Angle Position Gain
                 ;const float K14 = -0.1498; // X-Angle Speed Gain
                 ;const float K15 = 2.125;//2.5317;//3.5;//2.5317; // Integral State (x_{a1}) Gain  , For real crane, 1.1
                 ;const float K21 = -2.7525; // Arm Position Gain
                 ;const float K22 = 0.1138; // Arm Speed Gain
                 ;const float K23 = 2.5;//3.5477;//2.5;//3.0;//3.5477; // Y-Angle Position Gain
                 ;const float K24 = 0.1716; // Y-Angle Speed Gain
                 ;const float K25 = 0.8;//1.1358; // Integral State (x_{a2}) Gain
                 ;
                 ;#endif
                 ;
                 ;
                 ;/**** Reference Signals ****/
                 ;float r_1 = 0.0;//0.3;
                 ;float r_2 = 0.0;//PI;
                 ;/*** Homing after encoder reset ***/
                 ;float home_x = 0.25; // bring the trolley to this position initially
                 ;float home_theta = PI*0.5; // bring the Arm to this position initially
                 ;
                 ;/*** Control Signals ***/
                 ;// Control Signals after saturation
                 ;float u_1 = 0.0;
                 ;float u_2 = 0.0;
                 ;float u_1_old = 0.0; // Control Signal for trolley at previous step
                 ;float u_2_old = 0.0; // Control Signal for trolley at previous step
                 ;float u_11 = 0.0; // control signal without integrator
                 ;
                 ;
                 ;// Computed Control Signals (before saturation)
                 ;float v_1 = 0.0;
                 ;float v_2 = 0.0;
                 ;
                 ;// Start Flag
                 ;bit start_flag = 0;
                 ;
                 ;//Switch States
                 ;bit SW0_pressed = 1;
                 ;bit SW1_pressed = 1;
                 ;bit SW2_pressed = 1;
                 ;bit SW3_pressed = 1;
                 ;bit SW4_pressed = 1;
                 ;
                 ;// Decision Variable to Select Between Periodic and and ETC
                 ;bit Periodic_ON = 0; // Select ETC initially
                 ;
                 ;// Number of Times ERG is violated
                 ;unsigned long iterations = 0;
                 ;unsigned long iterations_old = 0;
                 ;bit first_transmission = 1;
                 ;
                 ;// Parameter For Reference Signal Generation
                 ;unsigned long count_ref = 0;
                 ;bit flag_ref = 0; // signal to integrator that new reference command is available
                 ;
                 ;
                 ;// System Clocks initialization for 2MHz Clock
                 ;void system_clocks_init(void)
                 ; 0000 015B {
                 
                 	.CSEG
                 ; 0000 015C unsigned char n,s;
                 ; 0000 015D 
                 ; 0000 015E // Optimize for speed
                 ; 0000 015F #pragma optsize-
                 ; 0000 0160 // Save interrupts enabled/disabled state
                 ; 0000 0161 s=SREG;
                 ;	n -> R17
                 ;	s -> R16
                 ; 0000 0162 // Disable interrupts
                 ; 0000 0163 #asm("cli")
                 ; 0000 0164 
                 ; 0000 0165 // Internal 2 MHz RC oscillator initialization
                 ; 0000 0166 // Enable the internal 2 MHz RC oscillator
                 ; 0000 0167 OSC.CTRL|=OSC_RC2MEN_bm;
                 ; 0000 0168 
                 ; 0000 0169 // System Clock prescaler A division factor: 1
                 ; 0000 016A // System Clock prescalers B & C division factors: B:1, C:1
                 ; 0000 016B // ClkPer4: 32000,000 kHz
                 ; 0000 016C // ClkPer2: 32000,000 kHz
                 ; 0000 016D // ClkPer:  32000,000 kHz
                 ; 0000 016E // ClkCPU:  32000,000 kHz
                 ; 0000 016F n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
                 ; 0000 0170     CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
                 ; 0000 0171 CCP=CCP_IOREG_gc;
                 ; 0000 0172 CLK.PSCTRL=n;
                 ; 0000 0173 
                 ; 0000 0174 // Disable the autocalibration of the internal 2 MHz RC oscillator
                 ; 0000 0175 DFLLRC2M.CTRL&= ~DFLL_ENABLE_bm;
                 ; 0000 0176 
                 ; 0000 0177 // Wait for the internal 2 MHz RC oscillator to stabilize
                 ; 0000 0178 while ((OSC.STATUS & OSC_RC2MRDY_bm)==0);
                 ; 0000 0179 
                 ; 0000 017A // Select the system clock source: 2 MHz Internal RC Osc.
                 ; 0000 017B n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC2M_gc;
                 ; 0000 017C CCP=CCP_IOREG_gc;
                 ; 0000 017D CLK.CTRL=n;
                 ; 0000 017E 
                 ; 0000 017F 
                 ; 0000 0180 // Disable the unused oscillators: 32 MHz, 32 kHz, external clock/crystal oscillator, PLL
                 ; 0000 0181 OSC.CTRL&= ~(OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
                 ; 0000 0182 
                 ; 0000 0183 // Peripheral Clock output: Disabled
                 ; 0000 0184 PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
                 ; 0000 0185 
                 ; 0000 0186 // Restore interrupts enabled/disabled state
                 ; 0000 0187 SREG=s;
                 ; 0000 0188 // Restore optimization for size if needed
                 ; 0000 0189 #pragma optsize_default
                 ; 0000 018A }
                 ;
                 ;// System Clocks initialization for 32MHz clock
                 ;void system_clocks_init_32mhz(void)
                 ; 0000 018E {
                 _system_clocks_init_32mhz:
                 ; 0000 018F unsigned char n,s;
                 ; 0000 0190 
                 ; 0000 0191 // Optimize for speed
                 ; 0000 0192 #pragma optsize-
                 ; 0000 0193 // Save interrupts enabled/disabled state
                 ; 0000 0194 s=SREG;
000181 931a      	ST   -Y,R17
000182 930a      	ST   -Y,R16
                 ;	n -> R17
                 ;	s -> R16
000183 b70f      	IN   R16,63
                 ; 0000 0195 // Disable interrupts
                 ; 0000 0196 #asm("cli")
000184 94f8      	cli
                 ; 0000 0197 
                 ; 0000 0198 // Internal 32 kHz RC oscillator initialization
                 ; 0000 0199 // Enable the internal 32 kHz RC oscillator
                 ; 0000 019A OSC.CTRL|=OSC_RC32KEN_bm;
000185 91e0 0050 	LDS  R30,80
000187 60e4      	ORI  R30,4
000188 93e0 0050 	STS  80,R30
                 ; 0000 019B // Wait for the internal 32 kHz RC oscillator to stabilize
                 ; 0000 019C while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
                 _0xD:
00018a 91e0 0051 	LDS  R30,81
00018c 70e4      	ANDI R30,LOW(0x4)
00018d f3e1      	BREQ _0xD
                 ; 0000 019D 
                 ; 0000 019E // Internal 32 MHz RC oscillator initialization
                 ; 0000 019F // Enable the internal 32 MHz RC oscillator
                 ; 0000 01A0 OSC.CTRL|=OSC_RC32MEN_bm;
00018e 91e0 0050 	LDS  R30,80
000190 60e2      	ORI  R30,2
000191 93e0 0050 	STS  80,R30
                 ; 0000 01A1 
                 ; 0000 01A2 // System Clock prescaler A division factor: 1
                 ; 0000 01A3 // System Clock prescalers B & C division factors: B:1, C:1
                 ; 0000 01A4 // ClkPer4: 32000.000 kHz
                 ; 0000 01A5 // ClkPer2: 32000.000 kHz
                 ; 0000 01A6 // ClkPer:  32000.000 kHz
                 ; 0000 01A7 // ClkCPU:  32000.000 kHz
                 ; 0000 01A8 n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
                 ; 0000 01A9 	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
000193 91e0 0041 	LDS  R30,65
000195 78e0      	ANDI R30,LOW(0x80)
000196 2f1e      	MOV  R17,R30
                 ; 0000 01AA CCP=CCP_IOREG_gc;
000197 ede8      	LDI  R30,LOW(216)
000198 bfe4      	OUT  0x34,R30
                 ; 0000 01AB CLK.PSCTRL=n;
000199 9310 0041 	STS  65,R17
                 ; 0000 01AC 
                 ; 0000 01AD // Internal 32 MHz RC osc. calibration reference clock source: 32.768 kHz Internal Osc.
                 ; 0000 01AE OSC.DFLLCTRL&= ~(OSC_RC32MCREF_bm | OSC_RC2MCREF_bm);
00019b 91e0 0056 	LDS  R30,86
00019d 7fec      	ANDI R30,LOW(0xFC)
00019e 93e0 0056 	STS  86,R30
                 ; 0000 01AF // Enable the autocalibration of the internal 32 MHz RC oscillator
                 ; 0000 01B0 DFLLRC32M.CTRL|=DFLL_ENABLE_bm;
0001a0 91e0 0060 	LDS  R30,96
0001a2 60e1      	ORI  R30,1
0001a3 93e0 0060 	STS  96,R30
                 ; 0000 01B1 
                 ; 0000 01B2 // Wait for the internal 32 MHz RC oscillator to stabilize
                 ; 0000 01B3 while ((OSC.STATUS & OSC_RC32MRDY_bm)==0);
                 _0x10:
0001a5 91e0 0051 	LDS  R30,81
0001a7 70e2      	ANDI R30,LOW(0x2)
0001a8 f3e1      	BREQ _0x10
                 ; 0000 01B4 
                 ; 0000 01B5 // Select the system clock source: 32 MHz Internal RC Osc.
                 ; 0000 01B6 n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC32M_gc;
0001a9 91e0 0040 	LDS  R30,64
0001ab 7fe8      	ANDI R30,LOW(0xF8)
0001ac 60e1      	ORI  R30,1
0001ad 2f1e      	MOV  R17,R30
                 ; 0000 01B7 CCP=CCP_IOREG_gc;
0001ae ede8      	LDI  R30,LOW(216)
0001af bfe4      	OUT  0x34,R30
                 ; 0000 01B8 CLK.CTRL=n;
0001b0 9310 0040 	STS  64,R17
                 ; 0000 01B9 
                 ; 0000 01BA // Disable the unused oscillators: 2 MHz, external clock/crystal oscillator, PLL
                 ; 0000 01BB OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
0001b2 91e0 0050 	LDS  R30,80
0001b4 7ee6      	ANDI R30,LOW(0xE6)
0001b5 93e0 0050 	STS  80,R30
                 ; 0000 01BC 
                 ; 0000 01BD // Peripheral Clock output: Disabled
                 ; 0000 01BE PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
0001b7 91e0 00b4 	LDS  R30,180
0001b9 7fec      	ANDI R30,LOW(0xFC)
0001ba 93e0 00b4 	STS  180,R30
                 ; 0000 01BF 
                 ; 0000 01C0 // Restore interrupts enabled/disabled state
                 ; 0000 01C1 SREG=s;
0001bc bf0f      	OUT  0x3F,R16
                 ; 0000 01C2 // Restore optimization for size if needed
                 ; 0000 01C3 #pragma optsize_default
                 ; 0000 01C4 }
0001bd 9109      	LD   R16,Y+
0001be 9119      	LD   R17,Y+
0001bf 9508      	RET
                 ;
                 ;// Disable a Timer/Counter type 0
                 ;void tc0_disable(TC0_t *ptc)
                 ; 0000 01C8 {
                 _tc0_disable:
                 ; 0000 01C9 // Timer/Counter off
                 ; 0000 01CA ptc->CTRLA=(ptc->CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_OFF_gc;
                 ;	*ptc -> Y+0
0001c0 81a8      	LD   R26,Y
0001c1 81b9      	LDD  R27,Y+1
0001c2 91ec      	LD   R30,X
0001c3 7fe0      	ANDI R30,LOW(0xF0)
0001c4 93ec      	ST   X,R30
                 ; 0000 01CB // Issue a reset command
                 ; 0000 01CC ptc->CTRLFSET=TC_CMD_RESET_gc;
0001c5 9619      	ADIW R26,9
0001c6 e0ec      	LDI  R30,LOW(12)
0001c7 93ec      	ST   X,R30
                 ; 0000 01CD }
0001c8 9622      	ADIW R28,2
0001c9 9508      	RET
                 ;
                 ;// Disable an USART
                 ;void usart_disable(USART_t *pu)
                 ; 0000 01D1 {
                 ; 0000 01D2 // Rx and Tx are off
                 ; 0000 01D3 pu->CTRLB=0;
                 ;	*pu -> Y+0
                 ; 0000 01D4 // Ensure that all interrupts generated by the USART are off
                 ; 0000 01D5 pu->CTRLA=0;
                 ; 0000 01D6 }
                 ;
                 ;// USARTF0 initialization
                 ;void usartf0_init(void)
                 ; 0000 01DA {
                 _usartf0_init:
                 ; 0000 01DB // Note: the correct PORTF direction for the RxD, TxD and XCK signals
                 ; 0000 01DC // is configured in the ports_init function
                 ; 0000 01DD 
                 ; 0000 01DE // Transmitter is enabled
                 ; 0000 01DF // Set TxD=1
                 ; 0000 01E0 PORTF.OUTSET=0x08;
0001ca e0e8      	LDI  R30,LOW(8)
0001cb 93e0 06a5 	STS  1701,R30
                 ; 0000 01E1 
                 ; 0000 01E2 // Communication mode: Asynchronous USART
                 ; 0000 01E3 // Data bits: 8
                 ; 0000 01E4 // Stop bits: 1
                 ; 0000 01E5 // Parity: Disabled
                 ; 0000 01E6 USARTF0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
0001cd e0e3      	LDI  R30,LOW(3)
0001ce 93e0 0ba5 	STS  2981,R30
                 ; 0000 01E7 
                 ; 0000 01E8 // Receive complete interrupt: Disabled
                 ; 0000 01E9 // Transmit complete interrupt: Disabled
                 ; 0000 01EA // Data register empty interrupt: Disabled
                 ; 0000 01EB USARTF0.CTRLA=(USARTF0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
                 ; 0000 01EC     USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
0001d0 91e0 0ba3 	LDS  R30,2979
0001d2 7ce0      	ANDI R30,LOW(0xC0)
0001d3 93e0 0ba3 	STS  2979,R30
                 ; 0000 01ED 
                 ; 0000 01EE // If We are using 32MHz Clock
                 ; 0000 01EF #ifdef SYSTEM_CLOCK_32MHZ && SYSTEM_CLOCK_32MHZ_115200
                 ; 0000 01F0 // Required Baud rate: 115200
                 ; 0000 01F1 // Real Baud Rate: 115211.5 (x1 Mode), Error: 0.0 %
                 ; 0000 01F2 USARTF0.BAUDCTRLA=0x2E;
0001d5 e2ee      	LDI  R30,LOW(46)
0001d6 93e0 0ba6 	STS  2982,R30
                 ; 0000 01F3 USARTF0.BAUDCTRLB=((0x09 << USART_BSCALE_bp) & USART_BSCALE_gm) | 0x08;
0001d8 e9e8      	LDI  R30,LOW(152)
0001d9 93e0 0ba7 	STS  2983,R30
                 ; 0000 01F4 #elif  SYSTEM_CLOCK_32MHZ
                 ; 0000 01F5 // Required Baud rate: 19200
                 ; 0000 01F6 // Real Baud Rate: 19196.2, Error: 0.0 %
                 ; 0000 01F7 USARTF0.BAUDCTRLA=0xE5;
                 ; 0000 01F8 USARTF0.BAUDCTRLB=((0x0B << USART_BSCALE_bp) & USART_BSCALE_gm) | 0x0C;
                 ; 0000 01F9 #else
                 ; 0000 01FA // If we are using 2MHz Clock
                 ; 0000 01FB // Required Baud rate: 19200
                 ; 0000 01FC // Real Baud Rate: 19196.2 (x2 Mode), Error: 0.0 %
                 ; 0000 01FD USARTF0.BAUDCTRLA=0x03;
                 ; 0000 01FE USARTF0.BAUDCTRLB=((0x09 << USART_BSCALE_bp) & USART_BSCALE_gm) | 0x06;
                 ; 0000 01FF #endif
                 ; 0000 0200 
                 ; 0000 0201 #ifdef SYSTEM_CLOCK_32MHZ
                 ; 0000 0202 // Receiver: Off
                 ; 0000 0203 // Transmitter: On
                 ; 0000 0204 // Double transmission speed mode: Off
                 ; 0000 0205 // Multi-processor communication mode: Off
                 ; 0000 0206 USARTF0.CTRLB=(USARTF0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
                 ; 0000 0207 	USART_TXEN_bm;
0001db 91e0 0ba4 	LDS  R30,2980
0001dd 7ee0      	ANDI R30,LOW(0xE0)
0001de 60e8      	ORI  R30,8
0001df 93e0 0ba4 	STS  2980,R30
                 ; 0000 0208 #else
                 ; 0000 0209 // Receiver: Off
                 ; 0000 020A // Transmitter: On
                 ; 0000 020B // Double transmission speed mode: On
                 ; 0000 020C // Multi-processor communication mode: Off
                 ; 0000 020D USARTF0.CTRLB=(USARTF0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
                 ; 0000 020E 	USART_TXEN_bm | USART_CLK2X_bm;
                 ; 0000 020F #endif
                 ; 0000 0210 }
0001e1 9508      	RET
                 ;
                 ;// Write a character to the USARTF0 Transmitter
                 ;#pragma used+
                 ;void putchar_usartf0(char c)
                 ; 0000 0215 {
                 _putchar_usartf0:
                 ; 0000 0216 while ((USARTF0.STATUS & USART_DREIF_bm) == 0);
                 ;	c -> Y+0
                 _0x13:
0001e2 91e0 0ba1 	LDS  R30,2977
0001e4 72e0      	ANDI R30,LOW(0x20)
0001e5 f3e1      	BREQ _0x13
                 ; 0000 0217 USARTF0.DATA=c;
0001e6 81e8      	LD   R30,Y
0001e7 93e0 0ba0 	STS  2976,R30
                 ; 0000 0218 }
0001e9 9621      	ADIW R28,1
0001ea 9508      	RET
                 ;#pragma used-
                 ;
                 ;/** Initialize Timer/Counter TCD0**/
                 ;void tcd0_init(void)
                 ; 0000 021D {
                 _tcd0_init:
                 ; 0000 021E unsigned char s;
                 ; 0000 021F //unsigned char n;
                 ; 0000 0220 
                 ; 0000 0221 // Note: the correct PORTC direction for the Compare Channels outputs
                 ; 0000 0222 // is configured in the ports_init function
                 ; 0000 0223 
                 ; 0000 0224 // Save interrupts enabled/disabled state
                 ; 0000 0225 s=SREG;
0001eb 931a      	ST   -Y,R17
                 ;	s -> R17
0001ec b71f      	IN   R17,63
                 ; 0000 0226 // Disable interrupts
                 ; 0000 0227 #asm("cli")
0001ed 94f8      	cli
                 ; 0000 0228 
                 ; 0000 0229 // Disable and reset the timer/counter just to be sure
                 ; 0000 022A tc0_disable(&TCD0);
0001ee e0e0      	LDI  R30,LOW(2304)
0001ef e0f9      	LDI  R31,HIGH(2304)
0001f0 93fa      	ST   -Y,R31
0001f1 93ea      	ST   -Y,R30
0001f2 dfcd      	RCALL _tc0_disable
                 ; 0000 022B 
                 ; 0000 022C // Note that we want to set sampling time of 10 ms.
                 ; 0000 022D // so these settings are according to that for 2MHz clock
                 ; 0000 022E // for 32MHz use Clock/64
                 ; 0000 022F #ifdef SYSTEM_CLOCK_32MHZ
                 ; 0000 0230 // if 32 mhz clock is being used
                 ; 0000 0231 TCD0.CTRLA=(TCD0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV64_gc;
0001f3 91e0 0900 	LDS  R30,2304
0001f5 7fe0      	ANDI R30,LOW(0xF0)
0001f6 60e5      	ORI  R30,LOW(0x5)
0001f7 93e0 0900 	STS  2304,R30
                 ; 0000 0232 //TCD0.CTRLA=(TCD0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV1024_gc;   // temporary change to get longer sampling interval
                 ; 0000 0233 #else
                 ; 0000 0234 // if 2 mhz clock is being used. Clock source: Peripheral Clock/4.
                 ; 0000 0235 TCD0.CTRLA=(TCD0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV4_gc;
                 ; 0000 0236 #endif
                 ; 0000 0237 
                 ; 0000 0238 // Overflow interrupt: Low Level
                 ; 0000 0239 // Error interrupt: Disabled
                 ; 0000 023A TCD0.INTCTRLA=(TCD0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) | TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
0001f9 91e0 0906 	LDS  R30,2310
0001fb 7fe0      	ANDI R30,LOW(0xF0)
0001fc 60e1      	ORI  R30,1
0001fd 93e0 0906 	STS  2310,R30
                 ; 0000 023B 
                 ; 0000 023C // Mode: Dual Slope PWM Operation, Overflow Int./Event on TOP and Bottom
                 ; 0000 023D // Compare/Capture on channel A: Off
                 ; 0000 023E // Compare/Capture on channel B: Off
                 ; 0000 023F // Compare/Capture on channel C: Off
                 ; 0000 0240 // Compare/Capture on channel D: Off
                 ; 0000 0241 TCD0.CTRLB=(TCD0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) | TC_WGMODE_NORMAL_gc;
0001ff 91e0 0901 	LDS  R30,2305
000201 70e8      	ANDI R30,LOW(0x8)
000202 93e0 0901 	STS  2305,R30
                 ; 0000 0242 
                 ; 0000 0243 // Clear the interrupt flags
                 ; 0000 0244 TCD0.INTFLAGS=TCD0.INTFLAGS;
000204 91e0 090c 	LDS  R30,2316
000206 93e0 090c 	STS  2316,R30
                 ; 0000 0245 
                 ; 0000 0246 // Set counter register
                 ; 0000 0247 TCD0.CNT=0x0000;
000208 940e 0f35 	CALL SUBOPT_0x0
                 ; 0000 0248 // Set period register
                 ; 0000 0249 TCD0.PER= 0x1388; //Clock/(4*5000) = 100 Hz => h = 10 ms  , for 32Mhz (clock/(64*5000) = 100 Hz
                 ; 0000 024A // Set channel A Compare/Capture register
                 ; 0000 024B TCD0.CCA=0x0000;
00020a e0e0      	LDI  R30,LOW(0)
00020b e0f0      	LDI  R31,HIGH(0)
00020c 93e0 0928 	STS  2344,R30
00020e 93f0 0929 	STS  2344+1,R31
                 ; 0000 024C // Set channel B Compare/Capture register
                 ; 0000 024D TCD0.CCB=0x0000;
000210 93e0 092a 	STS  2346,R30
000212 93f0 092b 	STS  2346+1,R31
                 ; 0000 024E // Set channel C Compare/Capture register
                 ; 0000 024F TCD0.CCC=0x0000;
000214 93e0 092c 	STS  2348,R30
000216 93f0 092d 	STS  2348+1,R31
                 ; 0000 0250 // Set channel D Compare/Capture register
                 ; 0000 0251 TCD0.CCD=0x0000;
000218 93e0 092e 	STS  2350,R30
00021a 93f0 092f 	STS  2350+1,R31
                 ; 0000 0252 
                 ; 0000 0253 // Restore interrupts enabled/disabled state
                 ; 0000 0254 SREG=s;
00021c bf1f      	OUT  0x3F,R17
                 ; 0000 0255 }
00021d 9119      	LD   R17,Y+
00021e 9508      	RET
                 ;
                 ;/**** Timer/counter TCD0 overflow/Underflow interrupt service routine *****/
                 ;// All Four Functions: Encoder Reading, Speed Estimation, Event-Generation Rule and Control Computation
                 ;// are being computed inside this Interrupt Service Routine
                 ;interrupt [TCD0_OVF_vect] void tcd0_overflow_isr(void)
                 ; 0000 025B {
                 _tcd0_overflow_isr:
00021f 940e 0f42 	CALL SUBOPT_0x1
                 ; 0000 025C /*status registered is not stored automatically when entering ISR and restored when leaving ISR. See pg. 9 in device manual*/
                 ; 0000 025D 
                 ; 0000 025E // write your code here
                 ; 0000 025F unsigned char * p;
                 ; 0000 0260 unsigned char i;
                 ; 0000 0261 //float x_test = 0;
                 ; 0000 0262 
                 ; 0000 0263 // Measure the control delay
                 ; 0000 0264 //PORTF.OUTTGL = PIN6_bm;
                 ; 0000 0265 
                 ; 0000 0266 // To Control Inter-Event Time
                 ; 0000 0267 iterations +=1;
                 ;	*p -> R16,R17
                 ;	i -> R19
000221 940e 0f52 	CALL SUBOPT_0x2
                +
000223 5fef     +SUBI R30 , LOW ( - 1 )
000224 4fff     +SBCI R31 , HIGH ( - 1 )
000225 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000226 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000227 93e0 2504 	STS  _iterations,R30
000229 93f0 2505 	STS  _iterations+1,R31
00022b 9360 2506 	STS  _iterations+2,R22
00022d 9370 2507 	STS  _iterations+3,R23
                 ; 0000 0268 
                 ; 0000 0269 /*** Payload X Angle Data in Encoder Counts ***/
                 ; 0000 026A /***** First HCTL2032: Encoder 1- Read and Send Position Count from QDEC of Second HCTL2032 *****/
                 ; 0000 026B Temp_Pos_Count_HCTL_3 = HCTL2032_Read_Count_Data(&PORTD, &PORTE, false);
00022f 940e 0f5b 	CALL SUBOPT_0x3
000231 e0e0      	LDI  R30,LOW(0)
000232 93ea      	ST   -Y,R30
000233 940e 0e1c 	CALL _HCTL2032_Read_Count_Data
000235 93e0 2418 	STS  _Temp_Pos_Count_HCTL_3,R30
000237 93f0 2419 	STS  _Temp_Pos_Count_HCTL_3+1,R31
000239 9360 241a 	STS  _Temp_Pos_Count_HCTL_3+2,R22
00023b 9370 241b 	STS  _Temp_Pos_Count_HCTL_3+3,R23
                 ; 0000 026C // Scale the encoder count between  -2147483648 t0 2147483647
                 ; 0000 026D Pos_Count_HCTL_3 = (signed long)Temp_Pos_Count_HCTL_3;
00023d 93e0 2408 	STS  _Pos_Count_HCTL_3,R30
00023f 93f0 2409 	STS  _Pos_Count_HCTL_3+1,R31
000241 9360 240a 	STS  _Pos_Count_HCTL_3+2,R22
000243 9370 240b 	STS  _Pos_Count_HCTL_3+3,R23
                 ; 0000 026E 
                 ; 0000 026F /*** Payload Y Angle Data in Encoder Counts***/
                 ; 0000 0270 /****** First HCTL2032: Encoder 2- Read and Send Position Count from QDEC of First HCTL2032 ******/
                 ; 0000 0271 Temp_Pos_Count_HCTL_4 = HCTL2032_Read_Count_Data(&PORTD, &PORTE, true);
000245 940e 0f5b 	CALL SUBOPT_0x3
000247 e0e1      	LDI  R30,LOW(1)
000248 93ea      	ST   -Y,R30
000249 940e 0e1c 	CALL _HCTL2032_Read_Count_Data
00024b 93e0 241c 	STS  _Temp_Pos_Count_HCTL_4,R30
00024d 93f0 241d 	STS  _Temp_Pos_Count_HCTL_4+1,R31
00024f 9360 241e 	STS  _Temp_Pos_Count_HCTL_4+2,R22
000251 9370 241f 	STS  _Temp_Pos_Count_HCTL_4+3,R23
                 ; 0000 0272 // Scale the encoder count between  -2147483648 t0 2147483647
                 ; 0000 0273 Pos_Count_HCTL_4 = (signed long)Temp_Pos_Count_HCTL_4;
000253 93e0 240c 	STS  _Pos_Count_HCTL_4,R30
000255 93f0 240d 	STS  _Pos_Count_HCTL_4+1,R31
000257 9360 240e 	STS  _Pos_Count_HCTL_4+2,R22
000259 9370 240f 	STS  _Pos_Count_HCTL_4+3,R23
                 ; 0000 0274 
                 ; 0000 0275 /*** Trolley Position Data in Encoder Counts ***/
                 ; 0000 0276 /* Second HCTL2032: Encoder 3- Read and Send Position Count from QDEC of Second HCTL2032 */
                 ; 0000 0277 Temp_Pos_Count_HCTL_1 = HCTL2032_Read_Count_Data(&PORTH, &PORTC, false);
00025b 940e 0f64 	CALL SUBOPT_0x4
00025d e0e0      	LDI  R30,LOW(0)
00025e 93ea      	ST   -Y,R30
00025f 940e 0e1c 	CALL _HCTL2032_Read_Count_Data
000261 93e0 2410 	STS  _Temp_Pos_Count_HCTL_1,R30
000263 93f0 2411 	STS  _Temp_Pos_Count_HCTL_1+1,R31
000265 9360 2412 	STS  _Temp_Pos_Count_HCTL_1+2,R22
000267 9370 2413 	STS  _Temp_Pos_Count_HCTL_1+3,R23
                 ; 0000 0278 // Scale the encoder count between  -2147483648 t0 2147483647
                 ; 0000 0279 Pos_Count_HCTL_1 = (signed long)Temp_Pos_Count_HCTL_1;
000269 93e0 2400 	STS  _Pos_Count_HCTL_1,R30
00026b 93f0 2401 	STS  _Pos_Count_HCTL_1+1,R31
00026d 9360 2402 	STS  _Pos_Count_HCTL_1+2,R22
00026f 9370 2403 	STS  _Pos_Count_HCTL_1+3,R23
                 ; 0000 027A 
                 ; 0000 027B /*** Arm Position Data in Encoder Counts ***/
                 ; 0000 027C /* Second HCTL2032: Encoder 4- Read and Send Position Count from QDEC of Second HCTL2032 */
                 ; 0000 027D Temp_Pos_Count_HCTL_2 = HCTL2032_Read_Count_Data(&PORTH, &PORTC, true);
000271 940e 0f64 	CALL SUBOPT_0x4
000273 e0e1      	LDI  R30,LOW(1)
000274 93ea      	ST   -Y,R30
000275 940e 0e1c 	CALL _HCTL2032_Read_Count_Data
000277 93e0 2414 	STS  _Temp_Pos_Count_HCTL_2,R30
000279 93f0 2415 	STS  _Temp_Pos_Count_HCTL_2+1,R31
00027b 9360 2416 	STS  _Temp_Pos_Count_HCTL_2+2,R22
00027d 9370 2417 	STS  _Temp_Pos_Count_HCTL_2+3,R23
                 ; 0000 027E // Scale the encoder count between  -2147483648 t0 2147483647
                 ; 0000 027F Pos_Count_HCTL_2 = (signed long)Temp_Pos_Count_HCTL_2;
00027f 93e0 2404 	STS  _Pos_Count_HCTL_2,R30
000281 93f0 2405 	STS  _Pos_Count_HCTL_2+1,R31
000283 9360 2406 	STS  _Pos_Count_HCTL_2+2,R22
000285 9370 2407 	STS  _Pos_Count_HCTL_2+3,R23
                 ; 0000 0280 
                 ; 0000 0281 
                 ; 0000 0282 /********** Trolley and Arm Position Data in meter and radians *************/
                 ; 0000 0283 
                 ; 0000 0284 /* Calculate Trolley Position 'x_1' in meters */
                 ; 0000 0285 x_1 = (float)Pos_Count_HCTL_3*2.0*PI*r_x/(float)PPR3;
000287 91e0 2408 	LDS  R30,_Pos_Count_HCTL_3
000289 91f0 2409 	LDS  R31,_Pos_Count_HCTL_3+1
00028b 9160 240a 	LDS  R22,_Pos_Count_HCTL_3+2
00028d 9170 240b 	LDS  R23,_Pos_Count_HCTL_3+3
00028f 940e 0f6d 	CALL SUBOPT_0x5
                +
000291 e5a9     +LDI R26 , LOW ( 0x3D1B4A59 )
000292 e4ba     +LDI R27 , HIGH ( 0x3D1B4A59 )
000293 e18b     +LDI R24 , BYTE3 ( 0x3D1B4A59 )
000294 e39d     +LDI R25 , BYTE4 ( 0x3D1B4A59 )
                 	__GETD2N 0x3D1B4A59
000295 940e 14de 	CALL __MULF12
000297 940e 0f7c 	CALL SUBOPT_0x6
000299 940e 0f85 	CALL SUBOPT_0x7
                 ; 0000 0286 
                 ; 0000 0287 /* Calculate Arm Position 'x_5' in radians*/
                 ; 0000 0288 x_5 = (float)Pos_Count_HCTL_4*2.0*PI/(float)PPR4;
00029b 91e0 240c 	LDS  R30,_Pos_Count_HCTL_4
00029d 91f0 240d 	LDS  R31,_Pos_Count_HCTL_4+1
00029f 9160 240e 	LDS  R22,_Pos_Count_HCTL_4+2
0002a1 9170 240f 	LDS  R23,_Pos_Count_HCTL_4+3
0002a3 940e 0f6d 	CALL SUBOPT_0x5
0002a5 01df      	MOVW R26,R30
0002a6 01cb      	MOVW R24,R22
                +
0002a7 e0e0     +LDI R30 , LOW ( 0x457A0000 )
0002a8 e0f0     +LDI R31 , HIGH ( 0x457A0000 )
0002a9 e76a     +LDI R22 , BYTE3 ( 0x457A0000 )
0002aa e475     +LDI R23 , BYTE4 ( 0x457A0000 )
                 	__GETD1N 0x457A0000
0002ab 940e 152c 	CALL __DIVF21
0002ad 940e 0f8e 	CALL SUBOPT_0x8
                 ; 0000 0289 
                 ; 0000 028A /********** Payload Angle Data ***********/
                 ; 0000 028B 
                 ; 0000 028C /* Calculate X-Angle 'x_3' in Radians */
                 ; 0000 028D x_3 = (float)Pos_Count_HCTL_1*2.0*PI/(float)PPR1;
0002af 91e0 2400 	LDS  R30,_Pos_Count_HCTL_1
0002b1 91f0 2401 	LDS  R31,_Pos_Count_HCTL_1+1
0002b3 9160 2402 	LDS  R22,_Pos_Count_HCTL_1+2
0002b5 9170 2403 	LDS  R23,_Pos_Count_HCTL_1+3
0002b7 940e 0f6d 	CALL SUBOPT_0x5
0002b9 940e 0f7c 	CALL SUBOPT_0x6
0002bb 940e 0f97 	CALL SUBOPT_0x9
                 ; 0000 028E // Invert Position (see thesis page 41 for description)
                 ; 0000 028F //x_3 = -x_3; // not required if we are reading encoders with correct phase on ED
                 ; 0000 0290 
                 ; 0000 0291 /* Calculate Y-Angle 'x_7' in Radians */
                 ; 0000 0292 x_7 = (float)Pos_Count_HCTL_2*2.0*PI/(float)PPR2;
0002bd 91e0 2404 	LDS  R30,_Pos_Count_HCTL_2
0002bf 91f0 2405 	LDS  R31,_Pos_Count_HCTL_2+1
0002c1 9160 2406 	LDS  R22,_Pos_Count_HCTL_2+2
0002c3 9170 2407 	LDS  R23,_Pos_Count_HCTL_2+3
0002c5 940e 0f6d 	CALL SUBOPT_0x5
0002c7 940e 0f7c 	CALL SUBOPT_0x6
0002c9 940e 0fa0 	CALL SUBOPT_0xA
                 ; 0000 0293 
                 ; 0000 0294 /***** Error Filtering, Encoder data may have glitch which can be disastrous for control ****/
                 ; 0000 0295 // Temorary Solution: Since error is always very high number so it can be detected from valid data
                 ; 0000 0296 // if error occurs then keep the previous state
                 ; 0000 0297 // Permanent Solution: Hardware Redesign is required withj MCU on board
                 ; 0000 0298 // Problem is occuring due to voltage level translator
                 ; 0000 0299 
                 ; 0000 029A if(fabs(x_1) > 0.6) // Maximum range for trolley is 0.5m
0002cb 940e 0fa9 	CALL SUBOPT_0xB
0002cd 940e 0fb2 	CALL SUBOPT_0xC
                +
0002cf e9ea     +LDI R30 , LOW ( 0x3F19999A )
0002d0 e9f9     +LDI R31 , HIGH ( 0x3F19999A )
0002d1 e169     +LDI R22 , BYTE3 ( 0x3F19999A )
0002d2 e37f     +LDI R23 , BYTE4 ( 0x3F19999A )
                 	__GETD1N 0x3F19999A
0002d3 940e 1571 	CALL __CMPF12
0002d5 f009      	BREQ PC+2
0002d6 f410      	BRCC PC+3
0002d7 940c 02dd 	JMP  _0x16
                 ; 0000 029B x_1 = x_1_old;
0002d9 940e 0fb9 	CALL SUBOPT_0xD
0002db 940e 0f85 	CALL SUBOPT_0x7
                 ; 0000 029C if(fabs(x_3) > 0.9) // Maximum range for Payload X angle is 0.8 radians
                 _0x16:
0002dd 940e 0fc2 	CALL SUBOPT_0xE
0002df 940e 0fb2 	CALL SUBOPT_0xC
0002e1 940e 0fcb 	CALL SUBOPT_0xF
0002e3 f009      	BREQ PC+2
0002e4 f410      	BRCC PC+3
0002e5 940c 02eb 	JMP  _0x17
                 ; 0000 029D x_3 = x_3_old;
0002e7 940e 0fd2 	CALL SUBOPT_0x10
0002e9 940e 0f97 	CALL SUBOPT_0x9
                 ; 0000 029E if(fabs(x_5) > 6.2832) // Maximum range for Arm is plus minus PI
                 _0x17:
0002eb 940e 0fdb 	CALL SUBOPT_0x11
0002ed 940e 0fb2 	CALL SUBOPT_0xC
                +
0002ef efe9     +LDI R30 , LOW ( 0x40C90FF9 )
0002f0 e0ff     +LDI R31 , HIGH ( 0x40C90FF9 )
0002f1 ec69     +LDI R22 , BYTE3 ( 0x40C90FF9 )
0002f2 e470     +LDI R23 , BYTE4 ( 0x40C90FF9 )
                 	__GETD1N 0x40C90FF9
0002f3 940e 1571 	CALL __CMPF12
0002f5 f009      	BREQ PC+2
0002f6 f410      	BRCC PC+3
0002f7 940c 0303 	JMP  _0x18
                 ; 0000 029F x_5 = x_5_old;
0002f9 91e0 247c 	LDS  R30,_x_5_old
0002fb 91f0 247d 	LDS  R31,_x_5_old+1
0002fd 9160 247e 	LDS  R22,_x_5_old+2
0002ff 9170 247f 	LDS  R23,_x_5_old+3
000301 940e 0f8e 	CALL SUBOPT_0x8
                 ; 0000 02A0 if(fabs(x_7) > 0.9) // Maximum range for Payload Y Angle is 0.8 radians
                 _0x18:
000303 940e 0fe4 	CALL SUBOPT_0x12
000305 940e 0fb2 	CALL SUBOPT_0xC
000307 940e 0fcb 	CALL SUBOPT_0xF
000309 f009      	BREQ PC+2
00030a f410      	BRCC PC+3
00030b 940c 0311 	JMP  _0x19
                 ; 0000 02A1 x_7 = x_7_old;
00030d 940e 0fed 	CALL SUBOPT_0x13
00030f 940e 0fa0 	CALL SUBOPT_0xA
                 ; 0000 02A2 
                 ; 0000 02A3 
                 ; 0000 02A4 /*********** Estimate Speed States ***********/
                 ; 0000 02A5 /********* EULER APPROXIMATION **********/
                 ; 0000 02A6 // ad and bd may be different for different states but for time being we are using the same for all.
                 ; 0000 02A7 // Consider using different in case estimation doesnt work.
                 ; 0000 02A8 /* Trolley Speed m/sec*/
                 ; 0000 02A9 //x_2 = ad1*x_2 + bd1*(x_1 - x_1_old);
                 ; 0000 02AA 
                 ; 0000 02AB /*X-Angle Speed rad/sec*/
                 ; 0000 02AC //x_4 = ad1*x_4 + bd1*(x_3 - x_3_old);
                 ; 0000 02AD // Invert Speed (see thesis page 41)
                 ; 0000 02AE //x_4 = x_4; // not required if we are reading encoders on ED
                 ; 0000 02AF 
                 ; 0000 02B0 /*Arm Speed rad/sec*/
                 ; 0000 02B1 //x_6 = ad*x_6 + bd*(x_5 - x_5_old);
                 ; 0000 02B2 
                 ; 0000 02B3 /*Y-Angle Speed rad/sec */
                 ; 0000 02B4 //x_8 = ad1*x_8 + bd1*(x_7 - x_7_old);
                 ; 0000 02B5 
                 ; 0000 02B6 /********** Nonlinear MODEL BASED SPEED ESTIMATION (See Faisal's thesis for Model Details) ***********/
                 ; 0000 02B7 
                 ; 0000 02B8 // Varying Parameter
                 ; 0000 02B9 Phi = 1.0/(1.0+0.0138*x_1_old*x_1_old);
                 _0x19:
000311 940e 0fb9 	CALL SUBOPT_0xD
                +
000313 e6a5     +LDI R26 , LOW ( 0x3C621965 )
000314 e1b9     +LDI R27 , HIGH ( 0x3C621965 )
000315 e682     +LDI R24 , BYTE3 ( 0x3C621965 )
000316 e39c     +LDI R25 , BYTE4 ( 0x3C621965 )
                 	__GETD2N 0x3C621965
000317 940e 14de 	CALL __MULF12
000319 91a0 246c 	LDS  R26,_x_1_old
00031b 91b0 246d 	LDS  R27,_x_1_old+1
00031d 9180 246e 	LDS  R24,_x_1_old+2
00031f 9190 246f 	LDS  R25,_x_1_old+3
000321 940e 0ff6 	CALL SUBOPT_0x14
000323 940e 0ffd 	CALL SUBOPT_0x15
000325 93e0 2494 	STS  _Phi,R30
000327 93f0 2495 	STS  _Phi+1,R31
000329 9360 2496 	STS  _Phi+2,R22
00032b 9370 2497 	STS  _Phi+3,R23
                 ; 0000 02BA // Trolley Speed in m/sec
                 ; 0000 02BB x_2 = (1.0-41.667*h)*x_2_old+h*(-0.8464*x_3_old+5.8808*u_1_old);
00032d 940e 1006 	CALL SUBOPT_0x16
                +
00032f e0a2     +LDI R26 , LOW ( 0x4226AB02 )
000330 eabb     +LDI R27 , HIGH ( 0x4226AB02 )
000331 e286     +LDI R24 , BYTE3 ( 0x4226AB02 )
000332 e492     +LDI R25 , BYTE4 ( 0x4226AB02 )
                 	__GETD2N 0x4226AB02
000333 940e 0ff6 	CALL SUBOPT_0x14
000335 940e 100f 	CALL SUBOPT_0x17
000337 91a0 2470 	LDS  R26,_x_2_old
000339 91b0 2471 	LDS  R27,_x_2_old+1
00033b 9180 2472 	LDS  R24,_x_2_old+2
00033d 9190 2473 	LDS  R25,_x_2_old+3
00033f 940e 14de 	CALL __MULF12
000341 937f      	PUSH R23
000342 936f      	PUSH R22
000343 93ff      	PUSH R31
000344 93ef      	PUSH R30
000345 940e 0fd2 	CALL SUBOPT_0x10
                +
000347 eaac     +LDI R26 , LOW ( 0xBF58ADAC )
000348 eabd     +LDI R27 , HIGH ( 0xBF58ADAC )
000349 e588     +LDI R24 , BYTE3 ( 0xBF58ADAC )
00034a eb9f     +LDI R25 , BYTE4 ( 0xBF58ADAC )
                 	__GETD2N 0xBF58ADAC
00034b 940e 14de 	CALL __MULF12
00034d 937f      	PUSH R23
00034e 936f      	PUSH R22
00034f 93ff      	PUSH R31
000350 93ef      	PUSH R30
000351 940e 1014 	CALL SUBOPT_0x18
                +
000353 e8a3     +LDI R26 , LOW ( 0x40BC2F83 )
000354 e2bf     +LDI R27 , HIGH ( 0x40BC2F83 )
000355 eb8c     +LDI R24 , BYTE3 ( 0x40BC2F83 )
000356 e490     +LDI R25 , BYTE4 ( 0x40BC2F83 )
                 	__GETD2N 0x40BC2F83
000357 940e 14de 	CALL __MULF12
000359 91af      	POP  R26
00035a 91bf      	POP  R27
00035b 918f      	POP  R24
00035c 919f      	POP  R25
00035d 940e 101d 	CALL SUBOPT_0x19
00035f 91af      	POP  R26
000360 91bf      	POP  R27
000361 918f      	POP  R24
000362 919f      	POP  R25
000363 940e 148e 	CALL __ADDF12
000365 93e0 2448 	STS  _x_2,R30
000367 93f0 2449 	STS  _x_2+1,R31
000369 9360 244a 	STS  _x_2+2,R22
00036b 9370 244b 	STS  _x_2+3,R23
                 ; 0000 02BC //// Payload X angle speed in radians/sec
                 ; 0000 02BD x_4 = x_4_old + h*(-69.4450*x_2_old-17.7607*x_3_old+9.8013*u_1_old);
00036d 91e0 2470 	LDS  R30,_x_2_old
00036f 91f0 2471 	LDS  R31,_x_2_old+1
000371 9160 2472 	LDS  R22,_x_2_old+2
000373 9170 2473 	LDS  R23,_x_2_old+3
                +
000375 eda7     +LDI R26 , LOW ( 0xC28AE3D7 )
000376 eeb3     +LDI R27 , HIGH ( 0xC28AE3D7 )
000377 e88a     +LDI R24 , BYTE3 ( 0xC28AE3D7 )
000378 ec92     +LDI R25 , BYTE4 ( 0xC28AE3D7 )
                 	__GETD2N 0xC28AE3D7
000379 940e 14de 	CALL __MULF12
00037b 937f      	PUSH R23
00037c 936f      	PUSH R22
00037d 93ff      	PUSH R31
00037e 93ef      	PUSH R30
00037f 940e 0fd2 	CALL SUBOPT_0x10
                +
000381 eeaa     +LDI R26 , LOW ( 0x418E15EA )
000382 e1b5     +LDI R27 , HIGH ( 0x418E15EA )
000383 e88e     +LDI R24 , BYTE3 ( 0x418E15EA )
000384 e491     +LDI R25 , BYTE4 ( 0x418E15EA )
                 	__GETD2N 0x418E15EA
000385 940e 14de 	CALL __MULF12
000387 91af      	POP  R26
000388 91bf      	POP  R27
000389 918f      	POP  R24
00038a 919f      	POP  R25
00038b 940e 100f 	CALL SUBOPT_0x17
00038d 937f      	PUSH R23
00038e 936f      	PUSH R22
00038f 93ff      	PUSH R31
000390 93ef      	PUSH R30
000391 940e 1014 	CALL SUBOPT_0x18
                +
000393 e2a0     +LDI R26 , LOW ( 0x411CD220 )
000394 edb2     +LDI R27 , HIGH ( 0x411CD220 )
000395 e18c     +LDI R24 , BYTE3 ( 0x411CD220 )
000396 e491     +LDI R25 , BYTE4 ( 0x411CD220 )
                 	__GETD2N 0x411CD220
000397 940e 14de 	CALL __MULF12
000399 91af      	POP  R26
00039a 91bf      	POP  R27
00039b 918f      	POP  R24
00039c 919f      	POP  R25
00039d 940e 101d 	CALL SUBOPT_0x19
00039f 91a0 2478 	LDS  R26,_x_4_old
0003a1 91b0 2479 	LDS  R27,_x_4_old+1
0003a3 9180 247a 	LDS  R24,_x_4_old+2
0003a5 9190 247b 	LDS  R25,_x_4_old+3
0003a7 940e 148e 	CALL __ADDF12
0003a9 93e0 2450 	STS  _x_4,R30
0003ab 93f0 2451 	STS  _x_4+1,R31
0003ad 9360 2452 	STS  _x_4+2,R22
0003af 9370 2453 	STS  _x_4+3,R23
                 ; 0000 02BE // Arm Speed in radians/sec
                 ; 0000 02BF x_6 = (1.0 - 17.3765*h*Phi)*x_6_old + h*Phi*(0.0618*x_1_old*x_7_old+11.912*u_2_old);
0003b1 940e 1006 	CALL SUBOPT_0x16
                +
0003b3 e1a2     +LDI R26 , LOW ( 0x418B0312 )
0003b4 e0b3     +LDI R27 , HIGH ( 0x418B0312 )
0003b5 e88b     +LDI R24 , BYTE3 ( 0x418B0312 )
0003b6 e491     +LDI R25 , BYTE4 ( 0x418B0312 )
                 	__GETD2N 0x418B0312
0003b7 940e 14de 	CALL __MULF12
0003b9 940e 102a 	CALL SUBOPT_0x1A
0003bb 940e 0ff6 	CALL SUBOPT_0x14
0003bd 940e 100f 	CALL SUBOPT_0x17
0003bf 91a0 2480 	LDS  R26,_x_6_old
0003c1 91b0 2481 	LDS  R27,_x_6_old+1
0003c3 9180 2482 	LDS  R24,_x_6_old+2
0003c5 9190 2483 	LDS  R25,_x_6_old+3
0003c7 940e 14de 	CALL __MULF12
0003c9 937f      	PUSH R23
0003ca 936f      	PUSH R22
0003cb 93ff      	PUSH R31
0003cc 93ef      	PUSH R30
0003cd 91e0 2494 	LDS  R30,_Phi
0003cf 91f0 2495 	LDS  R31,_Phi+1
0003d1 9160 2496 	LDS  R22,_Phi+2
0003d3 9170 2497 	LDS  R23,_Phi+3
0003d5 940e 1033 	CALL SUBOPT_0x1B
0003d7 937f      	PUSH R23
0003d8 936f      	PUSH R22
0003d9 93ff      	PUSH R31
0003da 93ef      	PUSH R30
0003db 940e 0fb9 	CALL SUBOPT_0xD
                +
0003dd efaf     +LDI R26 , LOW ( 0x3D7D21FF )
0003de e2b1     +LDI R27 , HIGH ( 0x3D7D21FF )
0003df e78d     +LDI R24 , BYTE3 ( 0x3D7D21FF )
0003e0 e39d     +LDI R25 , BYTE4 ( 0x3D7D21FF )
                 	__GETD2N 0x3D7D21FF
0003e1 940e 103e 	CALL SUBOPT_0x1C
0003e3 937f      	PUSH R23
0003e4 936f      	PUSH R22
0003e5 93ff      	PUSH R31
0003e6 93ef      	PUSH R30
0003e7 940e 104b 	CALL SUBOPT_0x1D
                +
0003e9 e8ad     +LDI R26 , LOW ( 0x413E978D )
0003ea e9b7     +LDI R27 , HIGH ( 0x413E978D )
0003eb e38e     +LDI R24 , BYTE3 ( 0x413E978D )
0003ec e491     +LDI R25 , BYTE4 ( 0x413E978D )
                 	__GETD2N 0x413E978D
0003ed 940e 14de 	CALL __MULF12
0003ef 91af      	POP  R26
0003f0 91bf      	POP  R27
0003f1 918f      	POP  R24
0003f2 919f      	POP  R25
0003f3 940e 148e 	CALL __ADDF12
0003f5 91af      	POP  R26
0003f6 91bf      	POP  R27
0003f7 918f      	POP  R24
0003f8 919f      	POP  R25
0003f9 940e 14de 	CALL __MULF12
0003fb 91af      	POP  R26
0003fc 91bf      	POP  R27
0003fd 918f      	POP  R24
0003fe 919f      	POP  R25
0003ff 940e 148e 	CALL __ADDF12
000401 93e0 245c 	STS  _x_6,R30
000403 93f0 245d 	STS  _x_6+1,R31
000405 9360 245e 	STS  _x_6+2,R22
000407 9370 245f 	STS  _x_6+3,R23
                 ; 0000 02C0 // Payload Y angle speed in radians/sec
                 ; 0000 02C1 x_8 = x_8_old + h*(-16.35*x_7_old-Phi*x_1_old*(-28.9608*x_6_old + 0.1030*x_1_old*x_7_old + 19.8533*u_2_old));
000409 940e 0fed 	CALL SUBOPT_0x13
                +
00040b ecad     +LDI R26 , LOW ( 0xC182CCCD )
00040c ecbc     +LDI R27 , HIGH ( 0xC182CCCD )
00040d e882     +LDI R24 , BYTE3 ( 0xC182CCCD )
00040e ec91     +LDI R25 , BYTE4 ( 0xC182CCCD )
                 	__GETD2N 0xC182CCCD
00040f 940e 14de 	CALL __MULF12
000411 937f      	PUSH R23
000412 936f      	PUSH R22
000413 93ff      	PUSH R31
000414 93ef      	PUSH R30
000415 940e 0fb9 	CALL SUBOPT_0xD
000417 940e 102a 	CALL SUBOPT_0x1A
000419 940e 14de 	CALL __MULF12
00041b 937f      	PUSH R23
00041c 936f      	PUSH R22
00041d 93ff      	PUSH R31
00041e 93ef      	PUSH R30
00041f 91e0 2480 	LDS  R30,_x_6_old
000421 91f0 2481 	LDS  R31,_x_6_old+1
000423 9160 2482 	LDS  R22,_x_6_old+2
000425 9170 2483 	LDS  R23,_x_6_old+3
                +
000427 eba8     +LDI R26 , LOW ( 0xC1E7AFB8 )
000428 eabf     +LDI R27 , HIGH ( 0xC1E7AFB8 )
000429 ee87     +LDI R24 , BYTE3 ( 0xC1E7AFB8 )
00042a ec91     +LDI R25 , BYTE4 ( 0xC1E7AFB8 )
                 	__GETD2N 0xC1E7AFB8
00042b 940e 14de 	CALL __MULF12
00042d 937f      	PUSH R23
00042e 936f      	PUSH R22
00042f 93ff      	PUSH R31
000430 93ef      	PUSH R30
000431 940e 0fb9 	CALL SUBOPT_0xD
                +
000433 eaaa     +LDI R26 , LOW ( 0x3DD2F1AA )
000434 efb1     +LDI R27 , HIGH ( 0x3DD2F1AA )
000435 ed82     +LDI R24 , BYTE3 ( 0x3DD2F1AA )
000436 e39d     +LDI R25 , BYTE4 ( 0x3DD2F1AA )
                 	__GETD2N 0x3DD2F1AA
000437 940e 103e 	CALL SUBOPT_0x1C
000439 91af      	POP  R26
00043a 91bf      	POP  R27
00043b 918f      	POP  R24
00043c 919f      	POP  R25
00043d 940e 148e 	CALL __ADDF12
00043f 937f      	PUSH R23
000440 936f      	PUSH R22
000441 93ff      	PUSH R31
000442 93ef      	PUSH R30
000443 940e 104b 	CALL SUBOPT_0x1D
                +
000445 e8af     +LDI R26 , LOW ( 0x419ED38F )
000446 edb3     +LDI R27 , HIGH ( 0x419ED38F )
000447 e98e     +LDI R24 , BYTE3 ( 0x419ED38F )
000448 e491     +LDI R25 , BYTE4 ( 0x419ED38F )
                 	__GETD2N 0x419ED38F
000449 940e 14de 	CALL __MULF12
00044b 91af      	POP  R26
00044c 91bf      	POP  R27
00044d 918f      	POP  R24
00044e 919f      	POP  R25
00044f 940e 148e 	CALL __ADDF12
000451 91af      	POP  R26
000452 91bf      	POP  R27
000453 918f      	POP  R24
000454 919f      	POP  R25
000455 940e 14de 	CALL __MULF12
000457 91af      	POP  R26
000458 91bf      	POP  R27
000459 918f      	POP  R24
00045a 919f      	POP  R25
00045b 940e 100f 	CALL SUBOPT_0x17
00045d 940e 1033 	CALL SUBOPT_0x1B
00045f 91a0 2488 	LDS  R26,_x_8_old
000461 91b0 2489 	LDS  R27,_x_8_old+1
000463 9180 248a 	LDS  R24,_x_8_old+2
000465 9190 248b 	LDS  R25,_x_8_old+3
000467 940e 148e 	CALL __ADDF12
000469 93e0 2464 	STS  _x_8,R30
00046b 93f0 2465 	STS  _x_8+1,R31
00046d 9360 2466 	STS  _x_8+2,R22
00046f 9370 2467 	STS  _x_8+3,R23
                 ; 0000 02C2 
                 ; 0000 02C3 /**** Thresholding Estimates in case something goes wrong, we are thresholding because we know the maximum possible speeds *******/
                 ; 0000 02C4 if(x_2 > 0.15) // Speed Gain for Trolley = 0.14114
000471 940e 1054 	CALL SUBOPT_0x1E
                +
000473 e9ea     +LDI R30 , LOW ( 0x3E19999A )
000474 e9f9     +LDI R31 , HIGH ( 0x3E19999A )
000475 e169     +LDI R22 , BYTE3 ( 0x3E19999A )
000476 e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
000477 940e 1571 	CALL __CMPF12
000479 f009      	BREQ PC+2
00047a f410      	BRCC PC+3
00047b 940c 047e 	JMP  _0x1A
                 ; 0000 02C5 x_2 = 0.15;
00047d c009      	RJMP _0x136
                 ; 0000 02C6 else if(x_2 < -0.15)
                 _0x1A:
00047e 940e 1054 	CALL SUBOPT_0x1E
                +
000480 e9ea     +LDI R30 , LOW ( 0xBE19999A )
000481 e9f9     +LDI R31 , HIGH ( 0xBE19999A )
000482 e169     +LDI R22 , BYTE3 ( 0xBE19999A )
000483 eb7e     +LDI R23 , BYTE4 ( 0xBE19999A )
                 	__GETD1N 0xBE19999A
000484 940e 1571 	CALL __CMPF12
000486 f440      	BRSH _0x1C
                 ; 0000 02C7 x_2 = -0.15;
                 _0x136:
000487 93e0 2448 	STS  _x_2,R30
000489 93f0 2449 	STS  _x_2+1,R31
00048b 9360 244a 	STS  _x_2+2,R22
00048d 9370 244b 	STS  _x_2+3,R23
                 ; 0000 02C8 
                 ; 0000 02C9 if(x_6 > 0.8) // Speed Gain for Arm = 0.68552
                 _0x1C:
00048f 940e 105d 	CALL SUBOPT_0x1F
                +
000491 eced     +LDI R30 , LOW ( 0x3F4CCCCD )
000492 ecfc     +LDI R31 , HIGH ( 0x3F4CCCCD )
000493 e46c     +LDI R22 , BYTE3 ( 0x3F4CCCCD )
000494 e37f     +LDI R23 , BYTE4 ( 0x3F4CCCCD )
                 	__GETD1N 0x3F4CCCCD
000495 940e 1571 	CALL __CMPF12
000497 f009      	BREQ PC+2
000498 f410      	BRCC PC+3
000499 940c 049c 	JMP  _0x1D
                 ; 0000 02CA x_6 = 0.8;
00049b c009      	RJMP _0x137
                 ; 0000 02CB else if(x_2 < -0.8)
                 _0x1D:
00049c 940e 1054 	CALL SUBOPT_0x1E
                +
00049e eced     +LDI R30 , LOW ( 0xBF4CCCCD )
00049f ecfc     +LDI R31 , HIGH ( 0xBF4CCCCD )
0004a0 e46c     +LDI R22 , BYTE3 ( 0xBF4CCCCD )
0004a1 eb7f     +LDI R23 , BYTE4 ( 0xBF4CCCCD )
                 	__GETD1N 0xBF4CCCCD
0004a2 940e 1571 	CALL __CMPF12
0004a4 f440      	BRSH _0x1F
                 ; 0000 02CC x_6 = -0.8;
                 _0x137:
0004a5 93e0 245c 	STS  _x_6,R30
0004a7 93f0 245d 	STS  _x_6+1,R31
0004a9 9360 245e 	STS  _x_6+2,R22
0004ab 9370 245f 	STS  _x_6+3,R23
                 ; 0000 02CD 
                 ; 0000 02CE 
                 ; 0000 02CF 
                 ; 0000 02D0 /*** Put Limit on Event Generation ***/
                 ; 0000 02D1 // Reset Payload Angles
                 ; 0000 02D2 // Due to Quantization Effect because Encoders resolution is 0.0015 radians
                 ; 0000 02D3 // Allow for 5mm deviation from zero,, s = r*alpha => alpha = 0.005/0.6
                 ; 0000 02D4 //if(fabs(x_3) < 0.015) //  0.0083, 0.005 , 0.0
                 ; 0000 02D5 if(fabs(x_3) < 0.0)
                 _0x1F:
0004ad 940e 0fc2 	CALL SUBOPT_0xE
0004af 940e 15ef 	CALL __PUTPARD1
0004b1 940e 0dad 	CALL _fabs
0004b3 2377      	TST  R23
0004b4 f43a      	BRPL _0x20
                 ; 0000 02D6 {
                 ; 0000 02D7 w_3 = 1;
0004b5 940e 1066 	CALL SUBOPT_0x20
0004b7 940e 106b 	CALL SUBOPT_0x21
                 ; 0000 02D8 w_4 = 1;
0004b9 940e 1066 	CALL SUBOPT_0x20
0004bb c008      	RJMP _0x138
                 ; 0000 02D9 }
                 ; 0000 02DA else  // otherwise use default weights
                 _0x20:
                 ; 0000 02DB {
                 ; 0000 02DC w_3 = w_3_d;
0004bc 940e 1066 	CALL SUBOPT_0x20
0004be 940e 106b 	CALL SUBOPT_0x21
                 ; 0000 02DD w_4 = w_4_d;
                +
0004c0 e6ef     +LDI R30 , LOW ( 0x3A83126F )
0004c1 e1f2     +LDI R31 , HIGH ( 0x3A83126F )
0004c2 e863     +LDI R22 , BYTE3 ( 0x3A83126F )
0004c3 e37a     +LDI R23 , BYTE4 ( 0x3A83126F )
                 	__GETD1N 0x3A83126F
                 _0x138:
0004c4 93e0 24cc 	STS  _w_4,R30
0004c6 93f0 24cd 	STS  _w_4+1,R31
0004c8 9360 24ce 	STS  _w_4+2,R22
0004ca 9370 24cf 	STS  _w_4+3,R23
                 ; 0000 02DE }
                 ; 0000 02DF //if(fabs(x_7) < 0.015) //  0.0083 , 0.005, 0.0
                 ; 0000 02E0 if(fabs(x_7) < 0.0)
0004cc 940e 0fe4 	CALL SUBOPT_0x12
0004ce 940e 1074 	CALL SUBOPT_0x22
0004d0 2377      	TST  R23
0004d1 f42a      	BRPL _0x22
                 ; 0000 02E1 {
                 ; 0000 02E2 w_8 = 1;
0004d2 940e 1078 	CALL SUBOPT_0x23
                 ; 0000 02E3 w_9 = 1;
0004d4 940e 1066 	CALL SUBOPT_0x20
0004d6 c006      	RJMP _0x139
                 ; 0000 02E4 }
                 ; 0000 02E5 else  // otherwise use default weights
                 _0x22:
                 ; 0000 02E6 {
                 ; 0000 02E7 w_8 = w_8_d;
0004d7 940e 1078 	CALL SUBOPT_0x23
                 ; 0000 02E8 w_9 = w_9_d;
                +
0004d9 e6ef     +LDI R30 , LOW ( 0x3A83126F )
0004da e1f2     +LDI R31 , HIGH ( 0x3A83126F )
0004db e863     +LDI R22 , BYTE3 ( 0x3A83126F )
0004dc e37a     +LDI R23 , BYTE4 ( 0x3A83126F )
                 	__GETD1N 0x3A83126F
                 _0x139:
0004dd 93e0 24d4 	STS  _w_9,R30
0004df 93f0 24d5 	STS  _w_9+1,R31
0004e1 9360 24d6 	STS  _w_9+2,R22
0004e3 9370 24d7 	STS  _w_9+3,R23
                 ; 0000 02E9 }
                 ; 0000 02EA 
                 ; 0000 02EB 
                 ; 0000 02EC /**** Generate Reference Signal ****/
                 ; 0000 02ED count_ref +=1;
0004e5 91e0 250c 	LDS  R30,_count_ref
0004e7 91f0 250d 	LDS  R31,_count_ref+1
0004e9 9160 250e 	LDS  R22,_count_ref+2
0004eb 9170 250f 	LDS  R23,_count_ref+3
                +
0004ed 5fef     +SUBI R30 , LOW ( - 1 )
0004ee 4fff     +SBCI R31 , HIGH ( - 1 )
0004ef 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0004f0 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
0004f1 93e0 250c 	STS  _count_ref,R30
0004f3 93f0 250d 	STS  _count_ref+1,R31
0004f5 9360 250e 	STS  _count_ref+2,R22
0004f7 9370 250f 	STS  _count_ref+3,R23
                 ; 0000 02EE //if(count_ref == 3000)
                 ; 0000 02EF if(count_ref == (unsigned long)((float)20/h))
0004f9 940e 1006 	CALL SUBOPT_0x16
                +
0004fb e0a0     +LDI R26 , LOW ( 0x41A00000 )
0004fc e0b0     +LDI R27 , HIGH ( 0x41A00000 )
0004fd ea80     +LDI R24 , BYTE3 ( 0x41A00000 )
0004fe e491     +LDI R25 , BYTE4 ( 0x41A00000 )
                 	__GETD2N 0x41A00000
0004ff 940e 1082 	CALL SUBOPT_0x24
000501 f461      	BRNE _0x24
                 ; 0000 02F0 {
                 ; 0000 02F1 r_1 = 0.40;
                +
000502 eced     +LDI R30 , LOW ( 0x3ECCCCCD )
000503 ecfc     +LDI R31 , HIGH ( 0x3ECCCCCD )
000504 ec6c     +LDI R22 , BYTE3 ( 0x3ECCCCCD )
000505 e37e     +LDI R23 , BYTE4 ( 0x3ECCCCCD )
                 	__GETD1N 0x3ECCCCCD
000506 940e 1091 	CALL SUBOPT_0x25
                 ; 0000 02F2 r_2 = 2.3562; // 135 degree
                +
000508 efeb     +LDI R30 , LOW ( 0x4016CBFB )
000509 ecfb     +LDI R31 , HIGH ( 0x4016CBFB )
00050a e166     +LDI R22 , BYTE3 ( 0x4016CBFB )
00050b e470     +LDI R23 , BYTE4 ( 0x4016CBFB )
                 	__GETD1N 0x4016CBFB
00050c 940e 109a 	CALL SUBOPT_0x26
                 ; 0000 02F3 flag_ref = 1; // signal to integrator that new reference command is available
                 ; 0000 02F4 }
                 ; 0000 02F5 //if(count_ref == 6000)
                 ; 0000 02F6 if(count_ref == (unsigned long)((float)35/h))
                 _0x24:
00050e 940e 1006 	CALL SUBOPT_0x16
                +
000510 e0a0     +LDI R26 , LOW ( 0x420C0000 )
000511 e0b0     +LDI R27 , HIGH ( 0x420C0000 )
000512 e08c     +LDI R24 , BYTE3 ( 0x420C0000 )
000513 e492     +LDI R25 , BYTE4 ( 0x420C0000 )
                 	__GETD2N 0x420C0000
000514 940e 1082 	CALL SUBOPT_0x24
000516 f441      	BRNE _0x27
                 ; 0000 02F7 {
                 ; 0000 02F8 r_1 = 0.3;
                +
000517 e9ea     +LDI R30 , LOW ( 0x3E99999A )
000518 e9f9     +LDI R31 , HIGH ( 0x3E99999A )
000519 e969     +LDI R22 , BYTE3 ( 0x3E99999A )
00051a e37e     +LDI R23 , BYTE4 ( 0x3E99999A )
                 	__GETD1N 0x3E99999A
00051b 940e 10a4 	CALL SUBOPT_0x27
                 ; 0000 02F9 r_2 = home_theta;
00051d 940e 109a 	CALL SUBOPT_0x26
                 ; 0000 02FA flag_ref = 1; // signal to integrator that new reference command is available
                 ; 0000 02FB }
                 ; 0000 02FC 
                 ; 0000 02FD 
                 ; 0000 02FE 
                 ; 0000 02FF /*******  Computation of Event Generation Rule (EGR) ********/
                 ; 0000 0300 
                 ; 0000 0301 if(Periodic_ON == 0 && start_flag)    // IF ETC Selected
                 _0x27:
00051f e0a0      	LDI  R26,0
000520 9907      	SBIC 0x0,7
000521 e0a1      	LDI  R26,1
000522 30a0      	CPI  R26,LOW(0x0)
000523 f411      	BRNE _0x2B
000524 9901      	SBIC 0x0,1
000525 c001      	RJMP _0x2C
                 _0x2B:
000526 c354      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0302 {
                 ; 0000 0303     //  norm(e) >= sigma*norm(epsilon) + delta
                 ; 0000 0304     // Compute Norms
                 ; 0000 0305     // Shifted State Norm
                 ; 0000 0306     // x_a1* = -K11*r_1 , x_a2* = -K21*r_2
                 ; 0000 0307     norm_epsilon = sqrt((x_1 - r_1)*(x_1 - r_1) + x_2*x_2 + w_3*x_3*x_3 + w_4*x_4*x_4 + (x_a1 + K11*r_1)*(x_a1 + K11*r_1) + (x_5 - r_2)*(x_5 - r_2) + x_6*x_6 + w_8*x_7*x_7 + w_9*x_8*x_8 + (x_a2 + K21*r_2)*(x_a2 + K21*r_2));
000527 91a0 24d8 	LDS  R26,_r_1
000529 91b0 24d9 	LDS  R27,_r_1+1
00052b 9180 24da 	LDS  R24,_r_1+2
00052d 9190 24db 	LDS  R25,_r_1+3
00052f 940e 10ae 	CALL SUBOPT_0x28
000531 937f      	PUSH R23
000532 936f      	PUSH R22
000533 93ff      	PUSH R31
000534 93ef      	PUSH R30
000535 940e 10b6 	CALL SUBOPT_0x29
000537 940e 1054 	CALL SUBOPT_0x1E
000539 940e 14de 	CALL __MULF12
00053b 91af      	POP  R26
00053c 91bf      	POP  R27
00053d 918f      	POP  R24
00053e 919f      	POP  R25
00053f 940e 148e 	CALL __ADDF12
000541 937f      	PUSH R23
000542 936f      	PUSH R22
000543 93ff      	PUSH R31
000544 93ef      	PUSH R30
000545 940e 0fc2 	CALL SUBOPT_0xE
000547 91a0 24c8 	LDS  R26,_w_3
000549 91b0 24c9 	LDS  R27,_w_3+1
00054b 9180 24ca 	LDS  R24,_w_3+2
00054d 9190 24cb 	LDS  R25,_w_3+3
00054f 940e 14de 	CALL __MULF12
000551 91a0 244c 	LDS  R26,_x_3
000553 91b0 244d 	LDS  R27,_x_3+1
000555 9180 244e 	LDS  R24,_x_3+2
000557 9190 244f 	LDS  R25,_x_3+3
000559 940e 14de 	CALL __MULF12
00055b 91af      	POP  R26
00055c 91bf      	POP  R27
00055d 918f      	POP  R24
00055e 919f      	POP  R25
00055f 940e 148e 	CALL __ADDF12
000561 937f      	PUSH R23
000562 936f      	PUSH R22
000563 93ff      	PUSH R31
000564 93ef      	PUSH R30
000565 940e 10bf 	CALL SUBOPT_0x2A
000567 91a0 24cc 	LDS  R26,_w_4
000569 91b0 24cd 	LDS  R27,_w_4+1
00056b 9180 24ce 	LDS  R24,_w_4+2
00056d 9190 24cf 	LDS  R25,_w_4+3
00056f 940e 14de 	CALL __MULF12
000571 91a0 2450 	LDS  R26,_x_4
000573 91b0 2451 	LDS  R27,_x_4+1
000575 9180 2452 	LDS  R24,_x_4+2
000577 9190 2453 	LDS  R25,_x_4+3
000579 940e 14de 	CALL __MULF12
00057b 91af      	POP  R26
00057c 91bf      	POP  R27
00057d 918f      	POP  R24
00057e 919f      	POP  R25
00057f 940e 148e 	CALL __ADDF12
000581 937f      	PUSH R23
000582 936f      	PUSH R22
000583 93ff      	PUSH R31
000584 93ef      	PUSH R30
000585 940e 10c8 	CALL SUBOPT_0x2B
000587 937f      	PUSH R23
000588 936f      	PUSH R22
000589 93ff      	PUSH R31
00058a 93ef      	PUSH R30
00058b 940e 10c8 	CALL SUBOPT_0x2B
00058d 91af      	POP  R26
00058e 91bf      	POP  R27
00058f 918f      	POP  R24
000590 919f      	POP  R25
000591 940e 14de 	CALL __MULF12
000593 91af      	POP  R26
000594 91bf      	POP  R27
000595 918f      	POP  R24
000596 919f      	POP  R25
000597 940e 148e 	CALL __ADDF12
000599 937f      	PUSH R23
00059a 936f      	PUSH R22
00059b 93ff      	PUSH R31
00059c 93ef      	PUSH R30
00059d 940e 10e1 	CALL SUBOPT_0x2C
00059f 937f      	PUSH R23
0005a0 936f      	PUSH R22
0005a1 93ff      	PUSH R31
0005a2 93ef      	PUSH R30
0005a3 940e 10e1 	CALL SUBOPT_0x2C
0005a5 91af      	POP  R26
0005a6 91bf      	POP  R27
0005a7 918f      	POP  R24
0005a8 919f      	POP  R25
0005a9 940e 14de 	CALL __MULF12
0005ab 91af      	POP  R26
0005ac 91bf      	POP  R27
0005ad 918f      	POP  R24
0005ae 919f      	POP  R25
0005af 940e 148e 	CALL __ADDF12
0005b1 937f      	PUSH R23
0005b2 936f      	PUSH R22
0005b3 93ff      	PUSH R31
0005b4 93ef      	PUSH R30
0005b5 940e 10ed 	CALL SUBOPT_0x2D
0005b7 940e 105d 	CALL SUBOPT_0x1F
0005b9 940e 14de 	CALL __MULF12
0005bb 91af      	POP  R26
0005bc 91bf      	POP  R27
0005bd 918f      	POP  R24
0005be 919f      	POP  R25
0005bf 940e 148e 	CALL __ADDF12
0005c1 937f      	PUSH R23
0005c2 936f      	PUSH R22
0005c3 93ff      	PUSH R31
0005c4 93ef      	PUSH R30
0005c5 940e 0fe4 	CALL SUBOPT_0x12
0005c7 91a0 24d0 	LDS  R26,_w_8
0005c9 91b0 24d1 	LDS  R27,_w_8+1
0005cb 9180 24d2 	LDS  R24,_w_8+2
0005cd 9190 24d3 	LDS  R25,_w_8+3
0005cf 940e 14de 	CALL __MULF12
0005d1 91a0 2460 	LDS  R26,_x_7
0005d3 91b0 2461 	LDS  R27,_x_7+1
0005d5 9180 2462 	LDS  R24,_x_7+2
0005d7 9190 2463 	LDS  R25,_x_7+3
0005d9 940e 14de 	CALL __MULF12
0005db 91af      	POP  R26
0005dc 91bf      	POP  R27
0005dd 918f      	POP  R24
0005de 919f      	POP  R25
0005df 940e 148e 	CALL __ADDF12
0005e1 937f      	PUSH R23
0005e2 936f      	PUSH R22
0005e3 93ff      	PUSH R31
0005e4 93ef      	PUSH R30
0005e5 940e 10f6 	CALL SUBOPT_0x2E
0005e7 91a0 24d4 	LDS  R26,_w_9
0005e9 91b0 24d5 	LDS  R27,_w_9+1
0005eb 9180 24d6 	LDS  R24,_w_9+2
0005ed 9190 24d7 	LDS  R25,_w_9+3
0005ef 940e 14de 	CALL __MULF12
0005f1 91a0 2464 	LDS  R26,_x_8
0005f3 91b0 2465 	LDS  R27,_x_8+1
0005f5 9180 2466 	LDS  R24,_x_8+2
0005f7 9190 2467 	LDS  R25,_x_8+3
0005f9 940e 14de 	CALL __MULF12
0005fb 91af      	POP  R26
0005fc 91bf      	POP  R27
0005fd 918f      	POP  R24
0005fe 919f      	POP  R25
0005ff 940e 148e 	CALL __ADDF12
000601 937f      	PUSH R23
000602 936f      	PUSH R22
000603 93ff      	PUSH R31
000604 93ef      	PUSH R30
000605 940e 10ff 	CALL SUBOPT_0x2F
000607 937f      	PUSH R23
000608 936f      	PUSH R22
000609 93ff      	PUSH R31
00060a 93ef      	PUSH R30
00060b 940e 10ff 	CALL SUBOPT_0x2F
00060d 91af      	POP  R26
00060e 91bf      	POP  R27
00060f 918f      	POP  R24
000610 919f      	POP  R25
000611 940e 14de 	CALL __MULF12
000613 91af      	POP  R26
000614 91bf      	POP  R27
000615 918f      	POP  R24
000616 919f      	POP  R25
000617 940e 1118 	CALL SUBOPT_0x30
000619 93e0 24c4 	STS  _norm_epsilon,R30
00061b 93f0 24c5 	STS  _norm_epsilon+1,R31
00061d 9360 24c6 	STS  _norm_epsilon+2,R22
00061f 9370 24c7 	STS  _norm_epsilon+3,R23
                 ; 0000 0308 
                 ; 0000 0309     // Measurement Error Norm, Left Hand Side of EGR
                 ; 0000 030A     norm_e = sqrt((x_1 - x_1_tk)*(x_1 - x_1_tk) + (x_2 - x_2_tk)*(x_2 - x_2_tk) + (x_3 - x_3_tk)*(x_3 - x_3_tk) + (x_4 - x_4_tk)*(x_4 - x_4_tk) + (x_a1 - x_a1_tk)*(x_a1 - x_a1_tk) + (x_5 - x_5_tk)*(x_5 - x_5_tk) + (x_6 - x_6_tk)*(x_6 - x_6_000621 91a0 2498 tk) + (x_7 - x_7_tk)*(x_7 - x_7_tk) + (x_8 - x_8_tk)*(x_8 - x_8_tk) + (x_a2 - x_a2_tk)*(x_a2 - x_a2_tk));
000623 91b0 2499 	LDS  R26,_x_1_tk
000625 9180 249a 	LDS  R27,_x_1_tk+1
000627 9190 249b 	LDS  R24,_x_1_tk+2
000629 940e 10ae 	LDS  R25,_x_1_tk+3
00062b 937f      	CALL SUBOPT_0x28
00062c 936f      	PUSH R23
00062d 93ff      	PUSH R22
00062e 93ef      	PUSH R31
00062f 940e 111e 	PUSH R30
000631 937f      	CALL SUBOPT_0x31
000632 936f      	PUSH R23
000633 93ff      	PUSH R22
000634 93ef      	PUSH R31
000635 940e 111e 	PUSH R30
000637 91af      	CALL SUBOPT_0x31
000638 91bf      	POP  R26
000639 918f      	POP  R27
00063a 919f      	POP  R24
00063b 940e 14de 	POP  R25
00063d 91af      	CALL __MULF12
00063e 91bf      	POP  R26
00063f 918f      	POP  R27
000640 919f      	POP  R24
000641 940e 148e 	POP  R25
000643 937f      	CALL __ADDF12
000644 936f      	PUSH R23
000645 93ff      	PUSH R22
000646 93ef      	PUSH R31
000647 940e 112a 	PUSH R30
000649 937f      	CALL SUBOPT_0x32
00064a 936f      	PUSH R23
00064b 93ff      	PUSH R22
00064c 93ef      	PUSH R31
00064d 940e 112a 	PUSH R30
00064f 91af      	CALL SUBOPT_0x32
000650 91bf      	POP  R26
000651 918f      	POP  R27
000652 919f      	POP  R24
000653 940e 14de 	POP  R25
000655 91af      	CALL __MULF12
000656 91bf      	POP  R26
000657 918f      	POP  R27
000658 919f      	POP  R24
000659 940e 148e 	POP  R25
00065b 937f      	CALL __ADDF12
00065c 936f      	PUSH R23
00065d 93ff      	PUSH R22
00065e 93ef      	PUSH R31
00065f 940e 1136 	PUSH R30
000661 937f      	CALL SUBOPT_0x33
000662 936f      	PUSH R23
000663 93ff      	PUSH R22
000664 93ef      	PUSH R31
000665 940e 1136 	PUSH R30
000667 91af      	CALL SUBOPT_0x33
000668 91bf      	POP  R26
000669 918f      	POP  R27
00066a 919f      	POP  R24
00066b 940e 14de 	POP  R25
00066d 91af      	CALL __MULF12
00066e 91bf      	POP  R26
00066f 918f      	POP  R27
000670 919f      	POP  R24
000671 940e 148e 	POP  R25
000673 937f      	CALL __ADDF12
000674 936f      	PUSH R23
000675 93ff      	PUSH R22
000676 93ef      	PUSH R31
000677 940e 1142 	PUSH R30
000679 937f      	CALL SUBOPT_0x34
00067a 936f      	PUSH R23
00067b 93ff      	PUSH R22
00067c 93ef      	PUSH R31
00067d 940e 1142 	PUSH R30
00067f 91af      	CALL SUBOPT_0x34
000680 91bf      	POP  R26
000681 918f      	POP  R27
000682 919f      	POP  R24
000683 940e 14de 	POP  R25
000685 91af      	CALL __MULF12
000686 91bf      	POP  R26
000687 918f      	POP  R27
000688 919f      	POP  R24
000689 940e 148e 	POP  R25
00068b 937f      	CALL __ADDF12
00068c 936f      	PUSH R23
00068d 93ff      	PUSH R22
00068e 93ef      	PUSH R31
00068f 940e 1155 	PUSH R30
000691 937f      	CALL SUBOPT_0x35
000692 936f      	PUSH R23
000693 93ff      	PUSH R22
000694 93ef      	PUSH R31
000695 940e 1155 	PUSH R30
000697 91af      	CALL SUBOPT_0x35
000698 91bf      	POP  R26
000699 918f      	POP  R27
00069a 919f      	POP  R24
00069b 940e 14de 	POP  R25
00069d 91af      	CALL __MULF12
00069e 91bf      	POP  R26
00069f 918f      	POP  R27
0006a0 919f      	POP  R24
0006a1 940e 148e 	POP  R25
0006a3 937f      	CALL __ADDF12
0006a4 936f      	PUSH R23
0006a5 93ff      	PUSH R22
0006a6 93ef      	PUSH R31
0006a7 940e 1161 	PUSH R30
0006a9 937f      	CALL SUBOPT_0x36
0006aa 936f      	PUSH R23
0006ab 93ff      	PUSH R22
0006ac 93ef      	PUSH R31
0006ad 940e 1161 	PUSH R30
0006af 91af      	CALL SUBOPT_0x36
0006b0 91bf      	POP  R26
0006b1 918f      	POP  R27
0006b2 919f      	POP  R24
0006b3 940e 14de 	POP  R25
0006b5 91af      	CALL __MULF12
0006b6 91bf      	POP  R26
0006b7 918f      	POP  R27
0006b8 919f      	POP  R24
0006b9 940e 148e 	POP  R25
0006bb 937f      	CALL __ADDF12
0006bc 936f      	PUSH R23
0006bd 93ff      	PUSH R22
0006be 93ef      	PUSH R31
0006bf 940e 116d 	PUSH R30
0006c1 937f      	CALL SUBOPT_0x37
0006c2 936f      	PUSH R23
0006c3 93ff      	PUSH R22
0006c4 93ef      	PUSH R31
0006c5 940e 116d 	PUSH R30
0006c7 91af      	CALL SUBOPT_0x37
0006c8 91bf      	POP  R26
0006c9 918f      	POP  R27
0006ca 919f      	POP  R24
0006cb 940e 14de 	POP  R25
0006cd 91af      	CALL __MULF12
0006ce 91bf      	POP  R26
0006cf 918f      	POP  R27
0006d0 919f      	POP  R24
0006d1 940e 148e 	POP  R25
0006d3 937f      	CALL __ADDF12
0006d4 936f      	PUSH R23
0006d5 93ff      	PUSH R22
0006d6 93ef      	PUSH R31
0006d7 940e 1179 	PUSH R30
0006d9 937f      	CALL SUBOPT_0x38
0006da 936f      	PUSH R23
0006db 93ff      	PUSH R22
0006dc 93ef      	PUSH R31
0006dd 940e 1179 	PUSH R30
0006df 91af      	CALL SUBOPT_0x38
0006e0 91bf      	POP  R26
0006e1 918f      	POP  R27
0006e2 919f      	POP  R24
0006e3 940e 14de 	POP  R25
0006e5 91af      	CALL __MULF12
0006e6 91bf      	POP  R26
0006e7 918f      	POP  R27
0006e8 919f      	POP  R24
0006e9 940e 148e 	POP  R25
0006eb 937f      	CALL __ADDF12
0006ec 936f      	PUSH R23
0006ed 93ff      	PUSH R22
0006ee 93ef      	PUSH R31
0006ef 940e 1185 	PUSH R30
0006f1 937f      	CALL SUBOPT_0x39
0006f2 936f      	PUSH R23
0006f3 93ff      	PUSH R22
0006f4 93ef      	PUSH R31
0006f5 940e 1185 	PUSH R30
0006f7 91af      	CALL SUBOPT_0x39
0006f8 91bf      	POP  R26
0006f9 918f      	POP  R27
0006fa 919f      	POP  R24
0006fb 940e 14de 	POP  R25
0006fd 91af      	CALL __MULF12
0006fe 91bf      	POP  R26
0006ff 918f      	POP  R27
000700 919f      	POP  R24
000701 940e 1118 	POP  R25
000703 93e0 24c0 	CALL SUBOPT_0x30
000705 93f0 24c1 	STS  _norm_e,R30
000707 9360 24c2 	STS  _norm_e+1,R31
000709 9370 24c3 	STS  _norm_e+2,R22
                 	STS  _norm_e+3,R23
                 ; 0000 030B 
00070b 91e0 24c4 ; 0000 030C     if((norm_e >= (sigma*norm_epsilon + delta)) && start_flag) // uncomment for ETC
00070d 91f0 24c5 	LDS  R30,_norm_epsilon
00070f 9160 24c6 	LDS  R31,_norm_epsilon+1
000711 9170 24c7 	LDS  R22,_norm_epsilon+2
                +
000713 e6af     +LDI R26 , LOW ( 0x3C03126F )
000714 e1b2     +LDI R27 , HIGH ( 0x3C03126F )
000715 e083     +LDI R24 , BYTE3 ( 0x3C03126F )
000716 e39c     +LDI R25 , BYTE4 ( 0x3C03126F )
                 	__GETD2N 0x3C03126F
000717 940e 14de 	CALL __MULF12
                +
000719 ecad     +LDI R26 , LOW ( 0x3D4CCCCD )
00071a ecbc     +LDI R27 , HIGH ( 0x3D4CCCCD )
00071b e48c     +LDI R24 , BYTE3 ( 0x3D4CCCCD )
00071c e39d     +LDI R25 , BYTE4 ( 0x3D4CCCCD )
                 	__GETD2N 0x3D4CCCCD
00071d 940e 148e 	CALL __ADDF12
00071f 91a0 24c0 	LDS  R26,_norm_e
000721 91b0 24c1 	LDS  R27,_norm_e+1
000723 9180 24c2 	LDS  R24,_norm_e+2
000725 9190 24c3 	LDS  R25,_norm_e+3
000727 940e 1571 	CALL __CMPF12
000729 f010      	BRLO _0x2E
00072a 9901      	SBIC 0x0,1
00072b c001      	RJMP _0x2F
                 _0x2E:
00072c c14d      	RJMP _0x2D
                 _0x2F:
                 ; 0000 030D     //if(start_flag) // uncomment for periodic TTC
                 ; 0000 030E     {
                 ; 0000 030F 
                 ; 0000 0310         //iterations += 1;
                 ; 0000 0311 
                 ; 0000 0312         //if(iterations == 3)
                 ; 0000 0313         //if(iterations > 0)
                 ; 0000 0314         {
                 ; 0000 0315 
                 ; 0000 0316             /*** Compute the control Signal ***/
                 ; 0000 0317             // Controller For Trolley
                 ; 0000 0318             v_1 = K11*x_1 + K12*x_2 + K13*(x_3) + K14*(x_4) + x_a1;
00072d 940e 1198 	CALL SUBOPT_0x3A
00072f 937f      	PUSH R23
000730 936f      	PUSH R22
000731 93ff      	PUSH R31
000732 93ef      	PUSH R30
000733 940e 11a0 	CALL SUBOPT_0x3B
000735 91af      	POP  R26
000736 91bf      	POP  R27
000737 918f      	POP  R24
000738 919f      	POP  R25
000739 940e 148e 	CALL __ADDF12
00073b 937f      	PUSH R23
00073c 936f      	PUSH R22
00073d 93ff      	PUSH R31
00073e 93ef      	PUSH R30
00073f 940e 11a8 	CALL SUBOPT_0x3C
000741 91af      	POP  R26
000742 91bf      	POP  R27
000743 918f      	POP  R24
000744 919f      	POP  R25
000745 940e 148e 	CALL __ADDF12
000747 937f      	PUSH R23
000748 936f      	PUSH R22
000749 93ff      	PUSH R31
00074a 93ef      	PUSH R30
00074b 940e 11b0 	CALL SUBOPT_0x3D
00074d 91af      	POP  R26
00074e 91bf      	POP  R27
00074f 918f      	POP  R24
000750 919f      	POP  R25
000751 940e 11b8 	CALL SUBOPT_0x3E
                 ; 0000 0319             // Note that x_3 and x_4 are not negated opposed to what was suggested in thesis because while hacking crane
                 ; 0000 031A             // we did wirig in way such that signals gets inverted and are already on the form as mentioned in thesis
                 ; 0000 031B 
                 ; 0000 031C             // Controller For Arm
                 ; 0000 031D             v_2 = K21*x_5 + K22*x_6 + K23*x_7 + K24*x_8 + x_a2;
000753 940e 11cd 	CALL SUBOPT_0x3F
000755 937f      	PUSH R23
000756 936f      	PUSH R22
000757 93ff      	PUSH R31
000758 93ef      	PUSH R30
000759 940e 11d5 	CALL SUBOPT_0x40
00075b 91af      	POP  R26
00075c 91bf      	POP  R27
00075d 918f      	POP  R24
00075e 919f      	POP  R25
00075f 940e 148e 	CALL __ADDF12
000761 937f      	PUSH R23
000762 936f      	PUSH R22
000763 93ff      	PUSH R31
000764 93ef      	PUSH R30
000765 940e 11dd 	CALL SUBOPT_0x41
000767 91af      	POP  R26
000768 91bf      	POP  R27
000769 918f      	POP  R24
00076a 919f      	POP  R25
00076b 940e 148e 	CALL __ADDF12
00076d 937f      	PUSH R23
00076e 936f      	PUSH R22
00076f 93ff      	PUSH R31
000770 93ef      	PUSH R30
000771 940e 11e5 	CALL SUBOPT_0x42
000773 91af      	POP  R26
000774 91bf      	POP  R27
000775 918f      	POP  R24
000776 919f      	POP  R25
000777 940e 11ed 	CALL SUBOPT_0x43
                 ; 0000 031E 
                 ; 0000 031F             // Saturate the output control signal
                 ; 0000 0320             // Saturate Trolley Control Signal
                 ; 0000 0321             if(v_1 > 1.0)
000779 f009      	BREQ PC+2
00077a f410      	BRCC PC+3
00077b 940c 0780 	JMP  _0x30
                 ; 0000 0322             u_1 = 1.0;
00077d 940e 1066 	CALL SUBOPT_0x20
00077f c008      	RJMP _0x13A
                 ; 0000 0323             else if(v_1 < -1.0)
                 _0x30:
000780 940e 120d 	CALL SUBOPT_0x44
000782 f418      	BRSH _0x32
                 ; 0000 0324             u_1 = -1.0;
000783 940e 121c 	CALL SUBOPT_0x45
000785 c002      	RJMP _0x13A
                 ; 0000 0325             else
                 _0x32:
                 ; 0000 0326             u_1 = v_1;
000786 940e 1221 	CALL SUBOPT_0x46
                 _0x13A:
000788 93e0 24e8 	STS  _u_1,R30
00078a 93f0 24e9 	STS  _u_1+1,R31
00078c 9360 24ea 	STS  _u_1+2,R22
00078e 9370 24eb 	STS  _u_1+3,R23
                 ; 0000 0327 
                 ; 0000 0328             // Saturate Arm Control Signal
                 ; 0000 0329             if(v_2 > 1.0)
000790 940e 122a 	CALL SUBOPT_0x47
000792 940e 1066 	CALL SUBOPT_0x20
000794 940e 1571 	CALL __CMPF12
000796 f009      	BREQ PC+2
000797 f410      	BRCC PC+3
000798 940c 079d 	JMP  _0x34
                 ; 0000 032A             u_2 = 1.0;
00079a 940e 1066 	CALL SUBOPT_0x20
00079c c008      	RJMP _0x13B
                 ; 0000 032B             else if(v_2 < -1.0)
                 _0x34:
00079d 940e 1233 	CALL SUBOPT_0x48
00079f f418      	BRSH _0x36
                 ; 0000 032C             u_2 = -1.0;
0007a0 940e 121c 	CALL SUBOPT_0x45
0007a2 c002      	RJMP _0x13B
                 ; 0000 032D             else
                 _0x36:
                 ; 0000 032E             u_2 = v_2;
0007a3 940e 1238 	CALL SUBOPT_0x49
                 _0x13B:
0007a5 93e0 24ec 	STS  _u_2,R30
0007a7 93f0 24ed 	STS  _u_2+1,R31
0007a9 9360 24ee 	STS  _u_2+2,R22
0007ab 9370 24ef 	STS  _u_2+3,R23
                 ; 0000 032F 
                 ; 0000 0330             // Flag for Start of Transmission to measure loop Delay
                 ; 0000 0331             //PORTF.OUTTGL = PIN6_bm;
                 ; 0000 0332 
                 ; 0000 0333             /***** SEND THE DATA OVER SERIAL RS232 *****/
                 ; 0000 0334 
                 ; 0000 0335             // Transmit only if it is first transmission or the diference between two consecutive is greater than 30ms
                 ; 0000 0336             if(((iterations - iterations_old) >= 3) || first_transmission)
0007ad 91a0 2508 	LDS  R26,_iterations_old
0007af 91b0 2509 	LDS  R27,_iterations_old+1
0007b1 9180 250a 	LDS  R24,_iterations_old+2
0007b3 9190 250b 	LDS  R25,_iterations_old+3
0007b5 940e 0f52 	CALL SUBOPT_0x2
0007b7 940e 15c7 	CALL __SUBD12
                +
0007b9 30e3     +CPI R30 , LOW ( 0x3 )
0007ba e0a0     +LDI R26 , HIGH ( 0x3 )
0007bb 07fa     +CPC R31 , R26
0007bc e0a0     +LDI R26 , BYTE3 ( 0x3 )
0007bd 076a     +CPC R22 , R26
0007be e0a0     +LDI R26 , BYTE4 ( 0x3 )
0007bf 077a     +CPC R23 , R26
                 	__CPD1N 0x3
0007c0 f410      	BRSH _0x39
0007c1 9b08      	SBIS 0x1,0
0007c2 c0b7      	RJMP _0x38
                 _0x39:
                 ; 0000 0337             {
                 ; 0000 0338             // SEND CONTROL DATA IN RAW FROM
                 ; 0000 0339             //Send Control Signal For Trolley, u_1
                 ; 0000 033A             p = (unsigned char *) & u_1;
                +
0007c3 ee08     +LDI R16 , LOW ( _u_1 )
0007c4 e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 033B             for (i=0; i<4; i++)
0007c5 e030      	LDI  R19,LOW(0)
                 _0x3C:
0007c6 3034      	CPI  R19,4
0007c7 f420      	BRSH _0x3D
                 ; 0000 033C             {
                 ; 0000 033D              putchar_usartf0( *p++ );
0007c8 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 033E             }
0007ca 5f3f      	SUBI R19,-1
0007cb cffa      	RJMP _0x3C
                 _0x3D:
                 ; 0000 033F             // Send Control Signal For Arm, u_2
                 ; 0000 0340             p = (unsigned char *) & u_2;
                +
0007cc ee0c     +LDI R16 , LOW ( _u_2 )
0007cd e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 0341             for (i=0; i<4; i++)
0007ce e030      	LDI  R19,LOW(0)
                 _0x3F:
0007cf 3034      	CPI  R19,4
0007d0 f420      	BRSH _0x40
                 ; 0000 0342             {
                 ; 0000 0343              putchar_usartf0( *p++ );
0007d1 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0344             }
0007d3 5f3f      	SUBI R19,-1
0007d4 cffa      	RJMP _0x3F
                 _0x40:
                 ; 0000 0345             // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 0346             //Send Reference Signal For Trolley, r_1
                 ; 0000 0347             p = (unsigned char *) & r_1;
                +
0007d5 ed08     +LDI R16 , LOW ( _r_1 )
0007d6 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 0348             for (i=0; i<4; i++)
0007d7 e030      	LDI  R19,LOW(0)
                 _0x42:
0007d8 3034      	CPI  R19,4
0007d9 f420      	BRSH _0x43
                 ; 0000 0349             {
                 ; 0000 034A              putchar_usartf0( *p++ );
0007da 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 034B             }
0007dc 5f3f      	SUBI R19,-1
0007dd cffa      	RJMP _0x42
                 _0x43:
                 ; 0000 034C             // Send Reference Signal For Arm, r_2
                 ; 0000 034D             p = (unsigned char *) & r_2;
                +
0007de ed0c     +LDI R16 , LOW ( _r_2 )
0007df e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 034E             for (i=0; i<4; i++)
0007e0 e030      	LDI  R19,LOW(0)
                 _0x45:
0007e1 3034      	CPI  R19,4
0007e2 f420      	BRSH _0x46
                 ; 0000 034F             {
                 ; 0000 0350              putchar_usartf0( *p++ );
0007e3 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0351             }
0007e5 5f3f      	SUBI R19,-1
0007e6 cffa      	RJMP _0x45
                 _0x46:
                 ; 0000 0352 
                 ; 0000 0353             // SEND Trolley and Arm Position DATA IN RAW FORM (Just for Debug Purposes)
                 ; 0000 0354             //Send Trolley Data, x_1 and x_2
                 ; 0000 0355             p = (unsigned char *) & x_1;
                +
0007e7 e404     +LDI R16 , LOW ( _x_1 )
0007e8 e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 0356             for (i=0; i<4; i++)
0007e9 e030      	LDI  R19,LOW(0)
                 _0x48:
0007ea 3034      	CPI  R19,4
0007eb f420      	BRSH _0x49
                 ; 0000 0357             {
                 ; 0000 0358              putchar_usartf0( *p++ );
0007ec 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0359             }
0007ee 5f3f      	SUBI R19,-1
0007ef cffa      	RJMP _0x48
                 _0x49:
                 ; 0000 035A             // Send Trolley Speed, x_2
                 ; 0000 035B             p = (unsigned char *) & x_2;
                +
0007f0 e408     +LDI R16 , LOW ( _x_2 )
0007f1 e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 035C             for (i=0; i<4; i++)
0007f2 e030      	LDI  R19,LOW(0)
                 _0x4B:
0007f3 3034      	CPI  R19,4
0007f4 f420      	BRSH _0x4C
                 ; 0000 035D             {
                 ; 0000 035E              putchar_usartf0( *p++ );
0007f5 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 035F             }
0007f7 5f3f      	SUBI R19,-1
0007f8 cffa      	RJMP _0x4B
                 _0x4C:
                 ; 0000 0360 
                 ; 0000 0361             //Send Arm Data, x_5 and x_6
                 ; 0000 0362             p = (unsigned char *) & x_5;
                +
0007f9 e508     +LDI R16 , LOW ( _x_5 )
0007fa e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 0363             for (i=0; i<4; i++)
0007fb e030      	LDI  R19,LOW(0)
                 _0x4E:
0007fc 3034      	CPI  R19,4
0007fd f420      	BRSH _0x4F
                 ; 0000 0364             {
                 ; 0000 0365              putchar_usartf0( *p++ );
0007fe 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0366             }
000800 5f3f      	SUBI R19,-1
000801 cffa      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0367             // Send Arm Speed, x_6
                 ; 0000 0368             p = (unsigned char *) & x_6;
                +
000802 e50c     +LDI R16 , LOW ( _x_6 )
000803 e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 0369             for (i=0; i<4; i++)
000804 e030      	LDI  R19,LOW(0)
                 _0x51:
000805 3034      	CPI  R19,4
000806 f420      	BRSH _0x52
                 ; 0000 036A             {
                 ; 0000 036B              putchar_usartf0( *p++ );
000807 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 036C             }
000809 5f3f      	SUBI R19,-1
00080a cffa      	RJMP _0x51
                 _0x52:
                 ; 0000 036D             iterations_old = iterations;
00080b 940e 0f52 	CALL SUBOPT_0x2
00080d 93e0 2508 	STS  _iterations_old,R30
00080f 93f0 2509 	STS  _iterations_old+1,R31
000811 9360 250a 	STS  _iterations_old+2,R22
000813 9370 250b 	STS  _iterations_old+3,R23
                 ; 0000 036E             first_transmission = 0;
000815 9808      	CBI  0x1,0
                 ; 0000 036F             // Store the state value at the time of transmission of currrent trigger/event
                 ; 0000 0370             x_1_tk = x_1;
000816 940e 0fa9 	CALL SUBOPT_0xB
000818 93e0 2498 	STS  _x_1_tk,R30
00081a 93f0 2499 	STS  _x_1_tk+1,R31
00081c 9360 249a 	STS  _x_1_tk+2,R22
00081e 9370 249b 	STS  _x_1_tk+3,R23
                 ; 0000 0371             x_2_tk = x_2;
000820 940e 10b6 	CALL SUBOPT_0x29
000822 93e0 249c 	STS  _x_2_tk,R30
000824 93f0 249d 	STS  _x_2_tk+1,R31
000826 9360 249e 	STS  _x_2_tk+2,R22
000828 9370 249f 	STS  _x_2_tk+3,R23
                 ; 0000 0372             x_3_tk = x_3;
00082a 940e 0fc2 	CALL SUBOPT_0xE
00082c 93e0 24a0 	STS  _x_3_tk,R30
00082e 93f0 24a1 	STS  _x_3_tk+1,R31
000830 9360 24a2 	STS  _x_3_tk+2,R22
000832 9370 24a3 	STS  _x_3_tk+3,R23
                 ; 0000 0373             x_4_tk = x_4;
000834 940e 10bf 	CALL SUBOPT_0x2A
000836 93e0 24a4 	STS  _x_4_tk,R30
000838 93f0 24a5 	STS  _x_4_tk+1,R31
00083a 9360 24a6 	STS  _x_4_tk+2,R22
00083c 9370 24a7 	STS  _x_4_tk+3,R23
                 ; 0000 0374             x_a1_tk = x_a1;
00083e 940e 1248 	CALL SUBOPT_0x4B
000840 93e0 24a8 	STS  _x_a1_tk,R30
000842 93f0 24a9 	STS  _x_a1_tk+1,R31
000844 9360 24aa 	STS  _x_a1_tk+2,R22
000846 9370 24ab 	STS  _x_a1_tk+3,R23
                 ; 0000 0375             x_5_tk = x_5;
000848 940e 0fdb 	CALL SUBOPT_0x11
00084a 93e0 24ac 	STS  _x_5_tk,R30
00084c 93f0 24ad 	STS  _x_5_tk+1,R31
00084e 9360 24ae 	STS  _x_5_tk+2,R22
000850 9370 24af 	STS  _x_5_tk+3,R23
                 ; 0000 0376             x_6_tk = x_6;
000852 940e 10ed 	CALL SUBOPT_0x2D
000854 93e0 24b0 	STS  _x_6_tk,R30
000856 93f0 24b1 	STS  _x_6_tk+1,R31
000858 9360 24b2 	STS  _x_6_tk+2,R22
00085a 9370 24b3 	STS  _x_6_tk+3,R23
                 ; 0000 0377             x_7_tk = x_7;
00085c 940e 0fe4 	CALL SUBOPT_0x12
00085e 93e0 24b4 	STS  _x_7_tk,R30
000860 93f0 24b5 	STS  _x_7_tk+1,R31
000862 9360 24b6 	STS  _x_7_tk+2,R22
000864 9370 24b7 	STS  _x_7_tk+3,R23
                 ; 0000 0378             x_8_tk = x_8;
000866 940e 10f6 	CALL SUBOPT_0x2E
000868 93e0 24b8 	STS  _x_8_tk,R30
00086a 93f0 24b9 	STS  _x_8_tk+1,R31
00086c 9360 24ba 	STS  _x_8_tk+2,R22
00086e 9370 24bb 	STS  _x_8_tk+3,R23
                 ; 0000 0379             x_a2_tk = x_a2;
000870 940e 1251 	CALL SUBOPT_0x4C
000872 93e0 24bc 	STS  _x_a2_tk,R30
000874 93f0 24bd 	STS  _x_a2_tk+1,R31
000876 9360 24be 	STS  _x_a2_tk+2,R22
000878 9370 24bf 	STS  _x_a2_tk+3,R23
                 ; 0000 037A             }
                 ; 0000 037B 
                 ; 0000 037C         }
                 _0x38:
                 ; 0000 037D 
                 ; 0000 037E     };
                 _0x2D:
                 ; 0000 037F 
                 ; 0000 0380 }
                 ; 0000 0381 
                 ; 0000 0382 
                 ; 0000 0383 
                 ; 0000 0384 /******* Compute Periodic Controller if it is selected *******/
                 ; 0000 0385 else if(Periodic_ON == 1 && start_flag)  // If periodic Selected
00087a c0fe      	RJMP _0x55
                 _0x2A:
00087b 9b07      	SBIS 0x0,7
00087c c002      	RJMP _0x57
00087d 9901      	SBIC 0x0,1
00087e c001      	RJMP _0x58
                 _0x57:
00087f c0f9      	RJMP _0x56
                 _0x58:
                 ; 0000 0386 {
                 ; 0000 0387     /*** Compute the control Signal ***/
                 ; 0000 0388     // Controller For Trolley
                 ; 0000 0389     v_1 = K11*x_1 + K12*x_2 + K13*(x_3) + K14*(x_4) + x_a1;
000880 940e 1198 	CALL SUBOPT_0x3A
000882 937f      	PUSH R23
000883 936f      	PUSH R22
000884 93ff      	PUSH R31
000885 93ef      	PUSH R30
000886 940e 11a0 	CALL SUBOPT_0x3B
000888 91af      	POP  R26
000889 91bf      	POP  R27
00088a 918f      	POP  R24
00088b 919f      	POP  R25
00088c 940e 148e 	CALL __ADDF12
00088e 937f      	PUSH R23
00088f 936f      	PUSH R22
000890 93ff      	PUSH R31
000891 93ef      	PUSH R30
000892 940e 11a8 	CALL SUBOPT_0x3C
000894 91af      	POP  R26
000895 91bf      	POP  R27
000896 918f      	POP  R24
000897 919f      	POP  R25
000898 940e 148e 	CALL __ADDF12
00089a 937f      	PUSH R23
00089b 936f      	PUSH R22
00089c 93ff      	PUSH R31
00089d 93ef      	PUSH R30
00089e 940e 11b0 	CALL SUBOPT_0x3D
0008a0 91af      	POP  R26
0008a1 91bf      	POP  R27
0008a2 918f      	POP  R24
0008a3 919f      	POP  R25
0008a4 940e 11b8 	CALL SUBOPT_0x3E
                 ; 0000 038A     // Note that x_3 and x_4 are not negated opposed to what was suggested in thesis because while hacking crane
                 ; 0000 038B     // we did wirig in way such that signals gets inverted and are already on the form as mentioned in thesis
                 ; 0000 038C     u_11 = K11*x_1 + K12*x_2 + K13*(x_3) + K14*(x_4);
0008a6 940e 1198 	CALL SUBOPT_0x3A
0008a8 937f      	PUSH R23
0008a9 936f      	PUSH R22
0008aa 93ff      	PUSH R31
0008ab 93ef      	PUSH R30
0008ac 940e 11a0 	CALL SUBOPT_0x3B
0008ae 91af      	POP  R26
0008af 91bf      	POP  R27
0008b0 918f      	POP  R24
0008b1 919f      	POP  R25
0008b2 940e 148e 	CALL __ADDF12
0008b4 937f      	PUSH R23
0008b5 936f      	PUSH R22
0008b6 93ff      	PUSH R31
0008b7 93ef      	PUSH R30
0008b8 940e 11a8 	CALL SUBOPT_0x3C
0008ba 91af      	POP  R26
0008bb 91bf      	POP  R27
0008bc 918f      	POP  R24
0008bd 919f      	POP  R25
0008be 940e 148e 	CALL __ADDF12
0008c0 937f      	PUSH R23
0008c1 936f      	PUSH R22
0008c2 93ff      	PUSH R31
0008c3 93ef      	PUSH R30
0008c4 940e 11b0 	CALL SUBOPT_0x3D
0008c6 91af      	POP  R26
0008c7 91bf      	POP  R27
0008c8 918f      	POP  R24
0008c9 919f      	POP  R25
0008ca 940e 148e 	CALL __ADDF12
0008cc 93e0 24f8 	STS  _u_11,R30
0008ce 93f0 24f9 	STS  _u_11+1,R31
0008d0 9360 24fa 	STS  _u_11+2,R22
0008d2 9370 24fb 	STS  _u_11+3,R23
                 ; 0000 038D     // Controller For Arm
                 ; 0000 038E     v_2 = K21*x_5 + K22*x_6 + K23*x_7 + K24*x_8 + x_a2;
0008d4 940e 11cd 	CALL SUBOPT_0x3F
0008d6 937f      	PUSH R23
0008d7 936f      	PUSH R22
0008d8 93ff      	PUSH R31
0008d9 93ef      	PUSH R30
0008da 940e 11d5 	CALL SUBOPT_0x40
0008dc 91af      	POP  R26
0008dd 91bf      	POP  R27
0008de 918f      	POP  R24
0008df 919f      	POP  R25
0008e0 940e 148e 	CALL __ADDF12
0008e2 937f      	PUSH R23
0008e3 936f      	PUSH R22
0008e4 93ff      	PUSH R31
0008e5 93ef      	PUSH R30
0008e6 940e 11dd 	CALL SUBOPT_0x41
0008e8 91af      	POP  R26
0008e9 91bf      	POP  R27
0008ea 918f      	POP  R24
0008eb 919f      	POP  R25
0008ec 940e 148e 	CALL __ADDF12
0008ee 937f      	PUSH R23
0008ef 936f      	PUSH R22
0008f0 93ff      	PUSH R31
0008f1 93ef      	PUSH R30
0008f2 940e 11e5 	CALL SUBOPT_0x42
0008f4 91af      	POP  R26
0008f5 91bf      	POP  R27
0008f6 918f      	POP  R24
0008f7 919f      	POP  R25
0008f8 940e 11ed 	CALL SUBOPT_0x43
                 ; 0000 038F 
                 ; 0000 0390     // Saturate the output control signal
                 ; 0000 0391     // Saturate Trolley Control Signal
                 ; 0000 0392     if(v_1 > 1.0)
0008fa f009      	BREQ PC+2
0008fb f410      	BRCC PC+3
0008fc 940c 0901 	JMP  _0x59
                 ; 0000 0393     u_1 = 1.0;
0008fe 940e 1066 	CALL SUBOPT_0x20
000900 c008      	RJMP _0x13C
                 ; 0000 0394     else if(v_1 < -1.0)
                 _0x59:
000901 940e 120d 	CALL SUBOPT_0x44
000903 f418      	BRSH _0x5B
                 ; 0000 0395     u_1 = -1.0;
000904 940e 121c 	CALL SUBOPT_0x45
000906 c002      	RJMP _0x13C
                 ; 0000 0396     else
                 _0x5B:
                 ; 0000 0397     u_1 = v_1;
000907 940e 1221 	CALL SUBOPT_0x46
                 _0x13C:
000909 93e0 24e8 	STS  _u_1,R30
00090b 93f0 24e9 	STS  _u_1+1,R31
00090d 9360 24ea 	STS  _u_1+2,R22
00090f 9370 24eb 	STS  _u_1+3,R23
                 ; 0000 0398 
                 ; 0000 0399     // Saturate Arm Control Signal
                 ; 0000 039A     if(v_2 > 1.0)
000911 940e 122a 	CALL SUBOPT_0x47
000913 940e 1066 	CALL SUBOPT_0x20
000915 940e 1571 	CALL __CMPF12
000917 f009      	BREQ PC+2
000918 f410      	BRCC PC+3
000919 940c 091e 	JMP  _0x5D
                 ; 0000 039B     u_2 = 1.0;
00091b 940e 1066 	CALL SUBOPT_0x20
00091d c008      	RJMP _0x13D
                 ; 0000 039C     else if(v_2 < -1.0)
                 _0x5D:
00091e 940e 1233 	CALL SUBOPT_0x48
000920 f418      	BRSH _0x5F
                 ; 0000 039D     u_2 = -1.0;
000921 940e 121c 	CALL SUBOPT_0x45
000923 c002      	RJMP _0x13D
                 ; 0000 039E     else
                 _0x5F:
                 ; 0000 039F     u_2 = v_2;
000924 940e 1238 	CALL SUBOPT_0x49
                 _0x13D:
000926 93e0 24ec 	STS  _u_2,R30
000928 93f0 24ed 	STS  _u_2+1,R31
00092a 9360 24ee 	STS  _u_2+2,R22
00092c 9370 24ef 	STS  _u_2+3,R23
                 ; 0000 03A0 
                 ; 0000 03A1     // Flag for Start of Transmission to measure loop Delay
                 ; 0000 03A2     //PORTF.OUTTGL = PIN6_bm;
                 ; 0000 03A3 
                 ; 0000 03A4     /***** SEND THE DATA OVER SERIAL RS232 *****/
                 ; 0000 03A5 
                 ; 0000 03A6     // Trigger to tell we gonna send the data
                 ; 0000 03A7     // used just for testing purpose
                 ; 0000 03A8     PORTF.OUTTGL = PIN6_bm;
00092e e4e0      	LDI  R30,LOW(64)
00092f 93e0 06a7 	STS  1703,R30
                 ; 0000 03A9 
                 ; 0000 03AA     // SEND CONTROL DATA IN RAW FROM
                 ; 0000 03AB     //Send Control Signal For Trolley, u_1
                 ; 0000 03AC     p = (unsigned char *) & u_1;
                +
000931 ee08     +LDI R16 , LOW ( _u_1 )
000932 e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 03AD     for (i=0; i<4; i++)
000933 e030      	LDI  R19,LOW(0)
                 _0x62:
000934 3034      	CPI  R19,4
000935 f420      	BRSH _0x63
                 ; 0000 03AE     {
                 ; 0000 03AF      putchar_usartf0( *p++ );
000936 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03B0     }
000938 5f3f      	SUBI R19,-1
000939 cffa      	RJMP _0x62
                 _0x63:
                 ; 0000 03B1     // Send Control Signal For Arm, u_2
                 ; 0000 03B2     p = (unsigned char *) & u_2;
                +
00093a ee0c     +LDI R16 , LOW ( _u_2 )
00093b e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 03B3     for (i=0; i<4; i++)
00093c e030      	LDI  R19,LOW(0)
                 _0x65:
00093d 3034      	CPI  R19,4
00093e f420      	BRSH _0x66
                 ; 0000 03B4     {
                 ; 0000 03B5      putchar_usartf0( *p++ );
00093f 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03B6     }
000941 5f3f      	SUBI R19,-1
000942 cffa      	RJMP _0x65
                 _0x66:
                 ; 0000 03B7 
                 ; 0000 03B8 
                 ; 0000 03B9     // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 03BA     //Send Reference Signal For Trolley, r_1
                 ; 0000 03BB     p = (unsigned char *) & r_1;
                +
000943 ed08     +LDI R16 , LOW ( _r_1 )
000944 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 03BC     for (i=0; i<4; i++)
000945 e030      	LDI  R19,LOW(0)
                 _0x68:
000946 3034      	CPI  R19,4
000947 f420      	BRSH _0x69
                 ; 0000 03BD     {
                 ; 0000 03BE      putchar_usartf0( *p++ );
000948 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03BF     }
00094a 5f3f      	SUBI R19,-1
00094b cffa      	RJMP _0x68
                 _0x69:
                 ; 0000 03C0     // Send Reference Signal For Arm, r_2
                 ; 0000 03C1     p = (unsigned char *) & r_2;
                +
00094c ed0c     +LDI R16 , LOW ( _r_2 )
00094d e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 03C2     for (i=0; i<4; i++)
00094e e030      	LDI  R19,LOW(0)
                 _0x6B:
00094f 3034      	CPI  R19,4
000950 f420      	BRSH _0x6C
                 ; 0000 03C3     {
                 ; 0000 03C4      putchar_usartf0( *p++ );
000951 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03C5     }
000953 5f3f      	SUBI R19,-1
000954 cffa      	RJMP _0x6B
                 _0x6C:
                 ; 0000 03C6 
                 ; 0000 03C7     // SEND Trolley and Arm Position DATA IN RAW FORM (Just for Visual Fedback)
                 ; 0000 03C8     //Send Trolley Data, x_1 and x_2
                 ; 0000 03C9     p = (unsigned char *) & x_1;
                +
000955 e404     +LDI R16 , LOW ( _x_1 )
000956 e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 03CA     for (i=0; i<4; i++)
000957 e030      	LDI  R19,LOW(0)
                 _0x6E:
000958 3034      	CPI  R19,4
000959 f420      	BRSH _0x6F
                 ; 0000 03CB     {
                 ; 0000 03CC      putchar_usartf0( *p++ );
00095a 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03CD     }
00095c 5f3f      	SUBI R19,-1
00095d cffa      	RJMP _0x6E
                 _0x6F:
                 ; 0000 03CE     // Send Trolley Speed, x_2
                 ; 0000 03CF     p = (unsigned char *) & x_2;
                +
00095e e408     +LDI R16 , LOW ( _x_2 )
00095f e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 03D0     for (i=0; i<4; i++)
000960 e030      	LDI  R19,LOW(0)
                 _0x71:
000961 3034      	CPI  R19,4
000962 f420      	BRSH _0x72
                 ; 0000 03D1     {
                 ; 0000 03D2      putchar_usartf0( *p++ );
000963 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03D3     }
000965 5f3f      	SUBI R19,-1
000966 cffa      	RJMP _0x71
                 _0x72:
                 ; 0000 03D4 
                 ; 0000 03D5     //Send Arm Data, x_5 and x_6
                 ; 0000 03D6     //x_test = (float)Pos_Count_HCTL_1;
                 ; 0000 03D7     p = (unsigned char *) & x_5;
                +
000967 e508     +LDI R16 , LOW ( _x_5 )
000968 e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 03D8     for (i=0; i<4; i++)
000969 e030      	LDI  R19,LOW(0)
                 _0x74:
00096a 3034      	CPI  R19,4
00096b f420      	BRSH _0x75
                 ; 0000 03D9     {
                 ; 0000 03DA      putchar_usartf0( *p++ );
00096c 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03DB     }
00096e 5f3f      	SUBI R19,-1
00096f cffa      	RJMP _0x74
                 _0x75:
                 ; 0000 03DC     // Send Arm Speed, x_6
                 ; 0000 03DD     p = (unsigned char *) & x_6;
                +
000970 e50c     +LDI R16 , LOW ( _x_6 )
000971 e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 03DE     for (i=0; i<4; i++)
000972 e030      	LDI  R19,LOW(0)
                 _0x77:
000973 3034      	CPI  R19,4
000974 f420      	BRSH _0x78
                 ; 0000 03DF     {
                 ; 0000 03E0      putchar_usartf0( *p++ );
000975 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 03E1     }
000977 5f3f      	SUBI R19,-1
000978 cffa      	RJMP _0x77
                 _0x78:
                 ; 0000 03E2 
                 ; 0000 03E3 };
                 _0x56:
                 _0x55:
                 ; 0000 03E4 
                 ; 0000 03E5 /*********** Estimate Integrator State ***********/
                 ; 0000 03E6 // Note that bi1 = K15*h , bi2 = K25*h , a01 = h/Tt1 and a02 = h/Tt2
                 ; 0000 03E7 if(start_flag == 1)
000979 9b01      	SBIS 0x0,1
00097a c09e      	RJMP _0x79
                 ; 0000 03E8 {
                 ; 0000 03E9 if((fabs(r_1 - x_1) > 0.005*r_1) || flag_ref ) // epsilon = 0.005  ,,,0.01
00097b 940e 125a 	CALL SUBOPT_0x4D
00097d 940e 1074 	CALL SUBOPT_0x22
00097f 937f      	PUSH R23
000980 936f      	PUSH R22
000981 93ff      	PUSH R31
000982 93ef      	PUSH R30
000983 91e0 24d8 	LDS  R30,_r_1
000985 91f0 24d9 	LDS  R31,_r_1+1
000987 9160 24da 	LDS  R22,_r_1+2
000989 9170 24db 	LDS  R23,_r_1+3
00098b 940e 126d 	CALL SUBOPT_0x4E
00098d 91af      	POP  R26
00098e 91bf      	POP  R27
00098f 918f      	POP  R24
000990 919f      	POP  R25
000991 940e 1571 	CALL __CMPF12
000993 f019      	BREQ PC+4
000994 f010      	BRCS PC+3
000995 940c 0999 	JMP  _0x7B
000997 9b09      	SBIS 0x1,1
000998 c034      	RJMP _0x7A
                 _0x7B:
                 ; 0000 03EA x_a1 = x_a1_old + bi1*(r_1 - x_1) + 0.2*(u_1 - v_1); // 1.5 ,,,0.6
000999 940e 125a 	CALL SUBOPT_0x4D
00099b 91a0 2434 	LDS  R26,_bi1
00099d 91b0 2435 	LDS  R27,_bi1+1
00099f 9180 2436 	LDS  R24,_bi1+2
0009a1 9190 2437 	LDS  R25,_bi1+3
0009a3 940e 14de 	CALL __MULF12
0009a5 91a0 248c 	LDS  R26,_x_a1_old
0009a7 91b0 248d 	LDS  R27,_x_a1_old+1
0009a9 9180 248e 	LDS  R24,_x_a1_old+2
0009ab 9190 248f 	LDS  R25,_x_a1_old+3
0009ad 940e 148e 	CALL __ADDF12
0009af 937f      	PUSH R23
0009b0 936f      	PUSH R22
0009b1 93ff      	PUSH R31
0009b2 93ef      	PUSH R30
0009b3 91a0 24fc 	LDS  R26,_v_1
0009b5 91b0 24fd 	LDS  R27,_v_1+1
0009b7 9180 24fe 	LDS  R24,_v_1+2
0009b9 9190 24ff 	LDS  R25,_v_1+3
0009bb 940e 1274 	CALL SUBOPT_0x4F
0009bd 940e 127d 	CALL SUBOPT_0x50
0009bf 91af      	POP  R26
0009c0 91bf      	POP  R27
0009c1 918f      	POP  R24
0009c2 919f      	POP  R25
0009c3 940e 148e 	CALL __ADDF12
0009c5 93e0 2454 	STS  _x_a1,R30
0009c7 93f0 2455 	STS  _x_a1+1,R31
0009c9 9360 2456 	STS  _x_a1+2,R22
0009cb 9370 2457 	STS  _x_a1+3,R23
                 ; 0000 03EB if((fabs(r_2 - x_5) > 0.005*r_2) || flag_ref ) // there was a mistake here x_2 instead of x_5 was written. epsilon = 0.005,,,0.01
                 _0x7A:
0009cd 940e 1286 	CALL SUBOPT_0x51
0009cf 940e 1074 	CALL SUBOPT_0x22
0009d1 937f      	PUSH R23
0009d2 936f      	PUSH R22
0009d3 93ff      	PUSH R31
0009d4 93ef      	PUSH R30
0009d5 91e0 24dc 	LDS  R30,_r_2
0009d7 91f0 24dd 	LDS  R31,_r_2+1
0009d9 9160 24de 	LDS  R22,_r_2+2
0009db 9170 24df 	LDS  R23,_r_2+3
0009dd 940e 126d 	CALL SUBOPT_0x4E
0009df 91af      	POP  R26
0009e0 91bf      	POP  R27
0009e1 918f      	POP  R24
0009e2 919f      	POP  R25
0009e3 940e 1571 	CALL __CMPF12
0009e5 f019      	BREQ PC+4
0009e6 f010      	BRCS PC+3
0009e7 940c 09eb 	JMP  _0x7E
0009e9 9b09      	SBIS 0x1,1
0009ea c02e      	RJMP _0x7D
                 _0x7E:
                 ; 0000 03EC x_a2 = x_a2_old + bi2*(r_2 - x_5) + 0.2*(u_2 - v_2);  //1.5 ,,0.3,,, 0.6 ,,,0.6
0009eb 940e 1286 	CALL SUBOPT_0x51
0009ed 91a0 2438 	LDS  R26,_bi2
0009ef 91b0 2439 	LDS  R27,_bi2+1
0009f1 9180 243a 	LDS  R24,_bi2+2
0009f3 9190 243b 	LDS  R25,_bi2+3
0009f5 940e 14de 	CALL __MULF12
0009f7 91a0 2490 	LDS  R26,_x_a2_old
0009f9 91b0 2491 	LDS  R27,_x_a2_old+1
0009fb 9180 2492 	LDS  R24,_x_a2_old+2
0009fd 9190 2493 	LDS  R25,_x_a2_old+3
0009ff 940e 148e 	CALL __ADDF12
000a01 937f      	PUSH R23
000a02 936f      	PUSH R22
000a03 93ff      	PUSH R31
000a04 93ef      	PUSH R30
000a05 940e 122a 	CALL SUBOPT_0x47
000a07 940e 1299 	CALL SUBOPT_0x52
000a09 940e 127d 	CALL SUBOPT_0x50
000a0b 91af      	POP  R26
000a0c 91bf      	POP  R27
000a0d 918f      	POP  R24
000a0e 919f      	POP  R25
000a0f 940e 148e 	CALL __ADDF12
000a11 93e0 2468 	STS  _x_a2,R30
000a13 93f0 2469 	STS  _x_a2+1,R31
000a15 9360 246a 	STS  _x_a2+2,R22
000a17 9370 246b 	STS  _x_a2+3,R23
                 ; 0000 03ED }
                 _0x7D:
                 ; 0000 03EE 
                 ; 0000 03EF /***** Store Current State for use in next (plant) sampling step *******/
                 ; 0000 03F0 x_1_old = x_1;
                 _0x79:
000a19 940e 0fa9 	CALL SUBOPT_0xB
000a1b 93e0 246c 	STS  _x_1_old,R30
000a1d 93f0 246d 	STS  _x_1_old+1,R31
000a1f 9360 246e 	STS  _x_1_old+2,R22
000a21 9370 246f 	STS  _x_1_old+3,R23
                 ; 0000 03F1 x_2_old = x_2;
000a23 940e 10b6 	CALL SUBOPT_0x29
000a25 93e0 2470 	STS  _x_2_old,R30
000a27 93f0 2471 	STS  _x_2_old+1,R31
000a29 9360 2472 	STS  _x_2_old+2,R22
000a2b 9370 2473 	STS  _x_2_old+3,R23
                 ; 0000 03F2 x_3_old = x_3;
000a2d 940e 0fc2 	CALL SUBOPT_0xE
000a2f 93e0 2474 	STS  _x_3_old,R30
000a31 93f0 2475 	STS  _x_3_old+1,R31
000a33 9360 2476 	STS  _x_3_old+2,R22
000a35 9370 2477 	STS  _x_3_old+3,R23
                 ; 0000 03F3 x_4_old = x_4;
000a37 940e 10bf 	CALL SUBOPT_0x2A
000a39 93e0 2478 	STS  _x_4_old,R30
000a3b 93f0 2479 	STS  _x_4_old+1,R31
000a3d 9360 247a 	STS  _x_4_old+2,R22
000a3f 9370 247b 	STS  _x_4_old+3,R23
                 ; 0000 03F4 x_5_old = x_5;
000a41 940e 0fdb 	CALL SUBOPT_0x11
000a43 93e0 247c 	STS  _x_5_old,R30
000a45 93f0 247d 	STS  _x_5_old+1,R31
000a47 9360 247e 	STS  _x_5_old+2,R22
000a49 9370 247f 	STS  _x_5_old+3,R23
                 ; 0000 03F5 x_6_old = x_6;
000a4b 940e 10ed 	CALL SUBOPT_0x2D
000a4d 93e0 2480 	STS  _x_6_old,R30
000a4f 93f0 2481 	STS  _x_6_old+1,R31
000a51 9360 2482 	STS  _x_6_old+2,R22
000a53 9370 2483 	STS  _x_6_old+3,R23
                 ; 0000 03F6 x_7_old = x_7;
000a55 940e 0fe4 	CALL SUBOPT_0x12
000a57 93e0 2484 	STS  _x_7_old,R30
000a59 93f0 2485 	STS  _x_7_old+1,R31
000a5b 9360 2486 	STS  _x_7_old+2,R22
000a5d 9370 2487 	STS  _x_7_old+3,R23
                 ; 0000 03F7 x_8_old = x_8;
000a5f 940e 10f6 	CALL SUBOPT_0x2E
000a61 93e0 2488 	STS  _x_8_old,R30
000a63 93f0 2489 	STS  _x_8_old+1,R31
000a65 9360 248a 	STS  _x_8_old+2,R22
000a67 9370 248b 	STS  _x_8_old+3,R23
                 ; 0000 03F8 u_1_old = u_1;
000a69 940e 1274 	CALL SUBOPT_0x4F
000a6b 93e0 24f0 	STS  _u_1_old,R30
000a6d 93f0 24f1 	STS  _u_1_old+1,R31
000a6f 9360 24f2 	STS  _u_1_old+2,R22
000a71 9370 24f3 	STS  _u_1_old+3,R23
                 ; 0000 03F9 u_2_old = u_2;
000a73 940e 1299 	CALL SUBOPT_0x52
000a75 93e0 24f4 	STS  _u_2_old,R30
000a77 93f0 24f5 	STS  _u_2_old+1,R31
000a79 9360 24f6 	STS  _u_2_old+2,R22
000a7b 9370 24f7 	STS  _u_2_old+3,R23
                 ; 0000 03FA x_a1_old = x_a1;
000a7d 940e 1248 	CALL SUBOPT_0x4B
000a7f 93e0 248c 	STS  _x_a1_old,R30
000a81 93f0 248d 	STS  _x_a1_old+1,R31
000a83 9360 248e 	STS  _x_a1_old+2,R22
000a85 9370 248f 	STS  _x_a1_old+3,R23
                 ; 0000 03FB x_a2_old = x_a2;
000a87 940e 1251 	CALL SUBOPT_0x4C
000a89 93e0 2490 	STS  _x_a2_old,R30
000a8b 93f0 2491 	STS  _x_a2_old+1,R31
000a8d 9360 2492 	STS  _x_a2_old+2,R22
000a8f 9370 2493 	STS  _x_a2_old+3,R23
                 ; 0000 03FC 
                 ; 0000 03FD flag_ref = 0;  // Bring the flag down to make it ready for next reference update
000a91 9809      	CBI  0x1,1
                 ; 0000 03FE 
                 ; 0000 03FF //PORTF.OUTTGL = PIN6_bm;
                 ; 0000 0400 
                 ; 0000 0401 }
000a92 c054      	RJMP _0x13E
                 ;
                 ;// PORTK interrupt 0 service routine
                 ;interrupt [PORTK_INT0_vect] void portk_int0_isr(void)
                 ; 0000 0405 {
                 _portk_int0_isr:
000a93 940e 0f42 	CALL SUBOPT_0x1
                 ; 0000 0406 // write your code here
                 ; 0000 0407 unsigned char * p;
                 ; 0000 0408 unsigned char i;
                 ; 0000 0409 
                 ; 0000 040A // Reset all controller states
                 ; 0000 040B u_1 = 0;
                 ;	*p -> R16,R17
                 ;	i -> R19
000a95 940e 12a2 	CALL SUBOPT_0x53
                 ; 0000 040C u_2 = 0;
                 ; 0000 040D v_1 = 0;
000a97 940e 12b4 	CALL SUBOPT_0x54
                 ; 0000 040E v_2 = 0;
                 ; 0000 040F x_a1 = 0;
000a99 940e 12c6 	CALL SUBOPT_0x55
                 ; 0000 0410 x_a1_old = 0;
                 ; 0000 0411 x_a1_tk = 0;
                 ; 0000 0412 x_a2 = 0;
                 ; 0000 0413 x_a2_old = 0;
                 ; 0000 0414 x_a2_tk = 0;
                 ; 0000 0415 start_flag = 0;
000a9b 9801      	CBI  0x0,1
                 ; 0000 0416 
                 ; 0000 0417 //Added Later
                 ; 0000 0418 u_1_old = 0;
000a9c e0e0      	LDI  R30,LOW(0)
000a9d 940e 12f8 	CALL SUBOPT_0x56
                 ; 0000 0419 u_2_old = 0;
                 ; 0000 041A 
                 ; 0000 041B 
                 ; 0000 041C // SEND DATA IN RAW FROM
                 ; 0000 041D //Send Control Signal For Trolley, u_1
                 ; 0000 041E p = (unsigned char *) & u_1;
                +
000a9f ee08     +LDI R16 , LOW ( _u_1 )
000aa0 e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 041F for (i=0; i<4; i++)
000aa1 e030      	LDI  R19,LOW(0)
                 _0x85:
000aa2 3034      	CPI  R19,4
000aa3 f420      	BRSH _0x86
                 ; 0000 0420 {
                 ; 0000 0421 putchar_usartf0( *p++ );
000aa4 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0422 }
000aa6 5f3f      	SUBI R19,-1
000aa7 cffa      	RJMP _0x85
                 _0x86:
                 ; 0000 0423 
                 ; 0000 0424 // Send Control Signal For Arm, u_2
                 ; 0000 0425 p = (unsigned char *) & u_2;
                +
000aa8 ee0c     +LDI R16 , LOW ( _u_2 )
000aa9 e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 0426 for (i=0; i<4; i++)
000aaa e030      	LDI  R19,LOW(0)
                 _0x88:
000aab 3034      	CPI  R19,4
000aac f420      	BRSH _0x89
                 ; 0000 0427 {
                 ; 0000 0428 putchar_usartf0( *p++ );
000aad 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0429 }
000aaf 5f3f      	SUBI R19,-1
000ab0 cffa      	RJMP _0x88
                 _0x89:
                 ; 0000 042A 
                 ; 0000 042B // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 042C //Send Reference Signal For Trolley, r_1
                 ; 0000 042D p = (unsigned char *) & r_1;
                +
000ab1 ed08     +LDI R16 , LOW ( _r_1 )
000ab2 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 042E for (i=0; i<4; i++)
000ab3 e030      	LDI  R19,LOW(0)
                 _0x8B:
000ab4 3034      	CPI  R19,4
000ab5 f420      	BRSH _0x8C
                 ; 0000 042F {
                 ; 0000 0430  putchar_usartf0( *p++ );
000ab6 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0431 }
000ab8 5f3f      	SUBI R19,-1
000ab9 cffa      	RJMP _0x8B
                 _0x8C:
                 ; 0000 0432 // Send Reference Signal For Arm, r_2
                 ; 0000 0433 p = (unsigned char *) & r_2;
                +
000aba ed0c     +LDI R16 , LOW ( _r_2 )
000abb e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 0434 for (i=0; i<4; i++)
000abc e030      	LDI  R19,LOW(0)
                 _0x8E:
000abd 3034      	CPI  R19,4
000abe f420      	BRSH _0x8F
                 ; 0000 0435 {
                 ; 0000 0436  putchar_usartf0( *p++ );
000abf 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0437 }
000ac1 5f3f      	SUBI R19,-1
000ac2 cffa      	RJMP _0x8E
                 _0x8F:
                 ; 0000 0438 
                 ; 0000 0439 // SEND Trolley and Arm Position DATA as well to maintain the same data length
                 ; 0000 043A //Send Trolley Data, x_1 and x_2
                 ; 0000 043B p = (unsigned char *) & x_1;
                +
000ac3 e404     +LDI R16 , LOW ( _x_1 )
000ac4 e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 043C for (i=0; i<4; i++)
000ac5 e030      	LDI  R19,LOW(0)
                 _0x91:
000ac6 3034      	CPI  R19,4
000ac7 f420      	BRSH _0x92
                 ; 0000 043D {
                 ; 0000 043E  putchar_usartf0( *p++ );
000ac8 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 043F }
000aca 5f3f      	SUBI R19,-1
000acb cffa      	RJMP _0x91
                 _0x92:
                 ; 0000 0440 // Send Trolley Speed, x_2
                 ; 0000 0441 p = (unsigned char *) & x_2;
                +
000acc e408     +LDI R16 , LOW ( _x_2 )
000acd e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 0442 for (i=0; i<4; i++)
000ace e030      	LDI  R19,LOW(0)
                 _0x94:
000acf 3034      	CPI  R19,4
000ad0 f420      	BRSH _0x95
                 ; 0000 0443 {
                 ; 0000 0444  putchar_usartf0( *p++ );
000ad1 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0445 }
000ad3 5f3f      	SUBI R19,-1
000ad4 cffa      	RJMP _0x94
                 _0x95:
                 ; 0000 0446 
                 ; 0000 0447 //Send Arm Data, x_5 and x_6
                 ; 0000 0448 p = (unsigned char *) & x_5;
                +
000ad5 e508     +LDI R16 , LOW ( _x_5 )
000ad6 e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 0449 for (i=0; i<4; i++)
000ad7 e030      	LDI  R19,LOW(0)
                 _0x97:
000ad8 3034      	CPI  R19,4
000ad9 f420      	BRSH _0x98
                 ; 0000 044A {
                 ; 0000 044B  putchar_usartf0( *p++ );
000ada 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 044C }
000adc 5f3f      	SUBI R19,-1
000add cffa      	RJMP _0x97
                 _0x98:
                 ; 0000 044D // Send Arm Speed, x_6
                 ; 0000 044E p = (unsigned char *) & x_6;
                +
000ade e50c     +LDI R16 , LOW ( _x_6 )
000adf e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 044F for (i=0; i<4; i++)
000ae0 e030      	LDI  R19,LOW(0)
                 _0x9A:
000ae1 3034      	CPI  R19,4
000ae2 f420      	BRSH _0x9B
                 ; 0000 0450 {
                 ; 0000 0451  putchar_usartf0( *p++ );
000ae3 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0452 }
000ae5 5f3f      	SUBI R19,-1
000ae6 cffa      	RJMP _0x9A
                 _0x9B:
                 ; 0000 0453 
                 ; 0000 0454 }
                 _0x13E:
000ae7 940e 160f 	CALL __LOADLOCR4
000ae9 9624      	ADIW R28,4
000aea 91e9      	LD   R30,Y+
000aeb bfef      	OUT  SREG,R30
000aec 91f9      	LD   R31,Y+
000aed 91e9      	LD   R30,Y+
000aee 91b9      	LD   R27,Y+
000aef 91a9      	LD   R26,Y+
000af0 9199      	LD   R25,Y+
000af1 9189      	LD   R24,Y+
000af2 9179      	LD   R23,Y+
000af3 9169      	LD   R22,Y+
000af4 90f9      	LD   R15,Y+
000af5 9019      	LD   R1,Y+
000af6 9009      	LD   R0,Y+
000af7 9518      	RETI
                 ;
                 ;// Ports initialization
                 ;void ports_init(void)
                 ; 0000 0458 {
                 _ports_init:
                 ; 0000 0459 // PORTF initialization
                 ; 0000 045A // OUT register
                 ; 0000 045B PORTF.OUT=0x08;
000af8 e0e8      	LDI  R30,LOW(8)
000af9 93e0 06a4 	STS  1700,R30
                 ; 0000 045C // Bit0: Input
                 ; 0000 045D // Bit1: Input
                 ; 0000 045E // Bit2: Input
                 ; 0000 045F // Bit3: Output
                 ; 0000 0460 // Bit4: Input
                 ; 0000 0461 // Bit5: Input
                 ; 0000 0462 // Bit6: Input
                 ; 0000 0463 // Bit7: Input
                 ; 0000 0464 PORTF.DIR=0x08;
000afb 93e0 06a0 	STS  1696,R30
                 ; 0000 0465 // Bit0 Output/Pull configuration: Totempole/No
                 ; 0000 0466 // Bit0 Input/Sense configuration: Sense both edges
                 ; 0000 0467 // Bit0 inverted: Off
                 ; 0000 0468 // Bit0 slew rate limitation: Off
                 ; 0000 0469 PORTF.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000afd e0e0      	LDI  R30,LOW(0)
000afe 93e0 06b0 	STS  1712,R30
                 ; 0000 046A // Bit1 Output/Pull configuration: Totempole/No
                 ; 0000 046B // Bit1 Input/Sense configuration: Sense both edges
                 ; 0000 046C // Bit1 inverted: Off
                 ; 0000 046D // Bit1 slew rate limitation: Off
                 ; 0000 046E PORTF.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b00 93e0 06b1 	STS  1713,R30
                 ; 0000 046F // Bit2 Output/Pull configuration: Totempole/No
                 ; 0000 0470 // Bit2 Input/Sense configuration: Sense both edges
                 ; 0000 0471 // Bit2 inverted: Off
                 ; 0000 0472 // Bit2 slew rate limitation: Off
                 ; 0000 0473 PORTF.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b02 93e0 06b2 	STS  1714,R30
                 ; 0000 0474 // Bit3 Output/Pull configuration: Totempole/No
                 ; 0000 0475 // Bit3 Input/Sense configuration: Sense both edges
                 ; 0000 0476 // Bit3 inverted: Off
                 ; 0000 0477 // Bit3 slew rate limitation: Off
                 ; 0000 0478 PORTF.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b04 93e0 06b3 	STS  1715,R30
                 ; 0000 0479 // Bit4 Output/Pull configuration: Totempole/No
                 ; 0000 047A // Bit4 Input/Sense configuration: Sense both edges
                 ; 0000 047B // Bit4 inverted: Off
                 ; 0000 047C // Bit4 slew rate limitation: Off
                 ; 0000 047D PORTF.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b06 93e0 06b4 	STS  1716,R30
                 ; 0000 047E // Bit5 Output/Pull configuration: Totempole/No
                 ; 0000 047F // Bit5 Input/Sense configuration: Sense both edges
                 ; 0000 0480 // Bit5 inverted: Off
                 ; 0000 0481 // Bit5 slew rate limitation: Off
                 ; 0000 0482 PORTF.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b08 93e0 06b5 	STS  1717,R30
                 ; 0000 0483 // Bit6 Output/Pull configuration: Totempole/No
                 ; 0000 0484 // Bit6 Input/Sense configuration: Sense both edges
                 ; 0000 0485 // Bit6 inverted: Off
                 ; 0000 0486 // Bit6 slew rate limitation: Off
                 ; 0000 0487 PORTF.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b0a 93e0 06b6 	STS  1718,R30
                 ; 0000 0488 // Bit7 Output/Pull configuration: Totempole/No
                 ; 0000 0489 // Bit7 Input/Sense configuration: Sense both edges
                 ; 0000 048A // Bit7 inverted: Off
                 ; 0000 048B // Bit7 slew rate limitation: Off
                 ; 0000 048C PORTF.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
000b0c 93e0 06b7 	STS  1719,R30
                 ; 0000 048D // Interrupt 0 level: Disabled
                 ; 0000 048E // Interrupt 1 level: Disabled
                 ; 0000 048F PORTF.INTCTRL=(PORTF.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
                 ; 0000 0490     PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
000b0e 91e0 06a9 	LDS  R30,1705
000b10 7fe0      	ANDI R30,LOW(0xF0)
000b11 93e0 06a9 	STS  1705,R30
                 ; 0000 0491 // Bit0 pin change interrupt 0: Off
                 ; 0000 0492 // Bit1 pin change interrupt 0: Off
                 ; 0000 0493 // Bit2 pin change interrupt 0: Off
                 ; 0000 0494 // Bit3 pin change interrupt 0: Off
                 ; 0000 0495 // Bit4 pin change interrupt 0: Off
                 ; 0000 0496 // Bit5 pin change interrupt 0: Off
                 ; 0000 0497 // Bit6 pin change interrupt 0: Off
                 ; 0000 0498 // Bit7 pin change interrupt 0: Off
                 ; 0000 0499 PORTF.INT0MASK=0x00;
000b13 e0e0      	LDI  R30,LOW(0)
000b14 93e0 06aa 	STS  1706,R30
                 ; 0000 049A // Bit0 pin change interrupt 1: Off
                 ; 0000 049B // Bit1 pin change interrupt 1: Off
                 ; 0000 049C // Bit2 pin change interrupt 1: Off
                 ; 0000 049D // Bit3 pin change interrupt 1: Off
                 ; 0000 049E // Bit4 pin change interrupt 1: Off
                 ; 0000 049F // Bit5 pin change interrupt 1: Off
                 ; 0000 04A0 // Bit6 pin change interrupt 1: Off
                 ; 0000 04A1 // Bit7 pin change interrupt 1: Off
                 ; 0000 04A2 PORTF.INT1MASK=0x00;
000b16 93e0 06ab 	STS  1707,R30
                 ; 0000 04A3 
                 ; 0000 04A4 // Set Pin6 as output for signalling start of transmisson of packet
                 ; 0000 04A5 // this is meant to compute the loop delay
                 ; 0000 04A6 PORTF.DIRSET = PIN6_bm; // Set PIN6 as output
000b18 e4e0      	LDI  R30,LOW(64)
000b19 93e0 06a1 	STS  1697,R30
                 ; 0000 04A7 PORTF.OUTCLR = PIN6_bm; // set it zero initially
000b1b 93e0 06a6 	STS  1702,R30
                 ; 0000 04A8 
                 ; 0000 04A9 // Pin configuration for Switch Port
                 ; 0000 04AA //Configure all as Input
                 ; 0000 04AB PORTK.DIRCLR = 0xFF;
000b1d efef      	LDI  R30,LOW(255)
000b1e 93e0 0722 	STS  1826,R30
                 ; 0000 04AC //Enable Interrupt 0 on PIN2
                 ; 0000 04AD PORTK.PIN2CTRL = (PORTK.PIN2CTRL & (~(PORT_ISC_gm | PORT_OPC_gm))) | PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;
000b20 91e0 0732 	LDS  R30,1842
000b22 7ce0      	ANDI R30,LOW(0xC0)
000b23 61ea      	ORI  R30,LOW(0x1A)
000b24 93e0 0732 	STS  1842,R30
                 ; 0000 04AE /* Mask Interrupt 0 for PIN7*/
                 ; 0000 04AF PORTK.INT0MASK |= PIN2_bm;
000b26 91e0 072a 	LDS  R30,1834
000b28 60e4      	ORI  R30,4
000b29 93e0 072a 	STS  1834,R30
                 ; 0000 04B0 /* Enable the interrupt 0 and mark it as high level*/
                 ; 0000 04B1 PORTK.INTCTRL = (PORTK.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) | PORT_INT1LVL_OFF_gc | PORT_INT0LVL_HI_gc;
000b2b 91e0 0729 	LDS  R30,1833
000b2d 7fe0      	ANDI R30,LOW(0xF0)
000b2e 60e3      	ORI  R30,LOW(0x3)
000b2f 93e0 0729 	STS  1833,R30
                 ; 0000 04B2 }
000b31 9508      	RET
                 ;
                 ;void estimation_param_init(void)
                 ; 0000 04B5 {
                 _estimation_param_init:
                 ; 0000 04B6 /* Calculate Estimation Parameters */
                 ; 0000 04B7 bi1 = K15*h;
000b32 940e 1006 	CALL SUBOPT_0x16
                +
000b34 e0a0     +LDI R26 , LOW ( 0x40080000 )
000b35 e0b0     +LDI R27 , HIGH ( 0x40080000 )
000b36 e088     +LDI R24 , BYTE3 ( 0x40080000 )
000b37 e490     +LDI R25 , BYTE4 ( 0x40080000 )
                 	__GETD2N 0x40080000
000b38 940e 14de 	CALL __MULF12
000b3a 93e0 2434 	STS  _bi1,R30
000b3c 93f0 2435 	STS  _bi1+1,R31
000b3e 9360 2436 	STS  _bi1+2,R22
000b40 9370 2437 	STS  _bi1+3,R23
                 ; 0000 04B8 bi2 = K25*h;
000b42 940e 1006 	CALL SUBOPT_0x16
                +
000b44 ecad     +LDI R26 , LOW ( 0x3F4CCCCD )
000b45 ecbc     +LDI R27 , HIGH ( 0x3F4CCCCD )
000b46 e48c     +LDI R24 , BYTE3 ( 0x3F4CCCCD )
000b47 e39f     +LDI R25 , BYTE4 ( 0x3F4CCCCD )
                 	__GETD2N 0x3F4CCCCD
000b48 940e 14de 	CALL __MULF12
000b4a 93e0 2438 	STS  _bi2,R30
000b4c 93f0 2439 	STS  _bi2+1,R31
000b4e 9360 243a 	STS  _bi2+2,R22
000b50 9370 243b 	STS  _bi2+3,R23
                 ; 0000 04B9 a01 = h/Tt1;
000b52 940e 130a 	CALL SUBOPT_0x57
000b54 93e0 243c 	STS  _a01,R30
000b56 93f0 243d 	STS  _a01+1,R31
000b58 9360 243e 	STS  _a01+2,R22
000b5a 9370 243f 	STS  _a01+3,R23
                 ; 0000 04BA a02 = h/Tt2;
000b5c 940e 130a 	CALL SUBOPT_0x57
000b5e 93e0 2440 	STS  _a02,R30
000b60 93f0 2441 	STS  _a02+1,R31
000b62 9360 2442 	STS  _a02+2,R22
000b64 9370 2443 	STS  _a02+3,R23
                 ; 0000 04BB ad = 1.0/(1.0 + (float)N*h);
000b66 940e 1319 	CALL SUBOPT_0x58
000b68 940e 0ffd 	CALL SUBOPT_0x15
000b6a 93e0 2424 	STS  _ad,R30
000b6c 93f0 2425 	STS  _ad+1,R31
000b6e 9360 2426 	STS  _ad+2,R22
000b70 9370 2427 	STS  _ad+3,R23
                 ; 0000 04BC bd = (float)N/(1.0 + (float)N*h);
000b72 940e 1319 	CALL SUBOPT_0x58
000b74 940e 148e 	CALL __ADDF12
                +
000b76 e0a0     +LDI R26 , LOW ( 0x41200000 )
000b77 e0b0     +LDI R27 , HIGH ( 0x41200000 )
000b78 e280     +LDI R24 , BYTE3 ( 0x41200000 )
000b79 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
000b7a 940e 152c 	CALL __DIVF21
000b7c 93e0 2428 	STS  _bd,R30
000b7e 93f0 2429 	STS  _bd+1,R31
000b80 9360 242a 	STS  _bd+2,R22
000b82 9370 242b 	STS  _bd+3,R23
                 ; 0000 04BD 
                 ; 0000 04BE ad1 = 1.0/(1.0 + (float)N1*h);
000b84 940e 131f 	CALL SUBOPT_0x59
000b86 940e 0ffd 	CALL SUBOPT_0x15
000b88 93e0 242c 	STS  _ad1,R30
000b8a 93f0 242d 	STS  _ad1+1,R31
000b8c 9360 242e 	STS  _ad1+2,R22
000b8e 9370 242f 	STS  _ad1+3,R23
                 ; 0000 04BF bd1 = (float)N1/(1.0 + (float)N1*h);
000b90 940e 131f 	CALL SUBOPT_0x59
000b92 940e 148e 	CALL __ADDF12
                +
000b94 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000b95 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000b96 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000b97 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000b98 940e 152c 	CALL __DIVF21
000b9a 93e0 2430 	STS  _bd1,R30
000b9c 93f0 2431 	STS  _bd1+1,R31
000b9e 9360 2432 	STS  _bd1+2,R22
000ba0 9370 2433 	STS  _bd1+3,R23
                 ; 0000 04C0 }
000ba2 9508      	RET
                 ;
                 ;void reset_controller(void)
                 ; 0000 04C3 {
                 _reset_controller:
                 ; 0000 04C4 
                 ; 0000 04C5 // RESET INTEGRATOR STATE and All Controller States
                 ; 0000 04C6 x_a1 = 0.0;
000ba3 940e 12c6 	CALL SUBOPT_0x55
                 ; 0000 04C7 x_a1_old = 0.0;
                 ; 0000 04C8 x_a1_tk = 0.0;
                 ; 0000 04C9 x_a2 = 0.0;
                 ; 0000 04CA x_a2_old = 0.0;
                 ; 0000 04CB x_a2_tk = 0.0;
                 ; 0000 04CC x_1_old = 0;
000ba5 940e 1325 	CALL SUBOPT_0x5A
                 ; 0000 04CD x_2_old = 0;
                 ; 0000 04CE x_3_old = 0;
                 ; 0000 04CF x_4_old = 0;
                 ; 0000 04D0 x_5_old = 0;
                 ; 0000 04D1 x_6_old = 0;
                 ; 0000 04D2 x_7_old = 0;
                 ; 0000 04D3 x_8_old = 0;
                 ; 0000 04D4 
                 ; 0000 04D5 u_1 = 0;
                 ; 0000 04D6 u_2 = 0;
                 ; 0000 04D7 u_1_old = 0;
000ba7 940e 12f8 	CALL SUBOPT_0x56
                 ; 0000 04D8 u_2_old = 0;
                 ; 0000 04D9 v_1 = 0;
000ba9 e0e0      	LDI  R30,LOW(0)
000baa 940e 12b4 	CALL SUBOPT_0x54
                 ; 0000 04DA v_2 = 0;
                 ; 0000 04DB }
000bac 9508      	RET
                 ;
                 ;
                 ;void main( void )
                 ; 0000 04DF {
                 _main:
                 ; 0000 04E0     unsigned char * p;
                 ; 0000 04E1     unsigned char i;
                 ; 0000 04E2     // System clocks initialization
                 ; 0000 04E3     #ifdef SYSTEM_CLOCK_32MHZ
                 ; 0000 04E4     system_clocks_init_32mhz();
                 ;	*p -> R16,R17
                 ;	i -> R19
000bad 940e 0181 	CALL _system_clocks_init_32mhz
                 ; 0000 04E5     #else
                 ; 0000 04E6     system_clocks_init();
                 ; 0000 04E7     #endif
                 ; 0000 04E8 
                 ; 0000 04E9     /** Enable Quadrature Decoder (QD) Board **/
                 ; 0000 04EA     PORTJ.DIRSET = EN_max3002;
000baf e0e1      	LDI  R30,LOW(1)
000bb0 93e0 0701 	STS  1793,R30
                 ; 0000 04EB     PORTJ.OUTSET = EN_max3002;
000bb2 93e0 0705 	STS  1797,R30
                 ; 0000 04EC 
                 ; 0000 04ED 
                 ; 0000 04EE 
                 ; 0000 04EF     // USARTF0 initialization
                 ; 0000 04F0     usartf0_init();
000bb4 940e 01ca 	CALL _usartf0_init
                 ; 0000 04F1 
                 ; 0000 04F2 
                 ; 0000 04F3     // Timer/Counter TCD0 initialization
                 ; 0000 04F4     tcd0_init();
000bb6 940e 01eb 	CALL _tcd0_init
                 ; 0000 04F5 
                 ; 0000 04F6     // Port F initialization for serial transmission and PORTK for hardware external interrupt
                 ; 0000 04F7     ports_init();
000bb8 df3f      	RCALL _ports_init
                 ; 0000 04F8 
                 ; 0000 04F9 
                 ; 0000 04FA     /* Calculate Estimation Parameters */
                 ; 0000 04FB     estimation_param_init();
000bb9 df78      	RCALL _estimation_param_init
                 ; 0000 04FC 
                 ; 0000 04FD 
                 ; 0000 04FE     /** Setup for Reading Encoder Data from QD (Quadrature Decoder Board)***/
                 ; 0000 04FF     /* Setup HCTL2032 Quadrature Decoder for Encoder 1 and 2 */
                 ; 0000 0500     HCTL2032_Total_Setup(&PORTD,                        /* The port to use for 8 bit data.*/
                 ; 0000 0501                       &PORTE,                           /*The port to use for controlling HCTL2032.*/
                 ; 0000 0502                       &PORTJ,                           /*The Port which would read the signals from HCTL2032. These signals are kind of reporting signals
                 ; 0000 0503                                                         which tells about internal state of HCTL2032 like overflow/underflow, count updated etc*/
                 ; 0000 0504                       CountMode);                       /*Which count mode. CountMode = 1 => 4x, CountMode = 2 => 2x and CountMode = 3 => 1x.*/
000bba 940e 0f5b 	CALL SUBOPT_0x3
000bbc e0e0      	LDI  R30,LOW(1792)
000bbd e0f7      	LDI  R31,HIGH(1792)
000bbe 93fa      	ST   -Y,R31
000bbf 93ea      	ST   -Y,R30
000bc0 926a      	ST   -Y,R6
000bc1 940e 0db3 	CALL _HCTL2032_Total_Setup
                 ; 0000 0505 
                 ; 0000 0506      /* Setup HCTL2032 Quadrature Decoder for Encoder 3 and 4 */
                 ; 0000 0507 
                 ; 0000 0508     HCTL2032_Total_Setup(&PORTH,                        /* The port to use for 8 bit data.*/
                 ; 0000 0509                       &PORTC,                           /*The port to use for controlling HCTL2032.*/
                 ; 0000 050A                       &PORTK,                           /*The Port which would read the signals from HCTL2032. These signals are kind of reporting signals
                 ; 0000 050B                                                         which tells about internal state of HCTL2032 like overflow/underflow, count updated etc*/
                 ; 0000 050C                       CountMode);                       /*Which count mode. CountMode = 1 => 4x, CountMode = 2 => 2x and CountMode = 3 => 1x.*/
000bc3 940e 0f64 	CALL SUBOPT_0x4
000bc5 e2e0      	LDI  R30,LOW(1824)
000bc6 e0f7      	LDI  R31,HIGH(1824)
000bc7 93fa      	ST   -Y,R31
000bc8 93ea      	ST   -Y,R30
000bc9 926a      	ST   -Y,R6
000bca 940e 0db3 	CALL _HCTL2032_Total_Setup
                 ; 0000 050D 
                 ; 0000 050E 
                 ; 0000 050F     /* Enable low level and medium level interrupt.*/
                 ; 0000 0510     PMIC.CTRL |= (PMIC_LOLVLEN_bm | PMIC_HILVLEN_bm);
000bcc 91e0 00a2 	LDS  R30,162
000bce 60e5      	ORI  R30,LOW(0x5)
000bcf 93e0 00a2 	STS  162,R30
                 ; 0000 0511     /* Enable global interrupts.*/
                 ; 0000 0512     sei();
000bd1 9478      	sei
                 ; 0000 0513 
                 ; 0000 0514 
                 ; 0000 0515     /* Display the frequency of rotation on LEDs */
                 ; 0000 0516 while (1)
                 _0x9C:
                 ; 0000 0517 {
                 ; 0000 0518 
                 ; 0000 0519     // Place your code here
                 ; 0000 051A     /*** SWITCH INTERFACE ****/
                 ; 0000 051B     PORTK.DIRCLR = 0xFF;
000bd2 efef      	LDI  R30,LOW(255)
000bd3 93e0 0722 	STS  1826,R30
                 ; 0000 051C 
                 ; 0000 051D     /*** START THE CRANE OPERATION with ETC as default WHEN SW7 IS PRESSED ****/
                 ; 0000 051E     if((~PORTK.IN) & PIN7_bm)
000bd5 91e0 0728 	LDS  R30,1832
000bd7 95e0      	COM  R30
000bd8 78e0      	ANDI R30,LOW(0x80)
000bd9 f0c9      	BREQ _0x9F
                 ; 0000 051F     {
                 ; 0000 0520         r_1 = home_x;//0.25;//0.3;
000bda 940e 1367 	CALL SUBOPT_0x5B
                 ; 0000 0521         r_2 = home_theta;//PI*0.5;
000bdc 940e 1370 	CALL SUBOPT_0x5C
                 ; 0000 0522         count_ref = 0;
                 ; 0000 0523         first_transmission = 1; // this is first transmission
000bde 9a08      	SBI  0x1,0
                 ; 0000 0524         // RESET INTEGRATOR STATE and All Controller States
                 ; 0000 0525         x_a1 = 0.0;
000bdf 940e 12c6 	CALL SUBOPT_0x55
                 ; 0000 0526         x_a1_old = 0.0;
                 ; 0000 0527         x_a1_tk = 0.0;
                 ; 0000 0528         x_a2 = 0.0;
                 ; 0000 0529         x_a2_old = 0.0;
                 ; 0000 052A         x_a2_tk = 0.0;
                 ; 0000 052B         x_1_old = 0;
000be1 940e 1325 	CALL SUBOPT_0x5A
                 ; 0000 052C         x_2_old = 0;
                 ; 0000 052D         x_3_old = 0;
                 ; 0000 052E         x_4_old = 0;
                 ; 0000 052F         x_5_old = 0;
                 ; 0000 0530         x_6_old = 0;
                 ; 0000 0531         x_7_old = 0;
                 ; 0000 0532         x_8_old = 0;
                 ; 0000 0533 
                 ; 0000 0534         u_1 = 0;
                 ; 0000 0535         u_2 = 0;
                 ; 0000 0536         u_1_old = 0;
000be3 940e 12f8 	CALL SUBOPT_0x56
                 ; 0000 0537         u_2_old = 0;
                 ; 0000 0538         v_1 = 0;
000be5 e0e0      	LDI  R30,LOW(0)
000be6 940e 12b4 	CALL SUBOPT_0x54
                 ; 0000 0539         v_2 = 0;
                 ; 0000 053A 
                 ; 0000 053B         TCD0.CNT = 0x0000; // Reset the counter
000be8 940e 0f35 	CALL SUBOPT_0x0
                 ; 0000 053C         TCD0.PER= 0x1388; //Clock/(4*5000) = 100 Hz => h = 10 ms  , for 32Mhz (clock/(64*5000) = 100 Hz
                 ; 0000 053D         h = 0.01;
000bea 940e 1382 	CALL SUBOPT_0x5D
                 ; 0000 053E         estimation_param_init(); // update estimation parameters
                 ; 0000 053F 
                 ; 0000 0540         PORTF.OUTCLR = PIN6_bm; // It is a signal being used for measuring times for different tasks, keep it at zero initially,,
000bec e4e0      	LDI  R30,LOW(64)
000bed 93e0 06a6 	STS  1702,R30
                 ; 0000 0541         HCTL2032_Reset_Counter(&PORTE);
000bef 940e 1390 	CALL SUBOPT_0x5E
                 ; 0000 0542         HCTL2032_Reset_Counter(&PORTC);
                 ; 0000 0543 
                 ; 0000 0544         // Now START CALCULATING INTEGRATOR STATE and Controller
                 ; 0000 0545         Periodic_ON = 0; // Turn On ETC
000bf1 9807      	CBI  0x0,7
                 ; 0000 0546         start_flag = 1;
000bf2 9a01      	SBI  0x0,1
                 ; 0000 0547 
                 ; 0000 0548 
                 ; 0000 0549     }
                 ; 0000 054A 
                 ; 0000 054B     /**** Manual Controller ****/
                 ; 0000 054C     /** Move Trolley Forward **/
                 ; 0000 054D     // SWx_pressed is being used to conditionally send the control data on serial link. It is important otherwise
                 ; 0000 054E     // if we pressed the button continuously then we would be sending same u continuously which is not required!
                 ; 0000 054F     if((~PORTK.IN) & PIN0_bm)
                 _0x9F:
000bf3 91e0 0728 	LDS  R30,1832
000bf5 95e0      	COM  R30
000bf6 70e1      	ANDI R30,LOW(0x1)
000bf7 f411      	BRNE PC+3
000bf8 940c 0c4d 	JMP _0xA6
                 ; 0000 0550     {
                 ; 0000 0551         start_flag = 0;
000bfa 9801      	CBI  0x0,1
                 ; 0000 0552         u_1 = 0.5;
                +
000bfb e0e0     +LDI R30 , LOW ( 0x3F000000 )
000bfc e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000bfd e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000bfe e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000bff 940e 139c 	CALL SUBOPT_0x5F
                 ; 0000 0553         u_2 = 0;
                 ; 0000 0554         if(SW0_pressed)
000c01 9b02      	SBIS 0x0,2
000c02 c048      	RJMP _0xA9
                 ; 0000 0555         {
                 ; 0000 0556             // SEND DATA IN RAW FROM
                 ; 0000 0557             //Send Control Signal For Trolley, u_1
                 ; 0000 0558             p = (unsigned char *) & u_1;
                +
000c03 ee08     +LDI R16 , LOW ( _u_1 )
000c04 e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 0559             for (i=0; i<4; i++)
000c05 e030      	LDI  R19,LOW(0)
                 _0xAB:
000c06 3034      	CPI  R19,4
000c07 f420      	BRSH _0xAC
                 ; 0000 055A             {
                 ; 0000 055B             putchar_usartf0( *p++ );
000c08 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 055C             }
000c0a 5f3f      	SUBI R19,-1
000c0b cffa      	RJMP _0xAB
                 _0xAC:
                 ; 0000 055D 
                 ; 0000 055E             // Send Control Signal For Arm, u_2
                 ; 0000 055F             p = (unsigned char *) & u_2;
                +
000c0c ee0c     +LDI R16 , LOW ( _u_2 )
000c0d e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 0560             for (i=0; i<4; i++)
000c0e e030      	LDI  R19,LOW(0)
                 _0xAE:
000c0f 3034      	CPI  R19,4
000c10 f420      	BRSH _0xAF
                 ; 0000 0561             {
                 ; 0000 0562             putchar_usartf0( *p++ );
000c11 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0563             }
000c13 5f3f      	SUBI R19,-1
000c14 cffa      	RJMP _0xAE
                 _0xAF:
                 ; 0000 0564 
                 ; 0000 0565             // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 0566             //Send Reference Signal For Trolley, r_1
                 ; 0000 0567             p = (unsigned char *) & r_1;
                +
000c15 ed08     +LDI R16 , LOW ( _r_1 )
000c16 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 0568             for (i=0; i<4; i++)
000c17 e030      	LDI  R19,LOW(0)
                 _0xB1:
000c18 3034      	CPI  R19,4
000c19 f420      	BRSH _0xB2
                 ; 0000 0569             {
                 ; 0000 056A              putchar_usartf0( *p++ );
000c1a 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 056B             }
000c1c 5f3f      	SUBI R19,-1
000c1d cffa      	RJMP _0xB1
                 _0xB2:
                 ; 0000 056C             // Send Reference Signal For Arm, r_2
                 ; 0000 056D             p = (unsigned char *) & r_2;
                +
000c1e ed0c     +LDI R16 , LOW ( _r_2 )
000c1f e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 056E             for (i=0; i<4; i++)
000c20 e030      	LDI  R19,LOW(0)
                 _0xB4:
000c21 3034      	CPI  R19,4
000c22 f420      	BRSH _0xB5
                 ; 0000 056F             {
                 ; 0000 0570              putchar_usartf0( *p++ );
000c23 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0571             }
000c25 5f3f      	SUBI R19,-1
000c26 cffa      	RJMP _0xB4
                 _0xB5:
                 ; 0000 0572 
                 ; 0000 0573             // SEND Trolley and Arm Position DATA as well to maintain the same data length
                 ; 0000 0574             //Send Trolley Data, x_1 and x_2
                 ; 0000 0575             p = (unsigned char *) & x_1;
                +
000c27 e404     +LDI R16 , LOW ( _x_1 )
000c28 e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 0576             for (i=0; i<4; i++)
000c29 e030      	LDI  R19,LOW(0)
                 _0xB7:
000c2a 3034      	CPI  R19,4
000c2b f420      	BRSH _0xB8
                 ; 0000 0577             {
                 ; 0000 0578              putchar_usartf0( *p++ );
000c2c 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0579             }
000c2e 5f3f      	SUBI R19,-1
000c2f cffa      	RJMP _0xB7
                 _0xB8:
                 ; 0000 057A             // Send Trolley Speed, x_2
                 ; 0000 057B             p = (unsigned char *) & x_2;
                +
000c30 e408     +LDI R16 , LOW ( _x_2 )
000c31 e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 057C             for (i=0; i<4; i++)
000c32 e030      	LDI  R19,LOW(0)
                 _0xBA:
000c33 3034      	CPI  R19,4
000c34 f420      	BRSH _0xBB
                 ; 0000 057D             {
                 ; 0000 057E              putchar_usartf0( *p++ );
000c35 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 057F             }
000c37 5f3f      	SUBI R19,-1
000c38 cffa      	RJMP _0xBA
                 _0xBB:
                 ; 0000 0580 
                 ; 0000 0581             //Send Arm Data, x_5 and x_6
                 ; 0000 0582             p = (unsigned char *) & x_5;
                +
000c39 e508     +LDI R16 , LOW ( _x_5 )
000c3a e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 0583             for (i=0; i<4; i++)
000c3b e030      	LDI  R19,LOW(0)
                 _0xBD:
000c3c 3034      	CPI  R19,4
000c3d f420      	BRSH _0xBE
                 ; 0000 0584             {
                 ; 0000 0585              putchar_usartf0( *p++ );
000c3e 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0586             }
000c40 5f3f      	SUBI R19,-1
000c41 cffa      	RJMP _0xBD
                 _0xBE:
                 ; 0000 0587             // Send Arm Speed, x_6
                 ; 0000 0588             p = (unsigned char *) & x_6;
                +
000c42 e50c     +LDI R16 , LOW ( _x_6 )
000c43 e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 0589             for (i=0; i<4; i++)
000c44 e030      	LDI  R19,LOW(0)
                 _0xC0:
000c45 3034      	CPI  R19,4
000c46 f420      	BRSH _0xC1
                 ; 0000 058A             {
                 ; 0000 058B              putchar_usartf0( *p++ );
000c47 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 058C             }
000c49 5f3f      	SUBI R19,-1
000c4a cffa      	RJMP _0xC0
                 _0xC1:
                 ; 0000 058D         }
                 ; 0000 058E         // if SW is being continuously pressed then don't send control repeateadly
                 ; 0000 058F         SW0_pressed = 0;
                 _0xA9:
000c4b 9802      	CBI  0x0,2
                 ; 0000 0590     }
                 ; 0000 0591 
                 ; 0000 0592     else
000c4c c001      	RJMP _0xC4
                 _0xA6:
                 ; 0000 0593     {
                 ; 0000 0594     	SW0_pressed = 1;
000c4d 9a02      	SBI  0x0,2
                 ; 0000 0595     }
                 _0xC4:
                 ; 0000 0596 
                 ; 0000 0597     /** Move Trolley Backward **/
                 ; 0000 0598     if((~PORTK.IN) & PIN1_bm)
000c4e 91e0 0728 	LDS  R30,1832
000c50 95e0      	COM  R30
000c51 70e2      	ANDI R30,LOW(0x2)
000c52 f411      	BRNE PC+3
000c53 940c 0ca8 	JMP _0xC7
                 ; 0000 0599     {
                 ; 0000 059A         start_flag = 0;
000c55 9801      	CBI  0x0,1
                 ; 0000 059B         u_1 = -0.5;
                +
000c56 e0e0     +LDI R30 , LOW ( 0xBF000000 )
000c57 e0f0     +LDI R31 , HIGH ( 0xBF000000 )
000c58 e060     +LDI R22 , BYTE3 ( 0xBF000000 )
000c59 eb7f     +LDI R23 , BYTE4 ( 0xBF000000 )
                 	__GETD1N 0xBF000000
000c5a 940e 139c 	CALL SUBOPT_0x5F
                 ; 0000 059C         u_2 = 0;
                 ; 0000 059D         if(SW1_pressed)
000c5c 9b03      	SBIS 0x0,3
000c5d c048      	RJMP _0xCA
                 ; 0000 059E         {
                 ; 0000 059F             // SEND DATA IN RAW FROM
                 ; 0000 05A0             //Send Control Signal For Trolley, u_1
                 ; 0000 05A1             p = (unsigned char *) & u_1;
                +
000c5e ee08     +LDI R16 , LOW ( _u_1 )
000c5f e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 05A2             for (i=0; i<4; i++)
000c60 e030      	LDI  R19,LOW(0)
                 _0xCC:
000c61 3034      	CPI  R19,4
000c62 f420      	BRSH _0xCD
                 ; 0000 05A3             {
                 ; 0000 05A4             putchar_usartf0( *p++ );
000c63 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05A5             }
000c65 5f3f      	SUBI R19,-1
000c66 cffa      	RJMP _0xCC
                 _0xCD:
                 ; 0000 05A6 
                 ; 0000 05A7             // Send Control Signal For Arm, u_2
                 ; 0000 05A8             p = (unsigned char *) & u_2;
                +
000c67 ee0c     +LDI R16 , LOW ( _u_2 )
000c68 e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 05A9             for (i=0; i<4; i++)
000c69 e030      	LDI  R19,LOW(0)
                 _0xCF:
000c6a 3034      	CPI  R19,4
000c6b f420      	BRSH _0xD0
                 ; 0000 05AA             {
                 ; 0000 05AB             putchar_usartf0( *p++ );
000c6c 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05AC             }
000c6e 5f3f      	SUBI R19,-1
000c6f cffa      	RJMP _0xCF
                 _0xD0:
                 ; 0000 05AD 
                 ; 0000 05AE             // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 05AF             //Send Reference Signal For Trolley, r_1
                 ; 0000 05B0             p = (unsigned char *) & r_1;
                +
000c70 ed08     +LDI R16 , LOW ( _r_1 )
000c71 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 05B1             for (i=0; i<4; i++)
000c72 e030      	LDI  R19,LOW(0)
                 _0xD2:
000c73 3034      	CPI  R19,4
000c74 f420      	BRSH _0xD3
                 ; 0000 05B2             {
                 ; 0000 05B3              putchar_usartf0( *p++ );
000c75 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05B4             }
000c77 5f3f      	SUBI R19,-1
000c78 cffa      	RJMP _0xD2
                 _0xD3:
                 ; 0000 05B5             // Send Reference Signal For Arm, r_2
                 ; 0000 05B6             p = (unsigned char *) & r_2;
                +
000c79 ed0c     +LDI R16 , LOW ( _r_2 )
000c7a e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 05B7             for (i=0; i<4; i++)
000c7b e030      	LDI  R19,LOW(0)
                 _0xD5:
000c7c 3034      	CPI  R19,4
000c7d f420      	BRSH _0xD6
                 ; 0000 05B8             {
                 ; 0000 05B9              putchar_usartf0( *p++ );
000c7e 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05BA             }
000c80 5f3f      	SUBI R19,-1
000c81 cffa      	RJMP _0xD5
                 _0xD6:
                 ; 0000 05BB 
                 ; 0000 05BC             // SEND Trolley and Arm Position DATA as well to maintain the same data length
                 ; 0000 05BD             //Send Trolley Data, x_1 and x_2
                 ; 0000 05BE             p = (unsigned char *) & x_1;
                +
000c82 e404     +LDI R16 , LOW ( _x_1 )
000c83 e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 05BF             for (i=0; i<4; i++)
000c84 e030      	LDI  R19,LOW(0)
                 _0xD8:
000c85 3034      	CPI  R19,4
000c86 f420      	BRSH _0xD9
                 ; 0000 05C0             {
                 ; 0000 05C1              putchar_usartf0( *p++ );
000c87 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05C2             }
000c89 5f3f      	SUBI R19,-1
000c8a cffa      	RJMP _0xD8
                 _0xD9:
                 ; 0000 05C3             // Send Trolley Speed, x_2
                 ; 0000 05C4             p = (unsigned char *) & x_2;
                +
000c8b e408     +LDI R16 , LOW ( _x_2 )
000c8c e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 05C5             for (i=0; i<4; i++)
000c8d e030      	LDI  R19,LOW(0)
                 _0xDB:
000c8e 3034      	CPI  R19,4
000c8f f420      	BRSH _0xDC
                 ; 0000 05C6             {
                 ; 0000 05C7              putchar_usartf0( *p++ );
000c90 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05C8             }
000c92 5f3f      	SUBI R19,-1
000c93 cffa      	RJMP _0xDB
                 _0xDC:
                 ; 0000 05C9 
                 ; 0000 05CA             //Send Arm Data, x_5 and x_6
                 ; 0000 05CB             p = (unsigned char *) & x_5;
                +
000c94 e508     +LDI R16 , LOW ( _x_5 )
000c95 e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 05CC             for (i=0; i<4; i++)
000c96 e030      	LDI  R19,LOW(0)
                 _0xDE:
000c97 3034      	CPI  R19,4
000c98 f420      	BRSH _0xDF
                 ; 0000 05CD             {
                 ; 0000 05CE              putchar_usartf0( *p++ );
000c99 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05CF             }
000c9b 5f3f      	SUBI R19,-1
000c9c cffa      	RJMP _0xDE
                 _0xDF:
                 ; 0000 05D0             // Send Arm Speed, x_6
                 ; 0000 05D1             p = (unsigned char *) & x_6;
                +
000c9d e50c     +LDI R16 , LOW ( _x_6 )
000c9e e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 05D2             for (i=0; i<4; i++)
000c9f e030      	LDI  R19,LOW(0)
                 _0xE1:
000ca0 3034      	CPI  R19,4
000ca1 f420      	BRSH _0xE2
                 ; 0000 05D3             {
                 ; 0000 05D4              putchar_usartf0( *p++ );
000ca2 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05D5             }
000ca4 5f3f      	SUBI R19,-1
000ca5 cffa      	RJMP _0xE1
                 _0xE2:
                 ; 0000 05D6         }
                 ; 0000 05D7         // if SW is being continuously pressed then don't send control repeateadly
                 ; 0000 05D8         SW1_pressed = 0;
                 _0xCA:
000ca6 9803      	CBI  0x0,3
                 ; 0000 05D9     }
                 ; 0000 05DA     else
000ca7 c001      	RJMP _0xE5
                 _0xC7:
                 ; 0000 05DB     {
                 ; 0000 05DC     	SW1_pressed = 1;
000ca8 9a03      	SBI  0x0,3
                 ; 0000 05DD     }
                 _0xE5:
                 ; 0000 05DE 
                 ; 0000 05DF     /** Move Arm Forward **/
                 ; 0000 05E0     if((~PORTK.IN) & PIN3_bm)
000ca9 91e0 0728 	LDS  R30,1832
000cab 95e0      	COM  R30
000cac 70e8      	ANDI R30,LOW(0x8)
000cad f411      	BRNE PC+3
000cae 940c 0d04 	JMP _0xE8
                 ; 0000 05E1     {
                 ; 0000 05E2         start_flag = 0;
000cb0 940e 13ae 	CALL SUBOPT_0x60
                 ; 0000 05E3         u_1 = 0;
                 ; 0000 05E4         u_2 = 0.5;
                +
000cb2 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000cb3 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000cb4 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000cb5 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000cb6 940e 13b9 	CALL SUBOPT_0x61
                 ; 0000 05E5         if(SW3_pressed)
000cb8 9b05      	SBIS 0x0,5
000cb9 c048      	RJMP _0xEB
                 ; 0000 05E6         {
                 ; 0000 05E7             // SEND DATA IN RAW FROM
                 ; 0000 05E8             //Send Control Signal For Trolley, u_1
                 ; 0000 05E9             p = (unsigned char *) & u_1;
                +
000cba ee08     +LDI R16 , LOW ( _u_1 )
000cbb e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 05EA             for (i=0; i<4; i++)
000cbc e030      	LDI  R19,LOW(0)
                 _0xED:
000cbd 3034      	CPI  R19,4
000cbe f420      	BRSH _0xEE
                 ; 0000 05EB             {
                 ; 0000 05EC             putchar_usartf0( *p++ );
000cbf 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05ED             }
000cc1 5f3f      	SUBI R19,-1
000cc2 cffa      	RJMP _0xED
                 _0xEE:
                 ; 0000 05EE 
                 ; 0000 05EF             // Send Control Signal For Arm, u_2
                 ; 0000 05F0             p = (unsigned char *) & u_2;
                +
000cc3 ee0c     +LDI R16 , LOW ( _u_2 )
000cc4 e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 05F1             for (i=0; i<4; i++)
000cc5 e030      	LDI  R19,LOW(0)
                 _0xF0:
000cc6 3034      	CPI  R19,4
000cc7 f420      	BRSH _0xF1
                 ; 0000 05F2             {
                 ; 0000 05F3             putchar_usartf0( *p++ );
000cc8 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05F4             }
000cca 5f3f      	SUBI R19,-1
000ccb cffa      	RJMP _0xF0
                 _0xF1:
                 ; 0000 05F5 
                 ; 0000 05F6             // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 05F7             //Send Reference Signal For Trolley, r_1
                 ; 0000 05F8             p = (unsigned char *) & r_1;
                +
000ccc ed08     +LDI R16 , LOW ( _r_1 )
000ccd e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 05F9             for (i=0; i<4; i++)
000cce e030      	LDI  R19,LOW(0)
                 _0xF3:
000ccf 3034      	CPI  R19,4
000cd0 f420      	BRSH _0xF4
                 ; 0000 05FA             {
                 ; 0000 05FB              putchar_usartf0( *p++ );
000cd1 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 05FC             }
000cd3 5f3f      	SUBI R19,-1
000cd4 cffa      	RJMP _0xF3
                 _0xF4:
                 ; 0000 05FD             // Send Reference Signal For Arm, r_2
                 ; 0000 05FE             p = (unsigned char *) & r_2;
                +
000cd5 ed0c     +LDI R16 , LOW ( _r_2 )
000cd6 e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 05FF             for (i=0; i<4; i++)
000cd7 e030      	LDI  R19,LOW(0)
                 _0xF6:
000cd8 3034      	CPI  R19,4
000cd9 f420      	BRSH _0xF7
                 ; 0000 0600             {
                 ; 0000 0601              putchar_usartf0( *p++ );
000cda 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0602             }
000cdc 5f3f      	SUBI R19,-1
000cdd cffa      	RJMP _0xF6
                 _0xF7:
                 ; 0000 0603 
                 ; 0000 0604             // SEND Trolley and Arm Position DATA as well to maintain the same data length
                 ; 0000 0605             //Send Trolley Data, x_1 and x_2
                 ; 0000 0606             p = (unsigned char *) & x_1;
                +
000cde e404     +LDI R16 , LOW ( _x_1 )
000cdf e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 0607             for (i=0; i<4; i++)
000ce0 e030      	LDI  R19,LOW(0)
                 _0xF9:
000ce1 3034      	CPI  R19,4
000ce2 f420      	BRSH _0xFA
                 ; 0000 0608             {
                 ; 0000 0609              putchar_usartf0( *p++ );
000ce3 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 060A             }
000ce5 5f3f      	SUBI R19,-1
000ce6 cffa      	RJMP _0xF9
                 _0xFA:
                 ; 0000 060B             // Send Trolley Speed, x_2
                 ; 0000 060C             p = (unsigned char *) & x_2;
                +
000ce7 e408     +LDI R16 , LOW ( _x_2 )
000ce8 e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 060D             for (i=0; i<4; i++)
000ce9 e030      	LDI  R19,LOW(0)
                 _0xFC:
000cea 3034      	CPI  R19,4
000ceb f420      	BRSH _0xFD
                 ; 0000 060E             {
                 ; 0000 060F              putchar_usartf0( *p++ );
000cec 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0610             }
000cee 5f3f      	SUBI R19,-1
000cef cffa      	RJMP _0xFC
                 _0xFD:
                 ; 0000 0611 
                 ; 0000 0612             //Send Arm Data, x_5 and x_6
                 ; 0000 0613             p = (unsigned char *) & x_5;
                +
000cf0 e508     +LDI R16 , LOW ( _x_5 )
000cf1 e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 0614             for (i=0; i<4; i++)
000cf2 e030      	LDI  R19,LOW(0)
                 _0xFF:
000cf3 3034      	CPI  R19,4
000cf4 f420      	BRSH _0x100
                 ; 0000 0615             {
                 ; 0000 0616              putchar_usartf0( *p++ );
000cf5 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0617             }
000cf7 5f3f      	SUBI R19,-1
000cf8 cffa      	RJMP _0xFF
                 _0x100:
                 ; 0000 0618             // Send Arm Speed, x_6
                 ; 0000 0619             p = (unsigned char *) & x_6;
                +
000cf9 e50c     +LDI R16 , LOW ( _x_6 )
000cfa e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 061A             for (i=0; i<4; i++)
000cfb e030      	LDI  R19,LOW(0)
                 _0x102:
000cfc 3034      	CPI  R19,4
000cfd f420      	BRSH _0x103
                 ; 0000 061B             {
                 ; 0000 061C              putchar_usartf0( *p++ );
000cfe 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 061D             }
000d00 5f3f      	SUBI R19,-1
000d01 cffa      	RJMP _0x102
                 _0x103:
                 ; 0000 061E         }
                 ; 0000 061F         // if SW is being continuously pressed then don't send control repeateadly
                 ; 0000 0620         SW3_pressed = 0;
                 _0xEB:
000d02 9805      	CBI  0x0,5
                 ; 0000 0621     }
                 ; 0000 0622 
                 ; 0000 0623     else
000d03 c001      	RJMP _0x106
                 _0xE8:
                 ; 0000 0624     {
                 ; 0000 0625     	SW3_pressed = 1;
000d04 9a05      	SBI  0x0,5
                 ; 0000 0626     }
                 _0x106:
                 ; 0000 0627 
                 ; 0000 0628     /** Move Arm Backward **/
                 ; 0000 0629     if((~PORTK.IN) & PIN4_bm)
000d05 91e0 0728 	LDS  R30,1832
000d07 95e0      	COM  R30
000d08 71e0      	ANDI R30,LOW(0x10)
000d09 f411      	BRNE PC+3
000d0a 940c 0d60 	JMP _0x109
                 ; 0000 062A     {
                 ; 0000 062B         start_flag = 0;
000d0c 940e 13ae 	CALL SUBOPT_0x60
                 ; 0000 062C         u_1 = 0;
                 ; 0000 062D         u_2 = -0.5;
                +
000d0e e0e0     +LDI R30 , LOW ( 0xBF000000 )
000d0f e0f0     +LDI R31 , HIGH ( 0xBF000000 )
000d10 e060     +LDI R22 , BYTE3 ( 0xBF000000 )
000d11 eb7f     +LDI R23 , BYTE4 ( 0xBF000000 )
                 	__GETD1N 0xBF000000
000d12 940e 13b9 	CALL SUBOPT_0x61
                 ; 0000 062E         if(SW4_pressed)
000d14 9b06      	SBIS 0x0,6
000d15 c048      	RJMP _0x10C
                 ; 0000 062F         {
                 ; 0000 0630             // SEND DATA IN RAW FROM
                 ; 0000 0631             //Send Control Signal For Trolley, u_1
                 ; 0000 0632             p = (unsigned char *) & u_1;
                +
000d16 ee08     +LDI R16 , LOW ( _u_1 )
000d17 e214     +LDI R17 , HIGH ( _u_1 )
                 	__POINTWRM 16,17,_u_1
                 ; 0000 0633             for (i=0; i<4; i++)
000d18 e030      	LDI  R19,LOW(0)
                 _0x10E:
000d19 3034      	CPI  R19,4
000d1a f420      	BRSH _0x10F
                 ; 0000 0634             {
                 ; 0000 0635             putchar_usartf0( *p++ );
000d1b 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0636             }
000d1d 5f3f      	SUBI R19,-1
000d1e cffa      	RJMP _0x10E
                 _0x10F:
                 ; 0000 0637 
                 ; 0000 0638             // Send Control Signal For Arm, u_2
                 ; 0000 0639             p = (unsigned char *) & u_2;
                +
000d1f ee0c     +LDI R16 , LOW ( _u_2 )
000d20 e214     +LDI R17 , HIGH ( _u_2 )
                 	__POINTWRM 16,17,_u_2
                 ; 0000 063A             for (i=0; i<4; i++)
000d21 e030      	LDI  R19,LOW(0)
                 _0x111:
000d22 3034      	CPI  R19,4
000d23 f420      	BRSH _0x112
                 ; 0000 063B             {
                 ; 0000 063C             putchar_usartf0( *p++ );
000d24 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 063D             }
000d26 5f3f      	SUBI R19,-1
000d27 cffa      	RJMP _0x111
                 _0x112:
                 ; 0000 063E 
                 ; 0000 063F             // SEND REFERENCE DATA IN RAW FROM
                 ; 0000 0640             //Send Reference Signal For Trolley, r_1
                 ; 0000 0641             p = (unsigned char *) & r_1;
                +
000d28 ed08     +LDI R16 , LOW ( _r_1 )
000d29 e214     +LDI R17 , HIGH ( _r_1 )
                 	__POINTWRM 16,17,_r_1
                 ; 0000 0642             for (i=0; i<4; i++)
000d2a e030      	LDI  R19,LOW(0)
                 _0x114:
000d2b 3034      	CPI  R19,4
000d2c f420      	BRSH _0x115
                 ; 0000 0643             {
                 ; 0000 0644              putchar_usartf0( *p++ );
000d2d 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0645             }
000d2f 5f3f      	SUBI R19,-1
000d30 cffa      	RJMP _0x114
                 _0x115:
                 ; 0000 0646             // Send Reference Signal For Arm, r_2
                 ; 0000 0647             p = (unsigned char *) & r_2;
                +
000d31 ed0c     +LDI R16 , LOW ( _r_2 )
000d32 e214     +LDI R17 , HIGH ( _r_2 )
                 	__POINTWRM 16,17,_r_2
                 ; 0000 0648             for (i=0; i<4; i++)
000d33 e030      	LDI  R19,LOW(0)
                 _0x117:
000d34 3034      	CPI  R19,4
000d35 f420      	BRSH _0x118
                 ; 0000 0649             {
                 ; 0000 064A              putchar_usartf0( *p++ );
000d36 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 064B             }
000d38 5f3f      	SUBI R19,-1
000d39 cffa      	RJMP _0x117
                 _0x118:
                 ; 0000 064C 
                 ; 0000 064D             // SEND Trolley and Arm Position DATA as well to maintain the same data length
                 ; 0000 064E             //Send Trolley Data, x_1 and x_2
                 ; 0000 064F             p = (unsigned char *) & x_1;
                +
000d3a e404     +LDI R16 , LOW ( _x_1 )
000d3b e214     +LDI R17 , HIGH ( _x_1 )
                 	__POINTWRM 16,17,_x_1
                 ; 0000 0650             for (i=0; i<4; i++)
000d3c e030      	LDI  R19,LOW(0)
                 _0x11A:
000d3d 3034      	CPI  R19,4
000d3e f420      	BRSH _0x11B
                 ; 0000 0651             {
                 ; 0000 0652              putchar_usartf0( *p++ );
000d3f 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0653             }
000d41 5f3f      	SUBI R19,-1
000d42 cffa      	RJMP _0x11A
                 _0x11B:
                 ; 0000 0654             // Send Trolley Speed, x_2
                 ; 0000 0655             p = (unsigned char *) & x_2;
                +
000d43 e408     +LDI R16 , LOW ( _x_2 )
000d44 e214     +LDI R17 , HIGH ( _x_2 )
                 	__POINTWRM 16,17,_x_2
                 ; 0000 0656             for (i=0; i<4; i++)
000d45 e030      	LDI  R19,LOW(0)
                 _0x11D:
000d46 3034      	CPI  R19,4
000d47 f420      	BRSH _0x11E
                 ; 0000 0657             {
                 ; 0000 0658              putchar_usartf0( *p++ );
000d48 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0659             }
000d4a 5f3f      	SUBI R19,-1
000d4b cffa      	RJMP _0x11D
                 _0x11E:
                 ; 0000 065A 
                 ; 0000 065B             //Send Arm Data, x_5 and x_6
                 ; 0000 065C             p = (unsigned char *) & x_5;
                +
000d4c e508     +LDI R16 , LOW ( _x_5 )
000d4d e214     +LDI R17 , HIGH ( _x_5 )
                 	__POINTWRM 16,17,_x_5
                 ; 0000 065D             for (i=0; i<4; i++)
000d4e e030      	LDI  R19,LOW(0)
                 _0x120:
000d4f 3034      	CPI  R19,4
000d50 f420      	BRSH _0x121
                 ; 0000 065E             {
                 ; 0000 065F              putchar_usartf0( *p++ );
000d51 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0660             }
000d53 5f3f      	SUBI R19,-1
000d54 cffa      	RJMP _0x120
                 _0x121:
                 ; 0000 0661             // Send Arm Speed, x_6
                 ; 0000 0662             p = (unsigned char *) & x_6;
                +
000d55 e50c     +LDI R16 , LOW ( _x_6 )
000d56 e214     +LDI R17 , HIGH ( _x_6 )
                 	__POINTWRM 16,17,_x_6
                 ; 0000 0663             for (i=0; i<4; i++)
000d57 e030      	LDI  R19,LOW(0)
                 _0x123:
000d58 3034      	CPI  R19,4
000d59 f420      	BRSH _0x124
                 ; 0000 0664             {
                 ; 0000 0665              putchar_usartf0( *p++ );
000d5a 940e 1241 	CALL SUBOPT_0x4A
                 ; 0000 0666             }
000d5c 5f3f      	SUBI R19,-1
000d5d cffa      	RJMP _0x123
                 _0x124:
                 ; 0000 0667         }
                 ; 0000 0668         // if SW is being continuously pressed then don't send control repeateadly
                 ; 0000 0669         SW4_pressed = 0;
                 _0x10C:
000d5e 9806      	CBI  0x0,6
                 ; 0000 066A     }
                 ; 0000 066B     else
000d5f c001      	RJMP _0x127
                 _0x109:
                 ; 0000 066C     {
                 ; 0000 066D     	SW4_pressed = 1;
000d60 9a06      	SBI  0x0,6
                 ; 0000 066E 
                 ; 0000 066F     }
                 _0x127:
                 ; 0000 0670 
                 ; 0000 0671     /********* Select Between ETC and TTC ***********/
                 ; 0000 0672 
                 ; 0000 0673     /** Turn on ETC **/
                 ; 0000 0674     if((~PORTK.IN) & PIN5_bm)
000d61 91e0 0728 	LDS  R30,1832
000d63 95e0      	COM  R30
000d64 72e0      	ANDI R30,LOW(0x20)
000d65 f051      	BREQ _0x12A
                 ; 0000 0675     {
                 ; 0000 0676         Periodic_ON = 0; // If SW5 is pressed Turn On ETC
000d66 9807      	CBI  0x0,7
                 ; 0000 0677         start_flag = 1;
000d67 9a01      	SBI  0x0,1
                 ; 0000 0678         PORTF.OUTCLR = PIN6_bm;
000d68 e4e0      	LDI  R30,LOW(64)
000d69 93e0 06a6 	STS  1702,R30
                 ; 0000 0679         TCD0.CNT = 0x0000; // Reset the counter
000d6b 940e 0f35 	CALL SUBOPT_0x0
                 ; 0000 067A         TCD0.PER= 0x1388; //Clock/(4*5000) = 100 Hz => h = 10 ms  , for 32Mhz (clock/(64*5000) = 100 Hz
                 ; 0000 067B         h = 0.01; // 10 ms sampling time
000d6d 940e 1382 	CALL SUBOPT_0x5D
                 ; 0000 067C         /*Calculate Estimation Parameters for ETC*/
                 ; 0000 067D         estimation_param_init();
                 ; 0000 067E 
                 ; 0000 067F 
                 ; 0000 0680     }
                 ; 0000 0681     /** Turn on Periodic TTC **/
                 ; 0000 0682     else if((~PORTK.IN) & PIN6_bm)
000d6f c03b      	RJMP _0x12F
                 _0x12A:
000d70 91e0 0728 	LDS  R30,1832
000d72 95e0      	COM  R30
000d73 74e0      	ANDI R30,LOW(0x40)
000d74 f1b1      	BREQ _0x130
                 ; 0000 0683     {
                 ; 0000 0684 
                 ; 0000 0685         PORTF.OUTCLR = PIN6_bm;
000d75 e4e0      	LDI  R30,LOW(64)
000d76 93e0 06a6 	STS  1702,R30
                 ; 0000 0686         u_1 = 0.0;
000d78 e0e0      	LDI  R30,LOW(0)
000d79 93e0 24e8 	STS  _u_1,R30
000d7b 93e0 24e9 	STS  _u_1+1,R30
000d7d 93e0 24ea 	STS  _u_1+2,R30
000d7f 93e0 24eb 	STS  _u_1+3,R30
                 ; 0000 0687         u_2 = 0.0;
000d81 93e0 24ec 	STS  _u_2,R30
000d83 93e0 24ed 	STS  _u_2+1,R30
000d85 93e0 24ee 	STS  _u_2+2,R30
000d87 93e0 24ef 	STS  _u_2+3,R30
                 ; 0000 0688         r_1 = home_x;//0.25;//0.3;
000d89 940e 1367 	CALL SUBOPT_0x5B
                 ; 0000 0689         r_2 = home_theta;//PI*0.5;
000d8b 940e 1370 	CALL SUBOPT_0x5C
                 ; 0000 068A         count_ref = 0;
                 ; 0000 068B         TCD0.CNT = 0x0000; // Reset the counter
000d8d e0e0      	LDI  R30,LOW(0)
000d8e e0f0      	LDI  R31,HIGH(0)
000d8f 93e0 0920 	STS  2336,R30
000d91 93f0 0921 	STS  2336+1,R31
                 ; 0000 068C         //TCD0.PER= 0x30D4; // 25ms period
                 ; 0000 068D         //TCD0.PER = 0x3A98; // 30 ms period
                 ; 0000 068E         TCD0.PER = 0x4E20; // 40 ms period
000d93 e2e0      	LDI  R30,LOW(20000)
000d94 e4fe      	LDI  R31,HIGH(20000)
000d95 93e0 0926 	STS  2342,R30
000d97 93f0 0927 	STS  2342+1,R31
                 ; 0000 068F         //h = 0.025; // 25 ms sampling time
                 ; 0000 0690         //h = 0.030; // 30 ms sampling time
                 ; 0000 0691         h = 0.040; // 30 ms sampling time
                +
000d99 e0ea     +LDI R30 , LOW ( 0x3D23D70A )
000d9a edf7     +LDI R31 , HIGH ( 0x3D23D70A )
000d9b e263     +LDI R22 , BYTE3 ( 0x3D23D70A )
000d9c e37d     +LDI R23 , BYTE4 ( 0x3D23D70A )
                 	__GETD1N 0x3D23D70A
000d9d 93e0 2420 	STS  _h,R30
000d9f 93f0 2421 	STS  _h+1,R31
000da1 9360 2422 	STS  _h+2,R22
000da3 9370 2423 	STS  _h+3,R23
                 ; 0000 0692         /*Calculate Estimation Parameters for TTC*/
                 ; 0000 0693         estimation_param_init();
000da5 dd8c      	RCALL _estimation_param_init
                 ; 0000 0694 
                 ; 0000 0695 
                 ; 0000 0696         // Clear Encoder Data Latches Before Starting Move
                 ; 0000 0697         HCTL2032_Reset_Counter(&PORTE);
000da6 940e 1390 	CALL SUBOPT_0x5E
                 ; 0000 0698         HCTL2032_Reset_Counter(&PORTC);
                 ; 0000 0699 
                 ; 0000 069A         // Now Start the move
                 ; 0000 069B         Periodic_ON = 1; // If SW6 is pressed, Turn On Periodic Controller
000da8 9a07      	SBI  0x0,7
                 ; 0000 069C         /* Reset All Controller States and Stored Data before starting first move */
                 ; 0000 069D         reset_controller();
000da9 ddf9      	RCALL _reset_controller
                 ; 0000 069E         start_flag = 1;
000daa 9a01      	SBI  0x0,1
                 ; 0000 069F 
                 ; 0000 06A0     }
                 ; 0000 06A1 
                 ; 0000 06A2 }
                 _0x130:
                 _0x12F:
000dab ce26      	RJMP _0x9C
                 ; 0000 06A3 
                 ; 0000 06A4 }
                 _0x135:
000dac cfff      	RJMP _0x135
                 
                 	.CSEG
                 _fabs:
000dad 91e9          ld   r30,y+
000dae 91f9          ld   r31,y+
000daf 9169          ld   r22,y+
000db0 9179          ld   r23,y+
000db1 777f          cbr  r23,0x80
000db2 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _HCTL2032_Total_Setup:
000db3 81ad      	LDD  R26,Y+5
000db4 81be      	LDD  R27,Y+5+1
000db5 9612      	ADIW R26,2
000db6 efef      	LDI  R30,LOW(255)
000db7 93ec      	ST   X,R30
000db8 81ab      	LDD  R26,Y+3
000db9 81bc      	LDD  R27,Y+3+1
000dba 9611      	ADIW R26,1
000dbb 93ec      	ST   X,R30
000dbc 81a9      	LDD  R26,Y+1
000dbd 81ba      	LDD  R27,Y+1+1
000dbe 9612      	ADIW R26,2
000dbf efee      	LDI  R30,LOW(254)
000dc0 93ec      	ST   X,R30
000dc1 81a9      	LDD  R26,Y+1
000dc2 81ba      	LDD  R27,Y+1+1
000dc3 9611      	ADIW R26,1
000dc4 e0e1      	LDI  R30,LOW(1)
000dc5 940e 13c2 	CALL SUBOPT_0x62
000dc7 e0e1      	LDI  R30,LOW(1)
000dc8 93ec      	ST   X,R30
000dc9 81ab      	LDD  R26,Y+3
000dca 81bc      	LDD  R27,Y+3+1
000dcb 9616      	ADIW R26,6
000dcc ece0      	LDI  R30,LOW(192)
000dcd 93ec      	ST   X,R30
000dce 0000          nop
000dcf 81ab      	LDD  R26,Y+3
000dd0 81bc      	LDD  R27,Y+3+1
000dd1 9615      	ADIW R26,5
000dd2 ece0      	LDI  R30,LOW(192)
000dd3 93ec      	ST   X,R30
000dd4 81ab      	LDD  R26,Y+3
000dd5 81bc      	LDD  R27,Y+3+1
000dd6 9615      	ADIW R26,5
000dd7 e1e0      	LDI  R30,LOW(16)
000dd8 93ec      	ST   X,R30
000dd9 81ab      	LDD  R26,Y+3
000dda 81bc      	LDD  R27,Y+3+1
000ddb 9616      	ADIW R26,6
000ddc e0e2      	LDI  R30,LOW(2)
000ddd 93ec      	ST   X,R30
000dde 81eb      	LDD  R30,Y+3
000ddf 81fc      	LDD  R31,Y+3+1
000de0 93fa      	ST   -Y,R31
000de1 93ea      	ST   -Y,R30
000de2 81ea      	LDD  R30,Y+2
000de3 93ea      	ST   -Y,R30
000de4 d007      	RCALL _HCTL2032_Set_Count_Mode
000de5 30e0      	CPI  R30,0
000de6 f411      	BRNE _0x2020003
000de7 e0e0      	LDI  R30,LOW(0)
000de8 c001      	RJMP _0x2100002
                 _0x2020003:
000de9 e0e1      	LDI  R30,LOW(1)
                 _0x2100002:
000dea 9627      	ADIW R28,7
000deb 9508      	RET
                 _HCTL2032_Set_Count_Mode:
000dec 81e8      	LD   R30,Y
000ded e0f0      	LDI  R31,0
000dee 30e1      	CPI  R30,LOW(0x1)
000def e0a0      	LDI  R26,HIGH(0x1)
000df0 07fa      	CPC  R31,R26
000df1 f459      	BRNE _0x2020007
000df2 81a9      	LDD  R26,Y+1
000df3 81ba      	LDD  R27,Y+1+1
000df4 9615      	ADIW R26,5
000df5 e0e8      	LDI  R30,LOW(8)
000df6 93ec      	ST   X,R30
000df7 81a9      	LDD  R26,Y+1
000df8 81ba      	LDD  R27,Y+1+1
000df9 9616      	ADIW R26,6
000dfa e0e4      	LDI  R30,LOW(4)
000dfb 93ec      	ST   X,R30
000dfc c01c      	RJMP _0x2020006
                 _0x2020007:
000dfd 30e2      	CPI  R30,LOW(0x2)
000dfe e0a0      	LDI  R26,HIGH(0x2)
000dff 07fa      	CPC  R31,R26
000e00 f449      	BRNE _0x2020008
000e01 81a9      	LDD  R26,Y+1
000e02 81ba      	LDD  R27,Y+1+1
000e03 9616      	ADIW R26,6
000e04 e0e8      	LDI  R30,LOW(8)
000e05 940e 13c2 	CALL SUBOPT_0x62
000e07 e0e4      	LDI  R30,LOW(4)
000e08 93ec      	ST   X,R30
000e09 c00f      	RJMP _0x2020006
                 _0x2020008:
000e0a 30e3      	CPI  R30,LOW(0x3)
000e0b e0a0      	LDI  R26,HIGH(0x3)
000e0c 07fa      	CPC  R31,R26
000e0d f449      	BRNE _0x202000A
000e0e 81a9      	LDD  R26,Y+1
000e0f 81ba      	LDD  R27,Y+1+1
000e10 9615      	ADIW R26,5
000e11 e0e8      	LDI  R30,LOW(8)
000e12 940e 13c2 	CALL SUBOPT_0x62
000e14 e0e4      	LDI  R30,LOW(4)
000e15 93ec      	ST   X,R30
000e16 c002      	RJMP _0x2020006
                 _0x202000A:
000e17 e0e0      	LDI  R30,LOW(0)
000e18 c001      	RJMP _0x2100001
                 _0x2020006:
000e19 e0e1      	LDI  R30,LOW(1)
                 _0x2100001:
000e1a 9623      	ADIW R28,3
000e1b 9508      	RET
                 _HCTL2032_Read_Count_Data:
000e1c 972a      	SBIW R28,10
000e1d e08a      	LDI  R24,10
000e1e e0a0      	LDI  R26,LOW(0)
000e1f e0b0      	LDI  R27,HIGH(0)
000e20 e1ec      	LDI  R30,LOW(_0x202000B*2)
000e21 e0f2      	LDI  R31,HIGH(_0x202000B*2)
000e22 940e 1614 	CALL __INITLOCB
000e24 940e 1606 	CALL __SAVELOCR6
000e26 e010      	LDI  R17,0
000e27 e000      	LDI  R16,0
000e28 e030      	LDI  R19,0
000e29 e020      	LDI  R18,0
000e2a e050      	LDI  R21,0
000e2b e040      	LDI  R20,0
000e2c 0000      nop
000e2d 0000      nop
000e2e 0000      nop
000e2f 0000      nop
000e30 0000      nop
000e31 0000      nop
000e32 0000      nop
000e33 0000      nop
000e34 0000      nop
000e35 0000      nop
000e36 0000      nop
000e37 0000      nop
000e38 0000      nop
000e39 89e8      	LDD  R30,Y+16
000e3a 30e0      	CPI  R30,0
000e3b f021      	BREQ _0x202000C
000e3c 89a9      	LDD  R26,Y+17
000e3d 89ba      	LDD  R27,Y+17+1
000e3e 9615      	ADIW R26,5
000e3f c003      	RJMP _0x2020010
                 _0x202000C:
000e40 89a9      	LDD  R26,Y+17
000e41 89ba      	LDD  R27,Y+17+1
000e42 9616      	ADIW R26,6
                 _0x2020010:
000e43 e0e2      	LDI  R30,LOW(2)
000e44 93ec      	ST   X,R30
000e45 89ab      	LDD  R26,Y+19
000e46 89bc      	LDD  R27,Y+19+1
000e47 9612      	ADIW R26,2
000e48 efef      	LDI  R30,LOW(255)
000e49 940e 13c7 	CALL SUBOPT_0x63
000e4b 940e 13cc 	CALL SUBOPT_0x64
000e4d 940e 13c7 	CALL SUBOPT_0x63
000e4f e1e0      	LDI  R30,LOW(16)
000e50 93ec      	ST   X,R30
000e51 0000      nop
000e52 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e53 89ab      	LDD  R26,Y+19
000e54 89bc      	LDD  R27,Y+19+1
000e55 9618      	ADIW R26,8
000e56 911c      	LD   R17,X
000e57 89ab      	LDD  R26,Y+19
000e58 89bc      	LDD  R27,Y+19+1
000e59 9618      	ADIW R26,8
000e5a 911c      	LD   R17,X
000e5b 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e5c 89a9      	LDD  R26,Y+17
000e5d 89ba      	LDD  R27,Y+17+1
000e5e 9615      	ADIW R26,5
000e5f 940e 13cc 	CALL SUBOPT_0x64
000e61 93ec      	ST   X,R30
000e62 0000      nop
000e63 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e64 89ab      	LDD  R26,Y+19
000e65 89bc      	LDD  R27,Y+19+1
000e66 9618      	ADIW R26,8
000e67 910c      	LD   R16,X
000e68 89ab      	LDD  R26,Y+19
000e69 89bc      	LDD  R27,Y+19+1
000e6a 9618      	ADIW R26,8
000e6b 910c      	LD   R16,X
000e6c 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e6d 89a9      	LDD  R26,Y+17
000e6e 89ba      	LDD  R27,Y+17+1
000e6f 9616      	ADIW R26,6
000e70 e2e0      	LDI  R30,LOW(32)
000e71 940e 13c7 	CALL SUBOPT_0x63
000e73 e0e1      	LDI  R30,LOW(1)
000e74 93ec      	ST   X,R30
000e75 0000      nop
000e76 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e77 89ab      	LDD  R26,Y+19
000e78 89bc      	LDD  R27,Y+19+1
000e79 9618      	ADIW R26,8
000e7a 913c      	LD   R19,X
000e7b 89ab      	LDD  R26,Y+19
000e7c 89bc      	LDD  R27,Y+19+1
000e7d 9618      	ADIW R26,8
000e7e 913c      	LD   R19,X
000e7f 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e80 89a9      	LDD  R26,Y+17
000e81 89ba      	LDD  R27,Y+17+1
000e82 9615      	ADIW R26,5
000e83 e2e0      	LDI  R30,LOW(32)
000e84 940e 13c7 	CALL SUBOPT_0x63
000e86 e0e1      	LDI  R30,LOW(1)
000e87 93ec      	ST   X,R30
000e88 0000      nop
000e89 0000      nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
                 //nop
000e8a 89ab      	LDD  R26,Y+19
000e8b 89bc      	LDD  R27,Y+19+1
000e8c 9618      	ADIW R26,8
000e8d 912c      	LD   R18,X
000e8e 89ab      	LDD  R26,Y+19
000e8f 89bc      	LDD  R27,Y+19+1
000e90 9618      	ADIW R26,8
000e91 912c      	LD   R18,X
000e92 0000      nop
000e93 89a9      	LDD  R26,Y+17
000e94 89ba      	LDD  R27,Y+17+1
000e95 9615      	ADIW R26,5
000e96 e1e0      	LDI  R30,LOW(16)
000e97 93ec      	ST   X,R30
000e98 2fe1      	MOV  R30,R17
000e99 940e 13d3 	CALL SUBOPT_0x65
000e9b 01df      	MOVW R26,R30
000e9c 01cb      	MOVW R24,R22
000e9d e1e8      	LDI  R30,LOW(24)
000e9e 940e 15d9 	CALL __LSLD12
000ea0 940e 13d7 	CALL SUBOPT_0x66
000ea2 2fe0      	MOV  R30,R16
000ea3 940e 13d3 	CALL SUBOPT_0x65
000ea5 940e 15e5 	CALL __LSLD16
000ea7 940e 13dc 	CALL SUBOPT_0x67
000ea9 2fe3      	MOV  R30,R19
000eaa 940e 13d3 	CALL SUBOPT_0x65
000eac 01df      	MOVW R26,R30
000ead 01cb      	MOVW R24,R22
000eae e0e8      	LDI  R30,LOW(8)
000eaf 940e 15d9 	CALL __LSLD12
000eb1 940e 13dc 	CALL SUBOPT_0x67
000eb3 2fe2      	MOV  R30,R18
000eb4 940e 13d3 	CALL SUBOPT_0x65
000eb6 940e 13dc 	CALL SUBOPT_0x67
                +
000eb8 85ec     +LDD R30 , Y + 12
000eb9 85fd     +LDD R31 , Y + 12 + 1
000eba 856e     +LDD R22 , Y + 12 + 2
000ebb 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
000ebc 940e 160d 	CALL __LOADLOCR6
000ebe 9665      	ADIW R28,21
000ebf 9508      	RET
                 _HCTL2032_Reset_Counter:
000ec0 81a8      	LD   R26,Y
000ec1 81b9      	LDD  R27,Y+1
000ec2 9616      	ADIW R26,6
000ec3 ece0      	LDI  R30,LOW(192)
000ec4 93ec      	ST   X,R30
000ec5 0000          nop
000ec6 81a8      	LD   R26,Y
000ec7 81b9      	LDD  R27,Y+1
000ec8 9615      	ADIW R26,5
000ec9 ece0      	LDI  R30,LOW(192)
000eca 93ec      	ST   X,R30
000ecb 81a8      	LD   R26,Y
000ecc 81b9      	LDD  R27,Y+1
000ecd 9615      	ADIW R26,5
000ece e1e0      	LDI  R30,LOW(16)
000ecf 93ec      	ST   X,R30
000ed0 81a8      	LD   R26,Y
000ed1 81b9      	LDD  R27,Y+1
000ed2 9616      	ADIW R26,6
000ed3 e0e2      	LDI  R30,LOW(2)
000ed4 93ec      	ST   X,R30
000ed5 9622      	ADIW R28,2
000ed6 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _handler_TCE0_CCA_vect:
000ed7 940e 13e3 	CALL SUBOPT_0x68
000ed9 60e1      	ORI  R30,1
                +
000eda 01d5     +MOVW R26 , R10
000edb 9614     +ADIW R26 , 4
000edc 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000edd 91e0 2514 	LDS  R30,_i_S1030001000
000edf 91f0 2515 	LDS  R31,_i_S1030001000+1
000ee1 9631      	ADIW R30,1
000ee2 93e0 2514 	STS  _i_S1030001000,R30
000ee4 93f0 2515 	STS  _i_S1030001000+1,R31
000ee6 01f5      	MOVW R30,R10
000ee7 81a4      	LDD  R26,Z+4
000ee8 efeb      	LDI  R30,LOW(251)
000ee9 23ea      	AND  R30,R26
                +
000eea 01d5     +MOVW R26 , R10
000eeb 9614     +ADIW R26 , 4
000eec 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000eed 2ded      	MOV  R30,R13
000eee 91a0 2514 	LDS  R26,_i_S1030001000
000ef0 91b0 2515 	LDS  R27,_i_S1030001000+1
000ef2 e0f0      	LDI  R31,0
000ef3 17ae      	CP   R26,R30
000ef4 07bf      	CPC  R27,R31
000ef5 f050      	BRLO _0x2060005
000ef6 01d5      	MOVW R26,R10
000ef7 9614      	ADIW R26,4
000ef8 91ec      	LD   R30,X
000ef9 60e4      	ORI  R30,4
000efa 93ec      	ST   X,R30
000efb e0e0      	LDI  R30,LOW(0)
000efc 93e0 2514 	STS  _i_S1030001000,R30
000efe 93e0 2515 	STS  _i_S1030001000+1,R30
                 _0x2060005:
000f00 c02d      	RJMP _0x2060007
                 _handler_TCE0_CCB_vect:
000f01 940e 13e3 	CALL SUBOPT_0x68
000f03 60e3      	ORI  R30,LOW(0x3)
                +
000f04 01d5     +MOVW R26 , R10
000f05 9614     +ADIW R26 , 4
000f06 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000f07 c026      	RJMP _0x2060007
                 _handler_TCE0_CCC_vect:
000f08 940e 13e3 	CALL SUBOPT_0x68
000f0a 60e2      	ORI  R30,2
                +
000f0b 01d5     +MOVW R26 , R10
000f0c 9614     +ADIW R26 , 4
000f0d 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000f0e c01f      	RJMP _0x2060007
                 _handler_TCE0_CCD_vect:
000f0f 940e 13e3 	CALL SUBOPT_0x68
                +
000f11 01d5     +MOVW R26 , R10
000f12 9614     +ADIW R26 , 4
000f13 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000f14 c019      	RJMP _0x2060007
                 _handler_TCC0_ERR_vect:
000f15 93aa      	ST   -Y,R26
000f16 93ba      	ST   -Y,R27
000f17 93ea      	ST   -Y,R30
000f18 93fa      	ST   -Y,R31
000f19 b7ef      	IN   R30,SREG
000f1a 93ea      	ST   -Y,R30
000f1b 91e0 2516 	LDS  R30,_j_S1030005000
000f1d 5fef      	SUBI R30,-LOW(1)
000f1e 93e0 2516 	STS  _j_S1030005000,R30
000f20 91a0 2516 	LDS  R26,_j_S1030005000
000f22 30a3      	CPI  R26,LOW(0x3)
000f23 f050      	BRLO _0x2060006
000f24 01f5      	MOVW R30,R10
000f25 81a4      	LDD  R26,Z+4
000f26 e4e0      	LDI  R30,LOW(64)
000f27 27ea      	EOR  R30,R26
                +
000f28 01d5     +MOVW R26 , R10
000f29 9614     +ADIW R26 , 4
000f2a 93ec     +ST X , R30
                 	__PUTB1RNS 10,4
000f2b e0e0      	LDI  R30,LOW(0)
000f2c 93e0 2516 	STS  _j_S1030005000,R30
                 _0x2060006:
                 _0x2060007:
000f2e 91e9      	LD   R30,Y+
000f2f bfef      	OUT  SREG,R30
000f30 91f9      	LD   R31,Y+
000f31 91e9      	LD   R30,Y+
000f32 91b9      	LD   R27,Y+
000f33 91a9      	LD   R26,Y+
000f34 9518      	RETI
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _Pos_Count_HCTL_1:
002400           	.BYTE 0x4
                 _Pos_Count_HCTL_2:
002404           	.BYTE 0x4
                 _Pos_Count_HCTL_3:
002408           	.BYTE 0x4
                 _Pos_Count_HCTL_4:
00240c           	.BYTE 0x4
                 _Temp_Pos_Count_HCTL_1:
002410           	.BYTE 0x4
                 _Temp_Pos_Count_HCTL_2:
002414           	.BYTE 0x4
                 _Temp_Pos_Count_HCTL_3:
002418           	.BYTE 0x4
                 _Temp_Pos_Count_HCTL_4:
00241c           	.BYTE 0x4
                 _h:
002420           	.BYTE 0x4
                 _ad:
002424           	.BYTE 0x4
                 _bd:
002428           	.BYTE 0x4
                 _ad1:
00242c           	.BYTE 0x4
                 _bd1:
002430           	.BYTE 0x4
                 _bi1:
002434           	.BYTE 0x4
                 _bi2:
002438           	.BYTE 0x4
                 _a01:
00243c           	.BYTE 0x4
                 _a02:
002440           	.BYTE 0x4
                 _x_1:
002444           	.BYTE 0x4
                 _x_2:
002448           	.BYTE 0x4
                 _x_3:
00244c           	.BYTE 0x4
                 _x_4:
002450           	.BYTE 0x4
                 _x_a1:
002454           	.BYTE 0x4
                 _x_5:
002458           	.BYTE 0x4
                 _x_6:
00245c           	.BYTE 0x4
                 _x_7:
002460           	.BYTE 0x4
                 _x_8:
002464           	.BYTE 0x4
                 _x_a2:
002468           	.BYTE 0x4
                 _x_1_old:
00246c           	.BYTE 0x4
                 _x_2_old:
002470           	.BYTE 0x4
                 _x_3_old:
002474           	.BYTE 0x4
                 _x_4_old:
002478           	.BYTE 0x4
                 _x_5_old:
00247c           	.BYTE 0x4
                 _x_6_old:
002480           	.BYTE 0x4
                 _x_7_old:
002484           	.BYTE 0x4
                 _x_8_old:
002488           	.BYTE 0x4
                 _x_a1_old:
00248c           	.BYTE 0x4
                 _x_a2_old:
002490           	.BYTE 0x4
                 _Phi:
002494           	.BYTE 0x4
                 _x_1_tk:
002498           	.BYTE 0x4
                 _x_2_tk:
00249c           	.BYTE 0x4
                 _x_3_tk:
0024a0           	.BYTE 0x4
                 _x_4_tk:
0024a4           	.BYTE 0x4
                 _x_a1_tk:
0024a8           	.BYTE 0x4
                 _x_5_tk:
0024ac           	.BYTE 0x4
                 _x_6_tk:
0024b0           	.BYTE 0x4
                 _x_7_tk:
0024b4           	.BYTE 0x4
                 _x_8_tk:
0024b8           	.BYTE 0x4
                 _x_a2_tk:
0024bc           	.BYTE 0x4
                 _norm_e:
0024c0           	.BYTE 0x4
                 _norm_epsilon:
0024c4           	.BYTE 0x4
                 _w_3:
0024c8           	.BYTE 0x4
                 _w_4:
0024cc           	.BYTE 0x4
                 _w_8:
0024d0           	.BYTE 0x4
                 _w_9:
0024d4           	.BYTE 0x4
                 _r_1:
0024d8           	.BYTE 0x4
                 _r_2:
0024dc           	.BYTE 0x4
                 _home_x:
0024e0           	.BYTE 0x4
                 _home_theta:
0024e4           	.BYTE 0x4
                 _u_1:
0024e8           	.BYTE 0x4
                 _u_2:
0024ec           	.BYTE 0x4
                 _u_1_old:
0024f0           	.BYTE 0x4
                 _u_2_old:
0024f4           	.BYTE 0x4
                 _u_11:
0024f8           	.BYTE 0x4
                 _v_1:
0024fc           	.BYTE 0x4
                 _v_2:
002500           	.BYTE 0x4
                 _iterations:
002504           	.BYTE 0x4
                 _iterations_old:
002508           	.BYTE 0x4
                 _count_ref:
00250c           	.BYTE 0x4
                 __seed_G100:
002510           	.BYTE 0x4
                 _i_S1030001000:
002514           	.BYTE 0x2
                 _j_S1030005000:
002516           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
000f35 e0e0      	LDI  R30,LOW(0)
000f36 e0f0      	LDI  R31,HIGH(0)
000f37 93e0 0920 	STS  2336,R30
000f39 93f0 0921 	STS  2336+1,R31
000f3b e8e8      	LDI  R30,LOW(5000)
000f3c e1f3      	LDI  R31,HIGH(5000)
000f3d 93e0 0926 	STS  2342,R30
000f3f 93f0 0927 	STS  2342+1,R31
000f41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000f42 920a      	ST   -Y,R0
000f43 921a      	ST   -Y,R1
000f44 92fa      	ST   -Y,R15
000f45 936a      	ST   -Y,R22
000f46 937a      	ST   -Y,R23
000f47 938a      	ST   -Y,R24
000f48 939a      	ST   -Y,R25
000f49 93aa      	ST   -Y,R26
000f4a 93ba      	ST   -Y,R27
000f4b 93ea      	ST   -Y,R30
000f4c 93fa      	ST   -Y,R31
000f4d b7ef      	IN   R30,SREG
000f4e 93ea      	ST   -Y,R30
000f4f 940e 1608 	CALL __SAVELOCR4
000f51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000f52 91e0 2504 	LDS  R30,_iterations
000f54 91f0 2505 	LDS  R31,_iterations+1
000f56 9160 2506 	LDS  R22,_iterations+2
000f58 9170 2507 	LDS  R23,_iterations+3
000f5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000f5b e6e0      	LDI  R30,LOW(1632)
000f5c e0f6      	LDI  R31,HIGH(1632)
000f5d 93fa      	ST   -Y,R31
000f5e 93ea      	ST   -Y,R30
000f5f e8e0      	LDI  R30,LOW(1664)
000f60 e0f6      	LDI  R31,HIGH(1664)
000f61 93fa      	ST   -Y,R31
000f62 93ea      	ST   -Y,R30
000f63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000f64 eee0      	LDI  R30,LOW(1760)
000f65 e0f6      	LDI  R31,HIGH(1760)
000f66 93fa      	ST   -Y,R31
000f67 93ea      	ST   -Y,R30
000f68 e4e0      	LDI  R30,LOW(1600)
000f69 e0f6      	LDI  R31,HIGH(1600)
000f6a 93fa      	ST   -Y,R31
000f6b 93ea      	ST   -Y,R30
000f6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x5:
000f6d 940e 1454 	CALL __CDF1
                +
000f6f e0a0     +LDI R26 , LOW ( 0x40000000 )
000f70 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000f71 e080     +LDI R24 , BYTE3 ( 0x40000000 )
000f72 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
000f73 940e 14de 	CALL __MULF12
                +
000f75 edab     +LDI R26 , LOW ( 0x40490FDB )
000f76 e0bf     +LDI R27 , HIGH ( 0x40490FDB )
000f77 e489     +LDI R24 , BYTE3 ( 0x40490FDB )
000f78 e490     +LDI R25 , BYTE4 ( 0x40490FDB )
                 	__GETD2N 0x40490FDB
000f79 940e 14de 	CALL __MULF12
000f7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000f7c 01df      	MOVW R26,R30
000f7d 01cb      	MOVW R24,R22
                +
000f7e e0e0     +LDI R30 , LOW ( 0x45800000 )
000f7f e0f0     +LDI R31 , HIGH ( 0x45800000 )
000f80 e860     +LDI R22 , BYTE3 ( 0x45800000 )
000f81 e475     +LDI R23 , BYTE4 ( 0x45800000 )
                 	__GETD1N 0x45800000
000f82 940e 152c 	CALL __DIVF21
000f84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000f85 93e0 2444 	STS  _x_1,R30
000f87 93f0 2445 	STS  _x_1+1,R31
000f89 9360 2446 	STS  _x_1+2,R22
000f8b 9370 2447 	STS  _x_1+3,R23
000f8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000f8e 93e0 2458 	STS  _x_5,R30
000f90 93f0 2459 	STS  _x_5+1,R31
000f92 9360 245a 	STS  _x_5+2,R22
000f94 9370 245b 	STS  _x_5+3,R23
000f96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000f97 93e0 244c 	STS  _x_3,R30
000f99 93f0 244d 	STS  _x_3+1,R31
000f9b 9360 244e 	STS  _x_3+2,R22
000f9d 9370 244f 	STS  _x_3+3,R23
000f9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000fa0 93e0 2460 	STS  _x_7,R30
000fa2 93f0 2461 	STS  _x_7+1,R31
000fa4 9360 2462 	STS  _x_7+2,R22
000fa6 9370 2463 	STS  _x_7+3,R23
000fa8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0xB:
000fa9 91e0 2444 	LDS  R30,_x_1
000fab 91f0 2445 	LDS  R31,_x_1+1
000fad 9160 2446 	LDS  R22,_x_1+2
000faf 9170 2447 	LDS  R23,_x_1+3
000fb1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
000fb2 940e 15ef 	CALL __PUTPARD1
000fb4 940e 0dad 	CALL _fabs
000fb6 01df      	MOVW R26,R30
000fb7 01cb      	MOVW R24,R22
000fb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xD:
000fb9 91e0 246c 	LDS  R30,_x_1_old
000fbb 91f0 246d 	LDS  R31,_x_1_old+1
000fbd 9160 246e 	LDS  R22,_x_1_old+2
000fbf 9170 246f 	LDS  R23,_x_1_old+3
000fc1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0xE:
000fc2 91e0 244c 	LDS  R30,_x_3
000fc4 91f0 244d 	LDS  R31,_x_3+1
000fc6 9160 244e 	LDS  R22,_x_3+2
000fc8 9170 244f 	LDS  R23,_x_3+3
000fca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000fcb e6e6     +LDI R30 , LOW ( 0x3F666666 )
000fcc e6f6     +LDI R31 , HIGH ( 0x3F666666 )
000fcd e666     +LDI R22 , BYTE3 ( 0x3F666666 )
000fce e37f     +LDI R23 , BYTE4 ( 0x3F666666 )
                 	__GETD1N 0x3F666666
000fcf 940e 1571 	CALL __CMPF12
000fd1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
000fd2 91e0 2474 	LDS  R30,_x_3_old
000fd4 91f0 2475 	LDS  R31,_x_3_old+1
000fd6 9160 2476 	LDS  R22,_x_3_old+2
000fd8 9170 2477 	LDS  R23,_x_3_old+3
000fda 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x11:
000fdb 91e0 2458 	LDS  R30,_x_5
000fdd 91f0 2459 	LDS  R31,_x_5+1
000fdf 9160 245a 	LDS  R22,_x_5+2
000fe1 9170 245b 	LDS  R23,_x_5+3
000fe3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x12:
000fe4 91e0 2460 	LDS  R30,_x_7
000fe6 91f0 2461 	LDS  R31,_x_7+1
000fe8 9160 2462 	LDS  R22,_x_7+2
000fea 9170 2463 	LDS  R23,_x_7+3
000fec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000fed 91e0 2484 	LDS  R30,_x_7_old
000fef 91f0 2485 	LDS  R31,_x_7_old+1
000ff1 9160 2486 	LDS  R22,_x_7_old+2
000ff3 9170 2487 	LDS  R23,_x_7_old+3
000ff5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x14:
000ff6 940e 14de 	CALL __MULF12
                +
000ff8 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000ff9 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000ffa e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000ffb e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000ffc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000ffd 940e 148e 	CALL __ADDF12
                +
000fff e0a0     +LDI R26 , LOW ( 0x3F800000 )
001000 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001001 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001002 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001003 940e 152c 	CALL __DIVF21
001005 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x16:
001006 91e0 2420 	LDS  R30,_h
001008 91f0 2421 	LDS  R31,_h+1
00100a 9160 2422 	LDS  R22,_h+2
00100c 9170 2423 	LDS  R23,_h+3
00100e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
00100f 940e 15f4 	CALL __SWAPD12
001011 940e 1487 	CALL __SUBF12
001013 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
001014 91e0 24f0 	LDS  R30,_u_1_old
001016 91f0 24f1 	LDS  R31,_u_1_old+1
001018 9160 24f2 	LDS  R22,_u_1_old+2
00101a 9170 24f3 	LDS  R23,_u_1_old+3
00101c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
00101d 940e 148e 	CALL __ADDF12
00101f 91a0 2420 	LDS  R26,_h
001021 91b0 2421 	LDS  R27,_h+1
001023 9180 2422 	LDS  R24,_h+2
001025 9190 2423 	LDS  R25,_h+3
001027 940e 14de 	CALL __MULF12
001029 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
00102a 91a0 2494 	LDS  R26,_Phi
00102c 91b0 2495 	LDS  R27,_Phi+1
00102e 9180 2496 	LDS  R24,_Phi+2
001030 9190 2497 	LDS  R25,_Phi+3
001032 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
001033 91a0 2420 	LDS  R26,_h
001035 91b0 2421 	LDS  R27,_h+1
001037 9180 2422 	LDS  R24,_h+2
001039 9190 2423 	LDS  R25,_h+3
00103b 940e 14de 	CALL __MULF12
00103d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
00103e 940e 14de 	CALL __MULF12
001040 91a0 2484 	LDS  R26,_x_7_old
001042 91b0 2485 	LDS  R27,_x_7_old+1
001044 9180 2486 	LDS  R24,_x_7_old+2
001046 9190 2487 	LDS  R25,_x_7_old+3
001048 940e 14de 	CALL __MULF12
00104a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
00104b 91e0 24f4 	LDS  R30,_u_2_old
00104d 91f0 24f5 	LDS  R31,_u_2_old+1
00104f 9160 24f6 	LDS  R22,_u_2_old+2
001051 9170 24f7 	LDS  R23,_u_2_old+3
001053 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1E:
001054 91a0 2448 	LDS  R26,_x_2
001056 91b0 2449 	LDS  R27,_x_2+1
001058 9180 244a 	LDS  R24,_x_2+2
00105a 9190 244b 	LDS  R25,_x_2+3
00105c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
00105d 91a0 245c 	LDS  R26,_x_6
00105f 91b0 245d 	LDS  R27,_x_6+1
001061 9180 245e 	LDS  R24,_x_6+2
001063 9190 245f 	LDS  R25,_x_6+3
001065 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x20:
                +
001066 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001067 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001068 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001069 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00106a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
00106b 93e0 24c8 	STS  _w_3,R30
00106d 93f0 24c9 	STS  _w_3+1,R31
00106f 9360 24ca 	STS  _w_3+2,R22
001071 9370 24cb 	STS  _w_3+3,R23
001073 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
001074 940e 15ef 	CALL __PUTPARD1
001076 940c 0dad 	JMP  _fabs
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x23:
001078 dfed      	RCALL SUBOPT_0x20
001079 93e0 24d0 	STS  _w_8,R30
00107b 93f0 24d1 	STS  _w_8+1,R31
00107d 9360 24d2 	STS  _w_8+2,R22
00107f 9370 24d3 	STS  _w_8+3,R23
001081 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
001082 940e 152c 	CALL __DIVF21
001084 940e 141b 	CALL __CFD1U
001086 91a0 250c 	LDS  R26,_count_ref
001088 91b0 250d 	LDS  R27,_count_ref+1
00108a 9180 250e 	LDS  R24,_count_ref+2
00108c 9190 250f 	LDS  R25,_count_ref+3
00108e 940e 1601 	CALL __CPD12
001090 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x25:
001091 93e0 24d8 	STS  _r_1,R30
001093 93f0 24d9 	STS  _r_1+1,R31
001095 9360 24da 	STS  _r_1+2,R22
001097 9370 24db 	STS  _r_1+3,R23
001099 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x26:
00109a 93e0 24dc 	STS  _r_2,R30
00109c 93f0 24dd 	STS  _r_2+1,R31
00109e 9360 24de 	STS  _r_2+2,R22
0010a0 9370 24df 	STS  _r_2+3,R23
0010a2 9a09      	SBI  0x1,1
0010a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x27:
0010a4 dfec      	RCALL SUBOPT_0x25
0010a5 91e0 24e4 	LDS  R30,_home_theta
0010a7 91f0 24e5 	LDS  R31,_home_theta+1
0010a9 9160 24e6 	LDS  R22,_home_theta+2
0010ab 9170 24e7 	LDS  R23,_home_theta+3
0010ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
0010ae defa      	RCALL SUBOPT_0xB
0010af 940e 1487 	CALL __SUBF12
0010b1 01df      	MOVW R26,R30
0010b2 01cb      	MOVW R24,R22
0010b3 940e 14de 	CALL __MULF12
0010b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x29:
0010b6 91e0 2448 	LDS  R30,_x_2
0010b8 91f0 2449 	LDS  R31,_x_2+1
0010ba 9160 244a 	LDS  R22,_x_2+2
0010bc 9170 244b 	LDS  R23,_x_2+3
0010be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x2A:
0010bf 91e0 2450 	LDS  R30,_x_4
0010c1 91f0 2451 	LDS  R31,_x_4+1
0010c3 9160 2452 	LDS  R22,_x_4+2
0010c5 9170 2453 	LDS  R23,_x_4+3
0010c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2B:
0010c8 91e0 24d8 	LDS  R30,_r_1
0010ca 91f0 24d9 	LDS  R31,_r_1+1
0010cc 9160 24da 	LDS  R22,_r_1+2
0010ce 9170 24db 	LDS  R23,_r_1+3
                +
0010d0 eba0     +LDI R26 , LOW ( 0xC0B672B0 )
0010d1 e7b2     +LDI R27 , HIGH ( 0xC0B672B0 )
0010d2 eb86     +LDI R24 , BYTE3 ( 0xC0B672B0 )
0010d3 ec90     +LDI R25 , BYTE4 ( 0xC0B672B0 )
                 	__GETD2N 0xC0B672B0
0010d4 940e 14de 	CALL __MULF12
0010d6 91a0 2454 	LDS  R26,_x_a1
0010d8 91b0 2455 	LDS  R27,_x_a1+1
0010da 9180 2456 	LDS  R24,_x_a1+2
0010dc 9190 2457 	LDS  R25,_x_a1+3
0010de 940e 148e 	CALL __ADDF12
0010e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2C:
0010e1 91a0 24dc 	LDS  R26,_r_2
0010e3 91b0 24dd 	LDS  R27,_r_2+1
0010e5 9180 24de 	LDS  R24,_r_2+2
0010e7 9190 24df 	LDS  R25,_r_2+3
0010e9 def1      	RCALL SUBOPT_0x11
0010ea 940e 1487 	CALL __SUBF12
0010ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2D:
0010ed 91e0 245c 	LDS  R30,_x_6
0010ef 91f0 245d 	LDS  R31,_x_6+1
0010f1 9160 245e 	LDS  R22,_x_6+2
0010f3 9170 245f 	LDS  R23,_x_6+3
0010f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2E:
0010f6 91e0 2464 	LDS  R30,_x_8
0010f8 91f0 2465 	LDS  R31,_x_8+1
0010fa 9160 2466 	LDS  R22,_x_8+2
0010fc 9170 2467 	LDS  R23,_x_8+3
0010fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2F:
0010ff 91e0 24dc 	LDS  R30,_r_2
001101 91f0 24dd 	LDS  R31,_r_2+1
001103 9160 24de 	LDS  R22,_r_2+2
001105 9170 24df 	LDS  R23,_r_2+3
                +
001107 efa6     +LDI R26 , LOW ( 0xC03028F6 )
001108 e2b8     +LDI R27 , HIGH ( 0xC03028F6 )
001109 e380     +LDI R24 , BYTE3 ( 0xC03028F6 )
00110a ec90     +LDI R25 , BYTE4 ( 0xC03028F6 )
                 	__GETD2N 0xC03028F6
00110b 940e 14de 	CALL __MULF12
00110d 91a0 2468 	LDS  R26,_x_a2
00110f 91b0 2469 	LDS  R27,_x_a2+1
001111 9180 246a 	LDS  R24,_x_a2+2
001113 9190 246b 	LDS  R25,_x_a2+3
001115 940e 148e 	CALL __ADDF12
001117 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
001118 940e 148e 	CALL __ADDF12
00111a 940e 15ef 	CALL __PUTPARD1
00111c 940c 1591 	JMP  _sqrt
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
00111e 91a0 249c 	LDS  R26,_x_2_tk
001120 91b0 249d 	LDS  R27,_x_2_tk+1
001122 9180 249e 	LDS  R24,_x_2_tk+2
001124 9190 249f 	LDS  R25,_x_2_tk+3
001126 df8f      	RCALL SUBOPT_0x29
001127 940e 1487 	CALL __SUBF12
001129 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x32:
00112a 91a0 24a0 	LDS  R26,_x_3_tk
00112c 91b0 24a1 	LDS  R27,_x_3_tk+1
00112e 9180 24a2 	LDS  R24,_x_3_tk+2
001130 9190 24a3 	LDS  R25,_x_3_tk+3
001132 de8f      	RCALL SUBOPT_0xE
001133 940e 1487 	CALL __SUBF12
001135 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x33:
001136 91a0 24a4 	LDS  R26,_x_4_tk
001138 91b0 24a5 	LDS  R27,_x_4_tk+1
00113a 9180 24a6 	LDS  R24,_x_4_tk+2
00113c 9190 24a7 	LDS  R25,_x_4_tk+3
00113e df80      	RCALL SUBOPT_0x2A
00113f 940e 1487 	CALL __SUBF12
001141 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x34:
001142 91a0 24a8 	LDS  R26,_x_a1_tk
001144 91b0 24a9 	LDS  R27,_x_a1_tk+1
001146 9180 24aa 	LDS  R24,_x_a1_tk+2
001148 9190 24ab 	LDS  R25,_x_a1_tk+3
00114a 91e0 2454 	LDS  R30,_x_a1
00114c 91f0 2455 	LDS  R31,_x_a1+1
00114e 9160 2456 	LDS  R22,_x_a1+2
001150 9170 2457 	LDS  R23,_x_a1+3
001152 940e 1487 	CALL __SUBF12
001154 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x35:
001155 91a0 24ac 	LDS  R26,_x_5_tk
001157 91b0 24ad 	LDS  R27,_x_5_tk+1
001159 9180 24ae 	LDS  R24,_x_5_tk+2
00115b 9190 24af 	LDS  R25,_x_5_tk+3
00115d de7d      	RCALL SUBOPT_0x11
00115e 940e 1487 	CALL __SUBF12
001160 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x36:
001161 91a0 24b0 	LDS  R26,_x_6_tk
001163 91b0 24b1 	LDS  R27,_x_6_tk+1
001165 9180 24b2 	LDS  R24,_x_6_tk+2
001167 9190 24b3 	LDS  R25,_x_6_tk+3
001169 df83      	RCALL SUBOPT_0x2D
00116a 940e 1487 	CALL __SUBF12
00116c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x37:
00116d 91a0 24b4 	LDS  R26,_x_7_tk
00116f 91b0 24b5 	LDS  R27,_x_7_tk+1
001171 9180 24b6 	LDS  R24,_x_7_tk+2
001173 9190 24b7 	LDS  R25,_x_7_tk+3
001175 de6e      	RCALL SUBOPT_0x12
001176 940e 1487 	CALL __SUBF12
001178 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x38:
001179 91a0 24b8 	LDS  R26,_x_8_tk
00117b 91b0 24b9 	LDS  R27,_x_8_tk+1
00117d 9180 24ba 	LDS  R24,_x_8_tk+2
00117f 9190 24bb 	LDS  R25,_x_8_tk+3
001181 df74      	RCALL SUBOPT_0x2E
001182 940e 1487 	CALL __SUBF12
001184 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x39:
001185 91a0 24bc 	LDS  R26,_x_a2_tk
001187 91b0 24bd 	LDS  R27,_x_a2_tk+1
001189 9180 24be 	LDS  R24,_x_a2_tk+2
00118b 9190 24bf 	LDS  R25,_x_a2_tk+3
00118d 91e0 2468 	LDS  R30,_x_a2
00118f 91f0 2469 	LDS  R31,_x_a2+1
001191 9160 246a 	LDS  R22,_x_a2+2
001193 9170 246b 	LDS  R23,_x_a2+3
001195 940e 1487 	CALL __SUBF12
001197 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3A:
001198 de10      	RCALL SUBOPT_0xB
                +
001199 eba0     +LDI R26 , LOW ( 0xC0B672B0 )
00119a e7b2     +LDI R27 , HIGH ( 0xC0B672B0 )
00119b eb86     +LDI R24 , BYTE3 ( 0xC0B672B0 )
00119c ec90     +LDI R25 , BYTE4 ( 0xC0B672B0 )
                 	__GETD2N 0xC0B672B0
00119d 940e 14de 	CALL __MULF12
00119f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3B:
0011a0 df15      	RCALL SUBOPT_0x29
                +
0011a1 ecad     +LDI R26 , LOW ( 0x3E4CCCCD )
0011a2 ecbc     +LDI R27 , HIGH ( 0x3E4CCCCD )
0011a3 e48c     +LDI R24 , BYTE3 ( 0x3E4CCCCD )
0011a4 e39e     +LDI R25 , BYTE4 ( 0x3E4CCCCD )
                 	__GETD2N 0x3E4CCCCD
0011a5 940e 14de 	CALL __MULF12
0011a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3C:
0011a8 de19      	RCALL SUBOPT_0xE
                +
0011a9 e0a0     +LDI R26 , LOW ( 0xC0200000 )
0011aa e0b0     +LDI R27 , HIGH ( 0xC0200000 )
0011ab e280     +LDI R24 , BYTE3 ( 0xC0200000 )
0011ac ec90     +LDI R25 , BYTE4 ( 0xC0200000 )
                 	__GETD2N 0xC0200000
0011ad 940e 14de 	CALL __MULF12
0011af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3D:
0011b0 df0e      	RCALL SUBOPT_0x2A
                +
0011b1 e2ac     +LDI R26 , LOW ( 0xBE19652C )
0011b2 e6b5     +LDI R27 , HIGH ( 0xBE19652C )
0011b3 e189     +LDI R24 , BYTE3 ( 0xBE19652C )
0011b4 eb9e     +LDI R25 , BYTE4 ( 0xBE19652C )
                 	__GETD2N 0xBE19652C
0011b5 940e 14de 	CALL __MULF12
0011b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3E:
0011b8 940e 148e 	CALL __ADDF12
0011ba 91a0 2454 	LDS  R26,_x_a1
0011bc 91b0 2455 	LDS  R27,_x_a1+1
0011be 9180 2456 	LDS  R24,_x_a1+2
0011c0 9190 2457 	LDS  R25,_x_a1+3
0011c2 940e 148e 	CALL __ADDF12
0011c4 93e0 24fc 	STS  _v_1,R30
0011c6 93f0 24fd 	STS  _v_1+1,R31
0011c8 9360 24fe 	STS  _v_1+2,R22
0011ca 9370 24ff 	STS  _v_1+3,R23
0011cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
0011cd de0d      	RCALL SUBOPT_0x11
                +
0011ce efa6     +LDI R26 , LOW ( 0xC03028F6 )
0011cf e2b8     +LDI R27 , HIGH ( 0xC03028F6 )
0011d0 e380     +LDI R24 , BYTE3 ( 0xC03028F6 )
0011d1 ec90     +LDI R25 , BYTE4 ( 0xC03028F6 )
                 	__GETD2N 0xC03028F6
0011d2 940e 14de 	CALL __MULF12
0011d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
0011d5 df17      	RCALL SUBOPT_0x2D
                +
0011d6 efa9     +LDI R26 , LOW ( 0x3DE90FF9 )
0011d7 e0bf     +LDI R27 , HIGH ( 0x3DE90FF9 )
0011d8 ee89     +LDI R24 , BYTE3 ( 0x3DE90FF9 )
0011d9 e39d     +LDI R25 , BYTE4 ( 0x3DE90FF9 )
                 	__GETD2N 0x3DE90FF9
0011da 940e 14de 	CALL __MULF12
0011dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
0011dd de06      	RCALL SUBOPT_0x12
                +
0011de e0a0     +LDI R26 , LOW ( 0x40200000 )
0011df e0b0     +LDI R27 , HIGH ( 0x40200000 )
0011e0 e280     +LDI R24 , BYTE3 ( 0x40200000 )
0011e1 e490     +LDI R25 , BYTE4 ( 0x40200000 )
                 	__GETD2N 0x40200000
0011e2 940e 14de 	CALL __MULF12
0011e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
0011e5 df10      	RCALL SUBOPT_0x2E
                +
0011e6 eea9     +LDI R26 , LOW ( 0x3E2FB7E9 )
0011e7 ebb7     +LDI R27 , HIGH ( 0x3E2FB7E9 )
0011e8 e28f     +LDI R24 , BYTE3 ( 0x3E2FB7E9 )
0011e9 e39e     +LDI R25 , BYTE4 ( 0x3E2FB7E9 )
                 	__GETD2N 0x3E2FB7E9
0011ea 940e 14de 	CALL __MULF12
0011ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x43:
0011ed 940e 148e 	CALL __ADDF12
0011ef 91a0 2468 	LDS  R26,_x_a2
0011f1 91b0 2469 	LDS  R27,_x_a2+1
0011f3 9180 246a 	LDS  R24,_x_a2+2
0011f5 9190 246b 	LDS  R25,_x_a2+3
0011f7 940e 148e 	CALL __ADDF12
0011f9 93e0 2500 	STS  _v_2,R30
0011fb 93f0 2501 	STS  _v_2+1,R31
0011fd 9360 2502 	STS  _v_2+2,R22
0011ff 9370 2503 	STS  _v_2+3,R23
001201 91a0 24fc 	LDS  R26,_v_1
001203 91b0 24fd 	LDS  R27,_v_1+1
001205 9180 24fe 	LDS  R24,_v_1+2
001207 9190 24ff 	LDS  R25,_v_1+3
001209 de5c      	RCALL SUBOPT_0x20
00120a 940e 1571 	CALL __CMPF12
00120c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x44:
00120d 91a0 24fc 	LDS  R26,_v_1
00120f 91b0 24fd 	LDS  R27,_v_1+1
001211 9180 24fe 	LDS  R24,_v_1+2
001213 9190 24ff 	LDS  R25,_v_1+3
                +
001215 e0e0     +LDI R30 , LOW ( 0xBF800000 )
001216 e0f0     +LDI R31 , HIGH ( 0xBF800000 )
001217 e860     +LDI R22 , BYTE3 ( 0xBF800000 )
001218 eb7f     +LDI R23 , BYTE4 ( 0xBF800000 )
                 	__GETD1N 0xBF800000
001219 940e 1571 	CALL __CMPF12
00121b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x45:
                +
00121c e0e0     +LDI R30 , LOW ( 0xBF800000 )
00121d e0f0     +LDI R31 , HIGH ( 0xBF800000 )
00121e e860     +LDI R22 , BYTE3 ( 0xBF800000 )
00121f eb7f     +LDI R23 , BYTE4 ( 0xBF800000 )
                 	__GETD1N 0xBF800000
001220 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
001221 91e0 24fc 	LDS  R30,_v_1
001223 91f0 24fd 	LDS  R31,_v_1+1
001225 9160 24fe 	LDS  R22,_v_1+2
001227 9170 24ff 	LDS  R23,_v_1+3
001229 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x47:
00122a 91a0 2500 	LDS  R26,_v_2
00122c 91b0 2501 	LDS  R27,_v_2+1
00122e 9180 2502 	LDS  R24,_v_2+2
001230 9190 2503 	LDS  R25,_v_2+3
001232 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
001233 dff6      	RCALL SUBOPT_0x47
001234 dfe7      	RCALL SUBOPT_0x45
001235 940e 1571 	CALL __CMPF12
001237 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
001238 91e0 2500 	LDS  R30,_v_2
00123a 91f0 2501 	LDS  R31,_v_2+1
00123c 9160 2502 	LDS  R22,_v_2+2
00123e 9170 2503 	LDS  R23,_v_2+3
001240 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 56 TIMES, CODE SIZE REDUCTION:272 WORDS
                 SUBOPT_0x4A:
001241 01d8      	MOVW R26,R16
                +
001242 5f0f     +SUBI R16 , LOW ( - 1 )
001243 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001244 91ec      	LD   R30,X
001245 93ea      	ST   -Y,R30
001246 940c 01e2 	JMP  _putchar_usartf0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
001248 91e0 2454 	LDS  R30,_x_a1
00124a 91f0 2455 	LDS  R31,_x_a1+1
00124c 9160 2456 	LDS  R22,_x_a1+2
00124e 9170 2457 	LDS  R23,_x_a1+3
001250 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
001251 91e0 2468 	LDS  R30,_x_a2
001253 91f0 2469 	LDS  R31,_x_a2+1
001255 9160 246a 	LDS  R22,_x_a2+2
001257 9170 246b 	LDS  R23,_x_a2+3
001259 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4D:
00125a 91a0 2444 	LDS  R26,_x_1
00125c 91b0 2445 	LDS  R27,_x_1+1
00125e 9180 2446 	LDS  R24,_x_1+2
001260 9190 2447 	LDS  R25,_x_1+3
001262 91e0 24d8 	LDS  R30,_r_1
001264 91f0 24d9 	LDS  R31,_r_1+1
001266 9160 24da 	LDS  R22,_r_1+2
001268 9170 24db 	LDS  R23,_r_1+3
00126a 940e 1487 	CALL __SUBF12
00126c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4E:
                +
00126d e0aa     +LDI R26 , LOW ( 0x3BA3D70A )
00126e edb7     +LDI R27 , HIGH ( 0x3BA3D70A )
00126f ea83     +LDI R24 , BYTE3 ( 0x3BA3D70A )
001270 e39b     +LDI R25 , BYTE4 ( 0x3BA3D70A )
                 	__GETD2N 0x3BA3D70A
001271 940e 14de 	CALL __MULF12
001273 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001274 91e0 24e8 	LDS  R30,_u_1
001276 91f0 24e9 	LDS  R31,_u_1+1
001278 9160 24ea 	LDS  R22,_u_1+2
00127a 9170 24eb 	LDS  R23,_u_1+3
00127c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
00127d 940e 1487 	CALL __SUBF12
                +
00127f ecad     +LDI R26 , LOW ( 0x3E4CCCCD )
001280 ecbc     +LDI R27 , HIGH ( 0x3E4CCCCD )
001281 e48c     +LDI R24 , BYTE3 ( 0x3E4CCCCD )
001282 e39e     +LDI R25 , BYTE4 ( 0x3E4CCCCD )
                 	__GETD2N 0x3E4CCCCD
001283 940e 14de 	CALL __MULF12
001285 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x51:
001286 91a0 2458 	LDS  R26,_x_5
001288 91b0 2459 	LDS  R27,_x_5+1
00128a 9180 245a 	LDS  R24,_x_5+2
00128c 9190 245b 	LDS  R25,_x_5+3
00128e 91e0 24dc 	LDS  R30,_r_2
001290 91f0 24dd 	LDS  R31,_r_2+1
001292 9160 24de 	LDS  R22,_r_2+2
001294 9170 24df 	LDS  R23,_r_2+3
001296 940e 1487 	CALL __SUBF12
001298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001299 91e0 24ec 	LDS  R30,_u_2
00129b 91f0 24ed 	LDS  R31,_u_2+1
00129d 9160 24ee 	LDS  R22,_u_2+2
00129f 9170 24ef 	LDS  R23,_u_2+3
0012a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x53:
0012a2 e0e0      	LDI  R30,LOW(0)
0012a3 93e0 24e8 	STS  _u_1,R30
0012a5 93e0 24e9 	STS  _u_1+1,R30
0012a7 93e0 24ea 	STS  _u_1+2,R30
0012a9 93e0 24eb 	STS  _u_1+3,R30
0012ab 93e0 24ec 	STS  _u_2,R30
0012ad 93e0 24ed 	STS  _u_2+1,R30
0012af 93e0 24ee 	STS  _u_2+2,R30
0012b1 93e0 24ef 	STS  _u_2+3,R30
0012b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x54:
0012b4 93e0 24fc 	STS  _v_1,R30
0012b6 93e0 24fd 	STS  _v_1+1,R30
0012b8 93e0 24fe 	STS  _v_1+2,R30
0012ba 93e0 24ff 	STS  _v_1+3,R30
0012bc e0e0      	LDI  R30,LOW(0)
0012bd 93e0 2500 	STS  _v_2,R30
0012bf 93e0 2501 	STS  _v_2+1,R30
0012c1 93e0 2502 	STS  _v_2+2,R30
0012c3 93e0 2503 	STS  _v_2+3,R30
0012c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:101 WORDS
                 SUBOPT_0x55:
0012c6 e0e0      	LDI  R30,LOW(0)
0012c7 93e0 2454 	STS  _x_a1,R30
0012c9 93e0 2455 	STS  _x_a1+1,R30
0012cb 93e0 2456 	STS  _x_a1+2,R30
0012cd 93e0 2457 	STS  _x_a1+3,R30
0012cf 93e0 248c 	STS  _x_a1_old,R30
0012d1 93e0 248d 	STS  _x_a1_old+1,R30
0012d3 93e0 248e 	STS  _x_a1_old+2,R30
0012d5 93e0 248f 	STS  _x_a1_old+3,R30
0012d7 93e0 24a8 	STS  _x_a1_tk,R30
0012d9 93e0 24a9 	STS  _x_a1_tk+1,R30
0012db 93e0 24aa 	STS  _x_a1_tk+2,R30
0012dd 93e0 24ab 	STS  _x_a1_tk+3,R30
0012df 93e0 2468 	STS  _x_a2,R30
0012e1 93e0 2469 	STS  _x_a2+1,R30
0012e3 93e0 246a 	STS  _x_a2+2,R30
0012e5 93e0 246b 	STS  _x_a2+3,R30
0012e7 93e0 2490 	STS  _x_a2_old,R30
0012e9 93e0 2491 	STS  _x_a2_old+1,R30
0012eb 93e0 2492 	STS  _x_a2_old+2,R30
0012ed 93e0 2493 	STS  _x_a2_old+3,R30
0012ef 93e0 24bc 	STS  _x_a2_tk,R30
0012f1 93e0 24bd 	STS  _x_a2_tk+1,R30
0012f3 93e0 24be 	STS  _x_a2_tk+2,R30
0012f5 93e0 24bf 	STS  _x_a2_tk+3,R30
0012f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x56:
0012f8 93e0 24f0 	STS  _u_1_old,R30
0012fa 93e0 24f1 	STS  _u_1_old+1,R30
0012fc 93e0 24f2 	STS  _u_1_old+2,R30
0012fe 93e0 24f3 	STS  _u_1_old+3,R30
001300 e0e0      	LDI  R30,LOW(0)
001301 93e0 24f4 	STS  _u_2_old,R30
001303 93e0 24f5 	STS  _u_2_old+1,R30
001305 93e0 24f6 	STS  _u_2_old+2,R30
001307 93e0 24f7 	STS  _u_2_old+3,R30
001309 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x57:
00130a 91a0 2420 	LDS  R26,_h
00130c 91b0 2421 	LDS  R27,_h+1
00130e 9180 2422 	LDS  R24,_h+2
001310 9190 2423 	LDS  R25,_h+3
                +
001312 eced     +LDI R30 , LOW ( 0x3D4CCCCD )
001313 ecfc     +LDI R31 , HIGH ( 0x3D4CCCCD )
001314 e46c     +LDI R22 , BYTE3 ( 0x3D4CCCCD )
001315 e37d     +LDI R23 , BYTE4 ( 0x3D4CCCCD )
                 	__GETD1N 0x3D4CCCCD
001316 940e 152c 	CALL __DIVF21
001318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x58:
001319 dcec      	RCALL SUBOPT_0x16
                +
00131a e0a0     +LDI R26 , LOW ( 0x41200000 )
00131b e0b0     +LDI R27 , HIGH ( 0x41200000 )
00131c e280     +LDI R24 , BYTE3 ( 0x41200000 )
00131d e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
00131e ccd7      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
00131f dce6      	RCALL SUBOPT_0x16
                +
001320 e0a0     +LDI R26 , LOW ( 0x40A00000 )
001321 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
001322 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
001323 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
001324 ccd1      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x5A:
001325 e0e0      	LDI  R30,LOW(0)
001326 93e0 246c 	STS  _x_1_old,R30
001328 93e0 246d 	STS  _x_1_old+1,R30
00132a 93e0 246e 	STS  _x_1_old+2,R30
00132c 93e0 246f 	STS  _x_1_old+3,R30
00132e 93e0 2470 	STS  _x_2_old,R30
001330 93e0 2471 	STS  _x_2_old+1,R30
001332 93e0 2472 	STS  _x_2_old+2,R30
001334 93e0 2473 	STS  _x_2_old+3,R30
001336 93e0 2474 	STS  _x_3_old,R30
001338 93e0 2475 	STS  _x_3_old+1,R30
00133a 93e0 2476 	STS  _x_3_old+2,R30
00133c 93e0 2477 	STS  _x_3_old+3,R30
00133e 93e0 2478 	STS  _x_4_old,R30
001340 93e0 2479 	STS  _x_4_old+1,R30
001342 93e0 247a 	STS  _x_4_old+2,R30
001344 93e0 247b 	STS  _x_4_old+3,R30
001346 93e0 247c 	STS  _x_5_old,R30
001348 93e0 247d 	STS  _x_5_old+1,R30
00134a 93e0 247e 	STS  _x_5_old+2,R30
00134c 93e0 247f 	STS  _x_5_old+3,R30
00134e 93e0 2480 	STS  _x_6_old,R30
001350 93e0 2481 	STS  _x_6_old+1,R30
001352 93e0 2482 	STS  _x_6_old+2,R30
001354 93e0 2483 	STS  _x_6_old+3,R30
001356 93e0 2484 	STS  _x_7_old,R30
001358 93e0 2485 	STS  _x_7_old+1,R30
00135a 93e0 2486 	STS  _x_7_old+2,R30
00135c 93e0 2487 	STS  _x_7_old+3,R30
00135e 93e0 2488 	STS  _x_8_old,R30
001360 93e0 2489 	STS  _x_8_old+1,R30
001362 93e0 248a 	STS  _x_8_old+2,R30
001364 93e0 248b 	STS  _x_8_old+3,R30
001366 cf3b      	RJMP SUBOPT_0x53
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5B:
001367 91e0 24e0 	LDS  R30,_home_x
001369 91f0 24e1 	LDS  R31,_home_x+1
00136b 9160 24e2 	LDS  R22,_home_x+2
00136d 9170 24e3 	LDS  R23,_home_x+3
00136f cd34      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5C:
001370 93e0 24dc 	STS  _r_2,R30
001372 93f0 24dd 	STS  _r_2+1,R31
001374 9360 24de 	STS  _r_2+2,R22
001376 9370 24df 	STS  _r_2+3,R23
001378 e0e0      	LDI  R30,LOW(0)
001379 93e0 250c 	STS  _count_ref,R30
00137b 93e0 250d 	STS  _count_ref+1,R30
00137d 93e0 250e 	STS  _count_ref+2,R30
00137f 93e0 250f 	STS  _count_ref+3,R30
001381 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5D:
                +
001382 e0ea     +LDI R30 , LOW ( 0x3C23D70A )
001383 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
001384 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
001385 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
001386 93e0 2420 	STS  _h,R30
001388 93f0 2421 	STS  _h+1,R31
00138a 9360 2422 	STS  _h+2,R22
00138c 9370 2423 	STS  _h+3,R23
00138e 940c 0b32 	JMP  _estimation_param_init
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5E:
001390 e8e0      	LDI  R30,LOW(1664)
001391 e0f6      	LDI  R31,HIGH(1664)
001392 93fa      	ST   -Y,R31
001393 93ea      	ST   -Y,R30
001394 940e 0ec0 	CALL _HCTL2032_Reset_Counter
001396 e4e0      	LDI  R30,LOW(1600)
001397 e0f6      	LDI  R31,HIGH(1600)
001398 93fa      	ST   -Y,R31
001399 93ea      	ST   -Y,R30
00139a 940c 0ec0 	JMP  _HCTL2032_Reset_Counter
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5F:
00139c 93e0 24e8 	STS  _u_1,R30
00139e 93f0 24e9 	STS  _u_1+1,R31
0013a0 9360 24ea 	STS  _u_1+2,R22
0013a2 9370 24eb 	STS  _u_1+3,R23
0013a4 e0e0      	LDI  R30,LOW(0)
0013a5 93e0 24ec 	STS  _u_2,R30
0013a7 93e0 24ed 	STS  _u_2+1,R30
0013a9 93e0 24ee 	STS  _u_2+2,R30
0013ab 93e0 24ef 	STS  _u_2+3,R30
0013ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x60:
0013ae 9801      	CBI  0x0,1
0013af e0e0      	LDI  R30,LOW(0)
0013b0 93e0 24e8 	STS  _u_1,R30
0013b2 93e0 24e9 	STS  _u_1+1,R30
0013b4 93e0 24ea 	STS  _u_1+2,R30
0013b6 93e0 24eb 	STS  _u_1+3,R30
0013b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x61:
0013b9 93e0 24ec 	STS  _u_2,R30
0013bb 93f0 24ed 	STS  _u_2+1,R31
0013bd 9360 24ee 	STS  _u_2+2,R22
0013bf 9370 24ef 	STS  _u_2+3,R23
0013c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
0013c2 93ec      	ST   X,R30
0013c3 81a9      	LDD  R26,Y+1
0013c4 81ba      	LDD  R27,Y+1+1
0013c5 9615      	ADIW R26,5
0013c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x63:
0013c7 93ec      	ST   X,R30
0013c8 89a9      	LDD  R26,Y+17
0013c9 89ba      	LDD  R27,Y+17+1
0013ca 9616      	ADIW R26,6
0013cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
0013cc e2e0      	LDI  R30,LOW(32)
0013cd 93ec      	ST   X,R30
0013ce 89a9      	LDD  R26,Y+17
0013cf 89ba      	LDD  R27,Y+17+1
0013d0 9615      	ADIW R26,5
0013d1 e0e1      	LDI  R30,LOW(1)
0013d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x65:
0013d3 e0f0      	LDI  R31,0
0013d4 940e 15ea 	CALL __CWD1
0013d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
                +
0013d7 87ec     +STD Y + 12 , R30
0013d8 87fd     +STD Y + 12 + 1 , R31
0013d9 876e     +STD Y + 12 + 2 , R22
0013da 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0013db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x67:
                +
0013dc 85ac     +LDD R26 , Y + 12
0013dd 85bd     +LDD R27 , Y + 12 + 1
0013de 858e     +LDD R24 , Y + 12 + 2
0013df 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0013e0 940e 15cc 	CALL __ORD12
0013e2 cff4      	RJMP SUBOPT_0x66
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x68:
0013e3 93aa      	ST   -Y,R26
0013e4 93ba      	ST   -Y,R27
0013e5 93ea      	ST   -Y,R30
0013e6 93fa      	ST   -Y,R31
0013e7 b7ef      	IN   R30,SREG
0013e8 93ea      	ST   -Y,R30
0013e9 01f5      	MOVW R30,R10
0013ea 81a4      	LDD  R26,Z+4
0013eb efec      	LDI  R30,LOW(252)
0013ec 23ea      	AND  R30,R26
0013ed 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
0013ee 2355      	TST  R21
0013ef f442      	BRPL __REPACK
0013f0 3850      	CPI  R21,0x80
0013f1 f411      	BRNE __ROUND_REPACK0
0013f2 ffe0      	SBRS R30,0
0013f3 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0013f4 9631      	ADIW R30,1
0013f5 1f69      	ADC  R22,R25
0013f6 1f79      	ADC  R23,R25
0013f7 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0013f8 e850      	LDI  R21,0x80
0013f9 2757      	EOR  R21,R23
0013fa f411      	BRNE __REPACK0
0013fb 935f      	PUSH R21
0013fc c0cf      	RJMP __ZERORES
                 __REPACK0:
0013fd 3f5f      	CPI  R21,0xFF
0013fe f031      	BREQ __REPACK1
0013ff 0f66      	LSL  R22
001400 0c00      	LSL  R0
001401 9557      	ROR  R21
001402 9567      	ROR  R22
001403 2f75      	MOV  R23,R21
001404 9508      	RET
                 __REPACK1:
001405 935f      	PUSH R21
001406 2000      	TST  R0
001407 f00a      	BRMI __REPACK2
001408 c0cf      	RJMP __MAXRES
                 __REPACK2:
001409 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00140a e850      	LDI  R21,0x80
00140b 2e19      	MOV  R1,R25
00140c 2215      	AND  R1,R21
00140d 0f88      	LSL  R24
00140e 1f99      	ROL  R25
00140f 2795      	EOR  R25,R21
001410 0f55      	LSL  R21
001411 9587      	ROR  R24
                 
                 __UNPACK1:
001412 e850      	LDI  R21,0x80
001413 2e07      	MOV  R0,R23
001414 2205      	AND  R0,R21
001415 0f66      	LSL  R22
001416 1f77      	ROL  R23
001417 2775      	EOR  R23,R21
001418 0f55      	LSL  R21
001419 9567      	ROR  R22
00141a 9508      	RET
                 
                 __CFD1U:
00141b 9468      	SET
00141c c001      	RJMP __CFD1U0
                 __CFD1:
00141d 94e8      	CLT
                 __CFD1U0:
00141e 935f      	PUSH R21
00141f dff2      	RCALL __UNPACK1
001420 3870      	CPI  R23,0x80
001421 f018      	BRLO __CFD10
001422 3f7f      	CPI  R23,0xFF
001423 f408      	BRCC __CFD10
001424 c0a7      	RJMP __ZERORES
                 __CFD10:
001425 e156      	LDI  R21,22
001426 1b57      	SUB  R21,R23
001427 f4aa      	BRPL __CFD11
001428 9551      	NEG  R21
001429 3058      	CPI  R21,8
00142a f40e      	BRTC __CFD19
00142b 3059      	CPI  R21,9
                 __CFD19:
00142c f030      	BRLO __CFD17
00142d efef      	SER  R30
00142e efff      	SER  R31
00142f ef6f      	SER  R22
001430 e77f      	LDI  R23,0x7F
001431 f977      	BLD  R23,7
001432 c01a      	RJMP __CFD15
                 __CFD17:
001433 2777      	CLR  R23
001434 2355      	TST  R21
001435 f0b9      	BREQ __CFD15
                 __CFD18:
001436 0fee      	LSL  R30
001437 1fff      	ROL  R31
001438 1f66      	ROL  R22
001439 1f77      	ROL  R23
00143a 955a      	DEC  R21
00143b f7d1      	BRNE __CFD18
00143c c010      	RJMP __CFD15
                 __CFD11:
00143d 2777      	CLR  R23
                 __CFD12:
00143e 3058      	CPI  R21,8
00143f f028      	BRLO __CFD13
001440 2fef      	MOV  R30,R31
001441 2ff6      	MOV  R31,R22
001442 2f67      	MOV  R22,R23
001443 5058      	SUBI R21,8
001444 cff9      	RJMP __CFD12
                 __CFD13:
001445 2355      	TST  R21
001446 f031      	BREQ __CFD15
                 __CFD14:
001447 9576      	LSR  R23
001448 9567      	ROR  R22
001449 95f7      	ROR  R31
00144a 95e7      	ROR  R30
00144b 955a      	DEC  R21
00144c f7d1      	BRNE __CFD14
                 __CFD15:
00144d 2000      	TST  R0
00144e f40a      	BRPL __CFD16
00144f d181      	RCALL __ANEGD1
                 __CFD16:
001450 915f      	POP  R21
001451 9508      	RET
                 
                 __CDF1U:
001452 9468      	SET
001453 c001      	RJMP __CDF1U0
                 __CDF1:
001454 94e8      	CLT
                 __CDF1U0:
001455 9730      	SBIW R30,0
001456 4060      	SBCI R22,0
001457 4070      	SBCI R23,0
001458 f0b1      	BREQ __CDF10
001459 2400      	CLR  R0
00145a f026      	BRTS __CDF11
00145b 2377      	TST  R23
00145c f412      	BRPL __CDF11
00145d 9400      	COM  R0
00145e d172      	RCALL __ANEGD1
                 __CDF11:
00145f 2e17      	MOV  R1,R23
001460 e17e      	LDI  R23,30
001461 2011      	TST  R1
                 __CDF12:
001462 f032      	BRMI __CDF13
001463 957a      	DEC  R23
001464 0fee      	LSL  R30
001465 1fff      	ROL  R31
001466 1f66      	ROL  R22
001467 1c11      	ROL  R1
001468 cff9      	RJMP __CDF12
                 __CDF13:
001469 2fef      	MOV  R30,R31
00146a 2ff6      	MOV  R31,R22
00146b 2d61      	MOV  R22,R1
00146c 935f      	PUSH R21
00146d df8a      	RCALL __REPACK
00146e 915f      	POP  R21
                 __CDF10:
00146f 9508      	RET
                 
                 __SWAPACC:
001470 934f      	PUSH R20
001471 01af      	MOVW R20,R30
001472 01fd      	MOVW R30,R26
001473 01da      	MOVW R26,R20
001474 01ab      	MOVW R20,R22
001475 01bc      	MOVW R22,R24
001476 01ca      	MOVW R24,R20
001477 2d40      	MOV  R20,R0
001478 2c01      	MOV  R0,R1
001479 2e14      	MOV  R1,R20
00147a 914f      	POP  R20
00147b 9508      	RET
                 
                 __UADD12:
00147c 0fea      	ADD  R30,R26
00147d 1ffb      	ADC  R31,R27
00147e 1f68      	ADC  R22,R24
00147f 9508      	RET
                 
                 __NEGMAN1:
001480 95e0      	COM  R30
001481 95f0      	COM  R31
001482 9560      	COM  R22
001483 5fef      	SUBI R30,-1
001484 4fff      	SBCI R31,-1
001485 4f6f      	SBCI R22,-1
001486 9508      	RET
                 
                 __SUBF12:
001487 935f      	PUSH R21
001488 df81      	RCALL __UNPACK
001489 3890      	CPI  R25,0x80
00148a f171      	BREQ __ADDF129
00148b e850      	LDI  R21,0x80
00148c 2615      	EOR  R1,R21
                 
00148d c004      	RJMP __ADDF120
                 
                 __ADDF12:
00148e 935f      	PUSH R21
00148f df7a      	RCALL __UNPACK
001490 3890      	CPI  R25,0x80
001491 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001492 3870      	CPI  R23,0x80
001493 f121      	BREQ __ADDF128
                 __ADDF121:
001494 2f57      	MOV  R21,R23
001495 1b59      	SUB  R21,R25
001496 f12b      	BRVS __ADDF1211
001497 f412      	BRPL __ADDF122
001498 dfd7      	RCALL __SWAPACC
001499 cffa      	RJMP __ADDF121
                 __ADDF122:
00149a 3158      	CPI  R21,24
00149b f018      	BRLO __ADDF123
00149c 27aa      	CLR  R26
00149d 27bb      	CLR  R27
00149e 2788      	CLR  R24
                 __ADDF123:
00149f 3058      	CPI  R21,8
0014a0 f028      	BRLO __ADDF124
0014a1 2fab      	MOV  R26,R27
0014a2 2fb8      	MOV  R27,R24
0014a3 2788      	CLR  R24
0014a4 5058      	SUBI R21,8
0014a5 cff9      	RJMP __ADDF123
                 __ADDF124:
0014a6 2355      	TST  R21
0014a7 f029      	BREQ __ADDF126
                 __ADDF125:
0014a8 9586      	LSR  R24
0014a9 95b7      	ROR  R27
0014aa 95a7      	ROR  R26
0014ab 955a      	DEC  R21
0014ac f7d9      	BRNE __ADDF125
                 __ADDF126:
0014ad 2d50      	MOV  R21,R0
0014ae 2551      	EOR  R21,R1
0014af f072      	BRMI __ADDF127
0014b0 dfcb      	RCALL __UADD12
0014b1 f438      	BRCC __ADDF129
0014b2 9567      	ROR  R22
0014b3 95f7      	ROR  R31
0014b4 95e7      	ROR  R30
0014b5 9573      	INC  R23
0014b6 f413      	BRVC __ADDF129
0014b7 c020      	RJMP __MAXRES
                 __ADDF128:
0014b8 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0014b9 df3e      	RCALL __REPACK
0014ba 915f      	POP  R21
0014bb 9508      	RET
                 __ADDF1211:
0014bc f7d8      	BRCC __ADDF128
0014bd cffb      	RJMP __ADDF129
                 __ADDF127:
0014be 1bea      	SUB  R30,R26
0014bf 0bfb      	SBC  R31,R27
0014c0 0b68      	SBC  R22,R24
0014c1 f051      	BREQ __ZERORES
0014c2 f410      	BRCC __ADDF1210
0014c3 9400      	COM  R0
0014c4 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0014c5 2366      	TST  R22
0014c6 f392      	BRMI __ADDF129
0014c7 0fee      	LSL  R30
0014c8 1fff      	ROL  R31
0014c9 1f66      	ROL  R22
0014ca 957a      	DEC  R23
0014cb f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0014cc 27ee      	CLR  R30
0014cd 27ff      	CLR  R31
0014ce 2766      	CLR  R22
0014cf 2777      	CLR  R23
0014d0 915f      	POP  R21
0014d1 9508      	RET
                 
                 __MINRES:
0014d2 efef      	SER  R30
0014d3 efff      	SER  R31
0014d4 e76f      	LDI  R22,0x7F
0014d5 ef7f      	SER  R23
0014d6 915f      	POP  R21
0014d7 9508      	RET
                 
                 __MAXRES:
0014d8 efef      	SER  R30
0014d9 efff      	SER  R31
0014da e76f      	LDI  R22,0x7F
0014db e77f      	LDI  R23,0x7F
0014dc 915f      	POP  R21
0014dd 9508      	RET
                 
                 __MULF12:
0014de 935f      	PUSH R21
0014df df2a      	RCALL __UNPACK
0014e0 3870      	CPI  R23,0x80
0014e1 f351      	BREQ __ZERORES
0014e2 3890      	CPI  R25,0x80
0014e3 f341      	BREQ __ZERORES
0014e4 2401      	EOR  R0,R1
0014e5 9408      	SEC
0014e6 1f79      	ADC  R23,R25
0014e7 f423      	BRVC __MULF124
0014e8 f31c      	BRLT __ZERORES
                 __MULF125:
0014e9 2000      	TST  R0
0014ea f33a      	BRMI __MINRES
0014eb cfec      	RJMP __MAXRES
                 __MULF124:
0014ec 920f      	PUSH R0
0014ed 931f      	PUSH R17
0014ee 932f      	PUSH R18
0014ef 933f      	PUSH R19
0014f0 934f      	PUSH R20
0014f1 2711      	CLR  R17
0014f2 2722      	CLR  R18
0014f3 2799      	CLR  R25
0014f4 9f68      	MUL  R22,R24
0014f5 01a0      	MOVW R20,R0
0014f6 9f8f      	MUL  R24,R31
0014f7 2d30      	MOV  R19,R0
0014f8 0d41      	ADD  R20,R1
0014f9 1f59      	ADC  R21,R25
0014fa 9f6b      	MUL  R22,R27
0014fb 0d30      	ADD  R19,R0
0014fc 1d41      	ADC  R20,R1
0014fd 1f59      	ADC  R21,R25
0014fe 9f8e      	MUL  R24,R30
0014ff d027      	RCALL __MULF126
001500 9fbf      	MUL  R27,R31
001501 d025      	RCALL __MULF126
001502 9f6a      	MUL  R22,R26
001503 d023      	RCALL __MULF126
001504 9fbe      	MUL  R27,R30
001505 d01d      	RCALL __MULF127
001506 9faf      	MUL  R26,R31
001507 d01b      	RCALL __MULF127
001508 9fae      	MUL  R26,R30
001509 0d11      	ADD  R17,R1
00150a 1f29      	ADC  R18,R25
00150b 1f39      	ADC  R19,R25
00150c 1f49      	ADC  R20,R25
00150d 1f59      	ADC  R21,R25
00150e 2fe3      	MOV  R30,R19
00150f 2ff4      	MOV  R31,R20
001510 2f65      	MOV  R22,R21
001511 2f52      	MOV  R21,R18
001512 914f      	POP  R20
001513 913f      	POP  R19
001514 912f      	POP  R18
001515 911f      	POP  R17
001516 900f      	POP  R0
001517 2366      	TST  R22
001518 f02a      	BRMI __MULF122
001519 0f55      	LSL  R21
00151a 1fee      	ROL  R30
00151b 1fff      	ROL  R31
00151c 1f66      	ROL  R22
00151d c002      	RJMP __MULF123
                 __MULF122:
00151e 9573      	INC  R23
00151f f24b      	BRVS __MULF125
                 __MULF123:
001520 decd      	RCALL __ROUND_REPACK
001521 915f      	POP  R21
001522 9508      	RET
                 
                 __MULF127:
001523 0d10      	ADD  R17,R0
001524 1d21      	ADC  R18,R1
001525 1f39      	ADC  R19,R25
001526 c002      	RJMP __MULF128
                 __MULF126:
001527 0d20      	ADD  R18,R0
001528 1d31      	ADC  R19,R1
                 __MULF128:
001529 1f49      	ADC  R20,R25
00152a 1f59      	ADC  R21,R25
00152b 9508      	RET
                 
                 __DIVF21:
00152c 935f      	PUSH R21
00152d dedc      	RCALL __UNPACK
00152e 3870      	CPI  R23,0x80
00152f f421      	BRNE __DIVF210
001530 2011      	TST  R1
                 __DIVF211:
001531 f40a      	BRPL __DIVF219
001532 cf9f      	RJMP __MINRES
                 __DIVF219:
001533 cfa4      	RJMP __MAXRES
                 __DIVF210:
001534 3890      	CPI  R25,0x80
001535 f409      	BRNE __DIVF218
                 __DIVF217:
001536 cf95      	RJMP __ZERORES
                 __DIVF218:
001537 2401      	EOR  R0,R1
001538 9408      	SEC
001539 0b97      	SBC  R25,R23
00153a f41b      	BRVC __DIVF216
00153b f3d4      	BRLT __DIVF217
00153c 2000      	TST  R0
00153d cff3      	RJMP __DIVF211
                 __DIVF216:
00153e 2f79      	MOV  R23,R25
00153f 931f      	PUSH R17
001540 932f      	PUSH R18
001541 933f      	PUSH R19
001542 934f      	PUSH R20
001543 2411      	CLR  R1
001544 2711      	CLR  R17
001545 2722      	CLR  R18
001546 2733      	CLR  R19
001547 2744      	CLR  R20
001548 2755      	CLR  R21
001549 e290      	LDI  R25,32
                 __DIVF212:
00154a 17ae      	CP   R26,R30
00154b 07bf      	CPC  R27,R31
00154c 0786      	CPC  R24,R22
00154d 0741      	CPC  R20,R17
00154e f030      	BRLO __DIVF213
00154f 1bae      	SUB  R26,R30
001550 0bbf      	SBC  R27,R31
001551 0b86      	SBC  R24,R22
001552 0b41      	SBC  R20,R17
001553 9408      	SEC
001554 c001      	RJMP __DIVF214
                 __DIVF213:
001555 9488      	CLC
                 __DIVF214:
001556 1f55      	ROL  R21
001557 1f22      	ROL  R18
001558 1f33      	ROL  R19
001559 1c11      	ROL  R1
00155a 1faa      	ROL  R26
00155b 1fbb      	ROL  R27
00155c 1f88      	ROL  R24
00155d 1f44      	ROL  R20
00155e 959a      	DEC  R25
00155f f751      	BRNE __DIVF212
001560 01f9      	MOVW R30,R18
001561 2d61      	MOV  R22,R1
001562 914f      	POP  R20
001563 913f      	POP  R19
001564 912f      	POP  R18
001565 911f      	POP  R17
001566 2366      	TST  R22
001567 f032      	BRMI __DIVF215
001568 0f55      	LSL  R21
001569 1fee      	ROL  R30
00156a 1fff      	ROL  R31
00156b 1f66      	ROL  R22
00156c 957a      	DEC  R23
00156d f243      	BRVS __DIVF217
                 __DIVF215:
00156e de7f      	RCALL __ROUND_REPACK
00156f 915f      	POP  R21
001570 9508      	RET
                 
                 __CMPF12:
001571 2399      	TST  R25
001572 f09a      	BRMI __CMPF120
001573 2377      	TST  R23
001574 f042      	BRMI __CMPF121
001575 1797      	CP   R25,R23
001576 f048      	BRLO __CMPF122
001577 f429      	BRNE __CMPF121
001578 17ae      	CP   R26,R30
001579 07bf      	CPC  R27,R31
00157a 0786      	CPC  R24,R22
00157b f020      	BRLO __CMPF122
00157c f031      	BREQ __CMPF123
                 __CMPF121:
00157d 9498      	CLZ
00157e 9488      	CLC
00157f 9508      	RET
                 __CMPF122:
001580 9498      	CLZ
001581 9408      	SEC
001582 9508      	RET
                 __CMPF123:
001583 9418      	SEZ
001584 9488      	CLC
001585 9508      	RET
                 __CMPF120:
001586 2377      	TST  R23
001587 f7c2      	BRPL __CMPF122
001588 1797      	CP   R25,R23
001589 f398      	BRLO __CMPF121
00158a f7a9      	BRNE __CMPF122
00158b 17ea      	CP   R30,R26
00158c 07fb      	CPC  R31,R27
00158d 0768      	CPC  R22,R24
00158e f388      	BRLO __CMPF122
00158f f399      	BREQ __CMPF123
001590 cfec      	RJMP __CMPF121
                 
                 _sqrt:
001591 9724      	sbiw r28,4
001592 935f      	push r21
001593 819f      	ldd  r25,y+7
001594 2399      	tst  r25
001595 f411      	brne __sqrt0
001596 9628      	adiw r28,8
001597 cf34      	rjmp __zerores
                 __sqrt0:
001598 f412      	brpl __sqrt1
001599 9628      	adiw r28,8
00159a cf3d      	rjmp __maxres
                 __sqrt1:
00159b 934f      	push r20
00159c e442      	ldi  r20,66
00159d 818e      	ldd  r24,y+6
00159e 81bd      	ldd  r27,y+5
00159f 81ac      	ldd  r26,y+4
                 __sqrt2:
0015a0 8388      	st   y,r24
0015a1 8399      	std  y+1,r25
0015a2 83aa      	std  y+2,r26
0015a3 83bb      	std  y+3,r27
0015a4 01fd      	movw r30,r26
0015a5 01bc      	movw r22,r24
0015a6 81ac      	ldd  r26,y+4
0015a7 81bd      	ldd  r27,y+5
0015a8 818e      	ldd  r24,y+6
0015a9 819f      	ldd  r25,y+7
0015aa df81      	rcall __divf21
0015ab 8188      	ld   r24,y
0015ac 8199      	ldd  r25,y+1
0015ad 81aa      	ldd  r26,y+2
0015ae 81bb      	ldd  r27,y+3
0015af dede      	rcall __addf12
0015b0 de61      	rcall __unpack1
0015b1 957a      	dec  r23
0015b2 de45      	rcall __repack
0015b3 8188      	ld   r24,y
0015b4 8199      	ldd  r25,y+1
0015b5 81aa      	ldd  r26,y+2
0015b6 81bb      	ldd  r27,y+3
0015b7 27ae      	eor  r26,r30
0015b8 7fa8      	andi r26,0xf8
0015b9 f421      	brne __sqrt4
0015ba 17bf      	cp   r27,r31
0015bb 0786      	cpc  r24,r22
0015bc 0797      	cpc  r25,r23
0015bd f029      	breq __sqrt3
                 __sqrt4:
0015be 954a      	dec  r20
0015bf f019      	breq __sqrt3
0015c0 01df      	movw r26,r30
0015c1 01cb      	movw r24,r22
0015c2 cfdd      	rjmp __sqrt2
                 __sqrt3:
0015c3 914f      	pop  r20
0015c4 915f      	pop  r21
0015c5 9628      	adiw r28,8
0015c6 9508      	ret
                 
                 __SUBD12:
0015c7 1bea      	SUB  R30,R26
0015c8 0bfb      	SBC  R31,R27
0015c9 0b68      	SBC  R22,R24
0015ca 0b79      	SBC  R23,R25
0015cb 9508      	RET
                 
                 __ORD12:
0015cc 2bea      	OR   R30,R26
0015cd 2bfb      	OR   R31,R27
0015ce 2b68      	OR   R22,R24
0015cf 2b79      	OR   R23,R25
0015d0 9508      	RET
                 
                 __ANEGD1:
0015d1 95f0      	COM  R31
0015d2 9560      	COM  R22
0015d3 9570      	COM  R23
0015d4 95e1      	NEG  R30
0015d5 4fff      	SBCI R31,-1
0015d6 4f6f      	SBCI R22,-1
0015d7 4f7f      	SBCI R23,-1
0015d8 9508      	RET
                 
                 __LSLD12:
0015d9 23ee      	TST  R30
0015da 2e0e      	MOV  R0,R30
0015db 01fd      	MOVW R30,R26
0015dc 01bc      	MOVW R22,R24
0015dd f031      	BREQ __LSLD12R
                 __LSLD12L:
0015de 0fee      	LSL  R30
0015df 1fff      	ROL  R31
0015e0 1f66      	ROL  R22
0015e1 1f77      	ROL  R23
0015e2 940a      	DEC  R0
0015e3 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0015e4 9508      	RET
                 
                 __LSLD16:
0015e5 2f6e      	MOV  R22,R30
0015e6 2f7f      	MOV  R23,R31
0015e7 e0e0      	LDI  R30,0
0015e8 e0f0      	LDI  R31,0
0015e9 9508      	RET
                 
                 __CWD1:
0015ea 2f6f      	MOV  R22,R31
0015eb 0f66      	ADD  R22,R22
0015ec 0b66      	SBC  R22,R22
0015ed 2f76      	MOV  R23,R22
0015ee 9508      	RET
                 
                 __PUTPARD1:
0015ef 937a      	ST   -Y,R23
0015f0 936a      	ST   -Y,R22
0015f1 93fa      	ST   -Y,R31
0015f2 93ea      	ST   -Y,R30
0015f3 9508      	RET
                 
                 __SWAPD12:
0015f4 2e18      	MOV  R1,R24
0015f5 2f86      	MOV  R24,R22
0015f6 2d61      	MOV  R22,R1
0015f7 2e19      	MOV  R1,R25
0015f8 2f97      	MOV  R25,R23
0015f9 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0015fa 2e1b      	MOV  R1,R27
0015fb 2fbf      	MOV  R27,R31
0015fc 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0015fd 2e1a      	MOV  R1,R26
0015fe 2fae      	MOV  R26,R30
0015ff 2de1      	MOV  R30,R1
001600 9508      	RET
                 
                 __CPD12:
001601 17ea      	CP   R30,R26
001602 07fb      	CPC  R31,R27
001603 0768      	CPC  R22,R24
001604 0779      	CPC  R23,R25
001605 9508      	RET
                 
                 __SAVELOCR6:
001606 935a      	ST   -Y,R21
                 __SAVELOCR5:
001607 934a      	ST   -Y,R20
                 __SAVELOCR4:
001608 933a      	ST   -Y,R19
                 __SAVELOCR3:
001609 932a      	ST   -Y,R18
                 __SAVELOCR2:
00160a 931a      	ST   -Y,R17
00160b 930a      	ST   -Y,R16
00160c 9508      	RET
                 
                 __LOADLOCR6:
00160d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00160e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00160f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001610 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001611 8119      	LDD  R17,Y+1
001612 8108      	LD   R16,Y
001613 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
001614 0fac      	ADD  R26,R28
001615 1fbd      	ADC  R27,R29
                 __INITLOC0:
001616 9005      	LPM  R0,Z+
001617 920d      	ST   X+,R0
001618 958a      	DEC  R24
001619 f7e1      	BRNE __INITLOC0
00161a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATxmega128A1 register use summary:
r0 :  32 r1 :  32 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   3 r7 :   0 
r8 :   0 r9 :   0 r10:  11 r11:   1 r12:   0 r13:   2 r14:   0 r15:   2 
r16:  68 r17:  83 r18:  18 r19: 186 r20:  29 r21:  68 r22: 274 r23: 262 
r24: 199 r25: 195 r26: 310 r27: 222 r28:  14 r29:   2 r30: 716 r31: 300 
x  :  48 y  : 201 z  :  11 
Registers used: 26 out of 35 (74.3%)

ATxmega128A1 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   8 
adiw  :  54 and   :   4 andi  :  25 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :  14 brcs  :   2 break :   0 breq  :  36 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   2 brmi  :   9 brne  :  27 brpl  :  10 brsh  :  63 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 504 
cbi   :  12 cbr   :   2 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  21 cls   :   0 clt   :   2 clv   :   0 clz   :   2 com   :  15 
cp    :   8 cpc   :  19 cpi   :  80 cpse  :   0 dec   :  11 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   9 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   2 jmp   : 147 
ld    :  45 ldd   :  99 ldi   : 581 lds   : 397 lpm   :   8 lsl   :  12 
lsr   :   2 mov   :  52 movw  :  40 mul   :   9 muls  :   0 mulsu :   0 
neg   :   2 nop   :  27 or    :   4 ori   :  16 out   :  30 pop   : 260 
push  : 260 rcall :  54 ret   : 138 reti  :   2 rjmp  : 136 rol   :  27 
ror   :  12 sbc   :  10 sbci  :  14 sbi   :  10 sbic  :   4 sbis  :   9 
sbiw  :   6 sbr   :   1 sbrc  :   0 sbrs  :   1 sec   :   4 seh   :   0 
sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 sev   :   0 
sez   :   1 sleep :   0 spm   :   0 st    : 101 std   :   7 sts   : 468 
sub   :   5 subi  :  63 swap  :   0 tst   :  21 wdr   :   0 
Instructions used: 78 out of 119 (65.5%)

ATxmega128A1 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002c36  11212    106  11318  135168   8.4%
[.dseg] 0x002000 0x002517      0    279    279   16383   1.7%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 12 warnings
